# ./binding.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:a3135dade0e6bc856d3a7f251b4a150689752396
# Generated 2015-07-06 15:58:03.788118 by PyXB version 1.2.4 using Python 2.7.6.final.0
# Namespace http://ddex.net/xml/ern/36

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:b747fe78-23f7-11e5-9249-080027960975')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.4'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import _avs as _ImportedBinding__avs

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://ddex.net/xml/ern/36', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 216, 12)
    _Documentation = None
STD_ANON._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON._CF_pattern.addPattern(pattern='R[\\d\\-_a-zA-Z]+')
STD_ANON._InitializeFacetMap(STD_ANON._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 334, 12)
    _Documentation = None
STD_ANON_._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_._CF_pattern.addPattern(pattern='X[\\d\\-_a-zA-Z]+')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 427, 12)
    _Documentation = None
STD_ANON_2._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_2._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 532, 12)
    _Documentation = None
STD_ANON_3._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_3._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 568, 12)
    _Documentation = None
STD_ANON_4._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_4._CF_pattern.addPattern(pattern='W[\\d\\-_a-zA-Z]+')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 754, 12)
    _Documentation = None
STD_ANON_5._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_5._CF_pattern.addPattern(pattern='Q[\\d\\-_a-zA-Z]+')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 858, 12)
    _Documentation = None
STD_ANON_6._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_6._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1060, 12)
    _Documentation = None
STD_ANON_7._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_7._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1239, 12)
    _Documentation = None
STD_ANON_8._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_8._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1662, 12)
    _Documentation = None
STD_ANON_9._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_9._CF_pattern.addPattern(pattern='R[\\d\\-_a-zA-Z]+')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1813, 12)
    _Documentation = None
STD_ANON_10._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_10._CF_pattern.addPattern(pattern='R[\\d\\-_a-zA-Z]+')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2289, 15)
    _Documentation = None
STD_ANON_11._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_11._CF_pattern.addPattern(pattern='R[\\d\\-_a-zA-Z]+')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2387, 12)
    _Documentation = None
STD_ANON_12._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_12._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2449, 12)
    _Documentation = None
STD_ANON_13._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_13._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2639, 12)
    _Documentation = None
STD_ANON_14._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_14._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2839, 12)
    _Documentation = None
STD_ANON_15._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_15._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3242, 12)
    _Documentation = None
STD_ANON_16._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_16._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3348, 12)
    _Documentation = None
STD_ANON_17._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_17._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_18 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3443, 12)
    _Documentation = None
STD_ANON_18._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_18._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_19 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3526, 12)
    _Documentation = None
STD_ANON_19._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_19._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_20 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3604, 12)
    _Documentation = None
STD_ANON_20._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_20._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_21 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3722, 12)
    _Documentation = None
STD_ANON_21._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_21._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_21._InitializeFacetMap(STD_ANON_21._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_22 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3803, 12)
    _Documentation = None
STD_ANON_22._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_22._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_22._InitializeFacetMap(STD_ANON_22._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_23 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3877, 12)
    _Documentation = None
STD_ANON_23._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_23._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_23._InitializeFacetMap(STD_ANON_23._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_24 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4068, 12)
    _Documentation = None
STD_ANON_24._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_24._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_24._InitializeFacetMap(STD_ANON_24._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_25 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4338, 12)
    _Documentation = None
STD_ANON_25._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_25._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_25._InitializeFacetMap(STD_ANON_25._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_26 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4543, 12)
    _Documentation = None
STD_ANON_26._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_26._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_26._InitializeFacetMap(STD_ANON_26._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_27 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5286, 12)
    _Documentation = None
STD_ANON_27._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_27._CF_pattern.addPattern(pattern='X[\\d\\-_a-zA-Z]+')
STD_ANON_27._InitializeFacetMap(STD_ANON_27._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_28 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5596, 15)
    _Documentation = None
STD_ANON_28._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_28._CF_pattern.addPattern(pattern='W[\\d\\-_a-zA-Z]+')
STD_ANON_28._InitializeFacetMap(STD_ANON_28._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_29 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5606, 15)
    _Documentation = None
STD_ANON_29._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_29._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_29._InitializeFacetMap(STD_ANON_29._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_30 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6100, 12)
    _Documentation = None
STD_ANON_30._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_30._CF_pattern.addPattern(pattern='R[\\d\\-_a-zA-Z]+')
STD_ANON_30._InitializeFacetMap(STD_ANON_30._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_31 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6611, 12)
    _Documentation = None
STD_ANON_31._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_31._CF_pattern.addPattern(pattern='W[\\d\\-_a-zA-Z]+')
STD_ANON_31._InitializeFacetMap(STD_ANON_31._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_32 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7457, 12)
    _Documentation = None
STD_ANON_32._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_32._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_32._InitializeFacetMap(STD_ANON_32._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_33 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7554, 15)
    _Documentation = None
STD_ANON_33._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_33._CF_pattern.addPattern(pattern='R[\\d\\-_a-zA-Z]+')
STD_ANON_33._InitializeFacetMap(STD_ANON_33._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_34 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7599, 12)
    _Documentation = None
STD_ANON_34._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_34._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_34._InitializeFacetMap(STD_ANON_34._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_35 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7631, 12)
    _Documentation = None
STD_ANON_35._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_35._CF_pattern.addPattern(pattern='W[\\d\\-_a-zA-Z]+')
STD_ANON_35._InitializeFacetMap(STD_ANON_35._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_36 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7705, 12)
    _Documentation = None
STD_ANON_36._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_36._CF_pattern.addPattern(pattern='S[\\d\\-_a-zA-Z]+')
STD_ANON_36._InitializeFacetMap(STD_ANON_36._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_37 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7844, 12)
    _Documentation = None
STD_ANON_37._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_37._CF_pattern.addPattern(pattern='W[\\d\\-_a-zA-Z]+')
STD_ANON_37._InitializeFacetMap(STD_ANON_37._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_38 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7856, 12)
    _Documentation = None
STD_ANON_38._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_38._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_38._InitializeFacetMap(STD_ANON_38._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_39 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7868, 12)
    _Documentation = None
STD_ANON_39._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_39._CF_pattern.addPattern(pattern='R[\\d\\-_a-zA-Z]+')
STD_ANON_39._InitializeFacetMap(STD_ANON_39._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_40 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8181, 12)
    _Documentation = None
STD_ANON_40._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_40._CF_pattern.addPattern(pattern='X[\\d\\-_a-zA-Z]+')
STD_ANON_40._InitializeFacetMap(STD_ANON_40._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_41 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8672, 12)
    _Documentation = None
STD_ANON_41._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_41._CF_pattern.addPattern(pattern='Q[\\d\\-_a-zA-Z]+')
STD_ANON_41._InitializeFacetMap(STD_ANON_41._CF_pattern)

# Atomic simple type: {http://ddex.net/xml/ern/36}ddex_LocalCollectionAnchorReference
class ddex_LocalCollectionAnchorReference (pyxb.binding.datatypes.IDREF):

    """A LocalAnchorReference which acts as a reference to a local Identifier of a Collection. This LocalAnchorReference is a xs:string starting with the letter X."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ddex_LocalCollectionAnchorReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8799, 3)
    _Documentation = 'A LocalAnchorReference which acts as a reference to a local Identifier of a Collection. This LocalAnchorReference is a xs:string starting with the letter X.'
ddex_LocalCollectionAnchorReference._CF_pattern = pyxb.binding.facets.CF_pattern()
ddex_LocalCollectionAnchorReference._CF_pattern.addPattern(pattern='X[\\d\\-_a-zA-Z]+')
ddex_LocalCollectionAnchorReference._InitializeFacetMap(ddex_LocalCollectionAnchorReference._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ddex_LocalCollectionAnchorReference', ddex_LocalCollectionAnchorReference)

# Atomic simple type: {http://ddex.net/xml/ern/36}ddex_LocalResourceAnchorReference
class ddex_LocalResourceAnchorReference (pyxb.binding.datatypes.IDREF):

    """A LocalAnchorReference which acts as a reference to a local Identifier of a Resource. This LocalAnchorReference is a xs:string starting with the letter A."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ddex_LocalResourceAnchorReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8807, 3)
    _Documentation = 'A LocalAnchorReference which acts as a reference to a local Identifier of a Resource. This LocalAnchorReference is a xs:string starting with the letter A.'
ddex_LocalResourceAnchorReference._CF_pattern = pyxb.binding.facets.CF_pattern()
ddex_LocalResourceAnchorReference._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
ddex_LocalResourceAnchorReference._InitializeFacetMap(ddex_LocalResourceAnchorReference._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ddex_LocalResourceAnchorReference', ddex_LocalResourceAnchorReference)

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """A Message in the Release Notification Message Suite Standard, containing details of a new Release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 17, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MessageHeader uses Python identifier MessageHeader
    __MessageHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageHeader'), 'MessageHeader', '__httpddex_netxmlern36_CTD_ANON_MessageHeader', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 19, 12), )

    
    MessageHeader = property(__MessageHeader.value, __MessageHeader.set, None, 'The MessageHeader for the NewReleaseMessage.')

    
    # Element UpdateIndicator uses Python identifier UpdateIndicator
    __UpdateIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdateIndicator'), 'UpdateIndicator', '__httpddex_netxmlern36_CTD_ANON_UpdateIndicator', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 24, 12), )

    
    UpdateIndicator = property(__UpdateIndicator.value, __UpdateIndicator.set, None, 'The indicator which distinguishes whether the Message contains original data or updates to previously sent data. This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it.')

    
    # Element IsBackfill uses Python identifier IsBackfill
    __IsBackfill = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBackfill'), 'IsBackfill', '__httpddex_netxmlern36_CTD_ANON_IsBackfill', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 29, 12), )

    
    IsBackfill = property(__IsBackfill.value, __IsBackfill.set, None, 'A Flag indicating whether the NewReleaseMessage is sent as part of a backfill activity (as opposed to providing ongoing deliveries of frontline Releases) (=True) or not (=False). When this element is not present, then no information on whether it is part of a backfill activity or not is provided.')

    
    # Element CatalogTransfer uses Python identifier CatalogTransfer
    __CatalogTransfer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogTransfer'), 'CatalogTransfer', '__httpddex_netxmlern36_CTD_ANON_CatalogTransfer', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 34, 12), )

    
    CatalogTransfer = property(__CatalogTransfer.value, __CatalogTransfer.set, None, 'A Composite containing details of a Price change.')

    
    # Element WorkList uses Python identifier WorkList
    __WorkList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WorkList'), 'WorkList', '__httpddex_netxmlern36_CTD_ANON_WorkList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 39, 12), )

    
    WorkList = property(__WorkList.value, __WorkList.set, None, 'A Composite containing details of one or more MusicalWorks, a Performance of which is contained in the Resources of the NewReleaseMessage.')

    
    # Element CueSheetList uses Python identifier CueSheetList
    __CueSheetList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueSheetList'), 'CueSheetList', '__httpddex_netxmlern36_CTD_ANON_CueSheetList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 44, 12), )

    
    CueSheetList = property(__CueSheetList.value, __CueSheetList.set, None, 'A Composite containing details of one or more CueSheets contained in Releases for which data is provided in the NewReleaseMessage.')

    
    # Element ResourceList uses Python identifier ResourceList
    __ResourceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceList'), 'ResourceList', '__httpddex_netxmlern36_CTD_ANON_ResourceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 49, 12), )

    
    ResourceList = property(__ResourceList.value, __ResourceList.set, None, 'A Composite containing details of one or more Resources.')

    
    # Element CollectionList uses Python identifier CollectionList
    __CollectionList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionList'), 'CollectionList', '__httpddex_netxmlern36_CTD_ANON_CollectionList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 54, 12), )

    
    CollectionList = property(__CollectionList.value, __CollectionList.set, None, 'A Composite containing details of one or more Collections contained in Releases for which data is provided in the NewReleaseMessage.')

    
    # Element ReleaseList uses Python identifier ReleaseList
    __ReleaseList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseList'), 'ReleaseList', '__httpddex_netxmlern36_CTD_ANON_ReleaseList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 59, 12), )

    
    ReleaseList = property(__ReleaseList.value, __ReleaseList.set, None, 'A Composite containing details of one or more DDEX Releases contained in the NewReleaseMessage.')

    
    # Element DealList uses Python identifier DealList
    __DealList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealList'), 'DealList', '__httpddex_netxmlern36_CTD_ANON_DealList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 64, 12), )

    
    DealList = property(__DealList.value, __DealList.set, None, 'A Composite containing details of one or more Deals governing the Usage of the Releases in the Message.')

    
    # Attribute MessageSchemaVersionId uses Python identifier MessageSchemaVersionId
    __MessageSchemaVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MessageSchemaVersionId'), 'MessageSchemaVersionId', '__httpddex_netxmlern36_CTD_ANON_MessageSchemaVersionId', pyxb.binding.datatypes.string, required=True)
    __MessageSchemaVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 70, 9)
    __MessageSchemaVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 70, 9)
    
    MessageSchemaVersionId = property(__MessageSchemaVersionId.value, __MessageSchemaVersionId.set, None, 'The Identifier of the Version of the XML schema used for the Message. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute BusinessProfileVersionId uses Python identifier BusinessProfileVersionId
    __BusinessProfileVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BusinessProfileVersionId'), 'BusinessProfileVersionId', '__httpddex_netxmlern36_CTD_ANON_BusinessProfileVersionId', pyxb.binding.datatypes.string)
    __BusinessProfileVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 75, 9)
    __BusinessProfileVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 75, 9)
    
    BusinessProfileVersionId = property(__BusinessProfileVersionId.value, __BusinessProfileVersionId.set, None, 'The Identifier of the Version of the business profile used for the Message. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute ReleaseProfileVersionId uses Python identifier ReleaseProfileVersionId
    __ReleaseProfileVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReleaseProfileVersionId'), 'ReleaseProfileVersionId', '__httpddex_netxmlern36_CTD_ANON_ReleaseProfileVersionId', pyxb.binding.datatypes.string)
    __ReleaseProfileVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 80, 9)
    __ReleaseProfileVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 80, 9)
    
    ReleaseProfileVersionId = property(__ReleaseProfileVersionId.value, __ReleaseProfileVersionId.set, None, 'The Identifier of the Version of the release profile used for the Message. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_CTD_ANON_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 85, 9)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 85, 9)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the NewReleaseMessage as defined in IETF RfC 4646. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __MessageHeader.name() : __MessageHeader,
        __UpdateIndicator.name() : __UpdateIndicator,
        __IsBackfill.name() : __IsBackfill,
        __CatalogTransfer.name() : __CatalogTransfer,
        __WorkList.name() : __WorkList,
        __CueSheetList.name() : __CueSheetList,
        __ResourceList.name() : __ResourceList,
        __CollectionList.name() : __CollectionList,
        __ReleaseList.name() : __ReleaseList,
        __DealList.name() : __DealList
    })
    _AttributeMap.update({
        __MessageSchemaVersionId.name() : __MessageSchemaVersionId,
        __BusinessProfileVersionId.name() : __BusinessProfileVersionId,
        __ReleaseProfileVersionId.name() : __ReleaseProfileVersionId,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """A Message in the Release Notification Message Suite Standard, containing a list of Releases that form part of a catalog."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 96, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MessageHeader uses Python identifier MessageHeader
    __MessageHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageHeader'), 'MessageHeader', '__httpddex_netxmlern36_CTD_ANON__MessageHeader', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 98, 12), )

    
    MessageHeader = property(__MessageHeader.value, __MessageHeader.set, None, 'The MessageHeader for the CatalogListMessage.')

    
    # Element PublicationDate uses Python identifier PublicationDate
    __PublicationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PublicationDate'), 'PublicationDate', '__httpddex_netxmlern36_CTD_ANON__PublicationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 103, 12), )

    
    PublicationDate = property(__PublicationDate.value, __PublicationDate.set, None, 'The DateTime at which the catalog will become available (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD).')

    
    # Element CatalogItem uses Python identifier CatalogItem
    __CatalogItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogItem'), 'CatalogItem', '__httpddex_netxmlern36_CTD_ANON__CatalogItem', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 108, 12), )

    
    CatalogItem = property(__CatalogItem.value, __CatalogItem.set, None, 'A Composite containing details of a Release which is an item of the catalog.')

    
    # Attribute MessageSchemaVersionId uses Python identifier MessageSchemaVersionId
    __MessageSchemaVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MessageSchemaVersionId'), 'MessageSchemaVersionId', '__httpddex_netxmlern36_CTD_ANON__MessageSchemaVersionId', pyxb.binding.datatypes.string, required=True)
    __MessageSchemaVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 114, 9)
    __MessageSchemaVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 114, 9)
    
    MessageSchemaVersionId = property(__MessageSchemaVersionId.value, __MessageSchemaVersionId.set, None, 'The Identifier of the Version of the XML schema used for the Message. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute BusinessProfileVersionId uses Python identifier BusinessProfileVersionId
    __BusinessProfileVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BusinessProfileVersionId'), 'BusinessProfileVersionId', '__httpddex_netxmlern36_CTD_ANON__BusinessProfileVersionId', pyxb.binding.datatypes.string)
    __BusinessProfileVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 119, 9)
    __BusinessProfileVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 119, 9)
    
    BusinessProfileVersionId = property(__BusinessProfileVersionId.value, __BusinessProfileVersionId.set, None, 'The Identifier of the Version of the business profile used for the Message. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute ReleaseProfileVersionId uses Python identifier ReleaseProfileVersionId
    __ReleaseProfileVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReleaseProfileVersionId'), 'ReleaseProfileVersionId', '__httpddex_netxmlern36_CTD_ANON__ReleaseProfileVersionId', pyxb.binding.datatypes.string)
    __ReleaseProfileVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 124, 9)
    __ReleaseProfileVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 124, 9)
    
    ReleaseProfileVersionId = property(__ReleaseProfileVersionId.value, __ReleaseProfileVersionId.set, None, 'The Identifier of the Version of the release profile used for the Message. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_CTD_ANON__LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 129, 9)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 129, 9)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the CatalogListMessage as defined in IETF RfC 4646. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __MessageHeader.name() : __MessageHeader,
        __PublicationDate.name() : __PublicationDate,
        __CatalogItem.name() : __CatalogItem
    })
    _AttributeMap.update({
        __MessageSchemaVersionId.name() : __MessageSchemaVersionId,
        __BusinessProfileVersionId.name() : __BusinessProfileVersionId,
        __ReleaseProfileVersionId.name() : __ReleaseProfileVersionId,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })



# Complex type {http://ddex.net/xml/ern/36}CatalogItem with content type ELEMENT_ONLY
class CatalogItem (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Release which is an item of a catalog."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CatalogItem')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 136, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_CatalogItem_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 141, 9), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory for the Release (represented by an ISO 3166-1 TerritoryCode).')

    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern36_CatalogItem_ReleaseId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 146, 9), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A Composite containing details of ReleaseIds. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_CatalogItem_Title', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 151, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the Release.')

    
    # Element DisplayArtistName uses Python identifier DisplayArtistName
    __DisplayArtistName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtistName'), 'DisplayArtistName', '__httpddex_netxmlern36_CatalogItem_DisplayArtistName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 156, 9), )

    
    DisplayArtistName = property(__DisplayArtistName.value, __DisplayArtistName.set, None, 'A Composite containing the Name to be used by a DSP when presenting Artist details of the Release to a Consumer.')

    
    # Element ContributorName uses Python identifier ContributorName
    __ContributorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContributorName'), 'ContributorName', '__httpddex_netxmlern36_CatalogItem_ContributorName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 161, 9), )

    
    ContributorName = property(__ContributorName.value, __ContributorName.set, None, 'A Composite containing details of a Contributor to the catalog, i.e. to at least one of the included Releases.')

    
    # Element DisplayTitle uses Python identifier DisplayTitle
    __DisplayTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayTitle'), 'DisplayTitle', '__httpddex_netxmlern36_CatalogItem_DisplayTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 166, 9), )

    
    DisplayTitle = property(__DisplayTitle.value, __DisplayTitle.set, None, 'A Composite containing details of a DisplayTitle of the Release.')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpddex_netxmlern36_CatalogItem_LabelName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 171, 9), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'A Composite containing the Name of the Label for the Release.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern36_CatalogItem_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 176, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A Composite containing details of a Genre to which the Release belongs.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern36_CatalogItem_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 184, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A Composite containing details of the PLine for the Release.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern36_CatalogItem_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 192, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A Composite containing details of the CLine for the Release.')

    
    # Element ReleaseDate uses Python identifier ReleaseDate
    __ReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDate'), 'ReleaseDate', '__httpddex_netxmlern36_CatalogItem_ReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 200, 9), )

    
    ReleaseDate = property(__ReleaseDate.value, __ReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Release was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ReleaseId.name() : __ReleaseId,
        __Title.name() : __Title,
        __DisplayArtistName.name() : __DisplayArtistName,
        __ContributorName.name() : __ContributorName,
        __DisplayTitle.name() : __DisplayTitle,
        __LabelName.name() : __LabelName,
        __Genre.name() : __Genre,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine,
        __ReleaseDate.name() : __ReleaseDate
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CatalogItem', CatalogItem)


# Complex type {http://ddex.net/xml/ern/36}CatalogReleaseReferenceList with content type ELEMENT_ONLY
class CatalogReleaseReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a list of CatalogReleaseReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CatalogReleaseReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 207, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CatalogReleaseReference uses Python identifier CatalogReleaseReference
    __CatalogReleaseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReference'), 'CatalogReleaseReference', '__httpddex_netxmlern36_CatalogReleaseReferenceList_CatalogReleaseReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 212, 9), )

    
    CatalogReleaseReference = property(__CatalogReleaseReference.value, __CatalogReleaseReference.set, None, 'A Reference for a Release (specific to this Message) that is part of the catalog. This is a LocalReleaseAnchorReference starting with the letter R.')

    _ElementMap.update({
        __CatalogReleaseReference.name() : __CatalogReleaseReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CatalogReleaseReferenceList', CatalogReleaseReferenceList)


# Complex type {http://ddex.net/xml/ern/36}CatalogTransfer with content type ELEMENT_ONLY
class CatalogTransfer (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CatalogTransfer."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CatalogTransfer')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 224, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CatalogTransferCompleted uses Python identifier CatalogTransferCompleted
    __CatalogTransferCompleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogTransferCompleted'), 'CatalogTransferCompleted', '__httpddex_netxmlern36_CatalogTransfer_CatalogTransferCompleted', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 229, 9), )

    
    CatalogTransferCompleted = property(__CatalogTransferCompleted.value, __CatalogTransferCompleted.set, None, 'A Flag indicating whether the CatalogTransfer has been made (=True) or still needs to be made (=False).')

    
    # Element EffectiveTransferDate uses Python identifier EffectiveTransferDate
    __EffectiveTransferDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EffectiveTransferDate'), 'EffectiveTransferDate', '__httpddex_netxmlern36_CatalogTransfer_EffectiveTransferDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 234, 9), )

    
    EffectiveTransferDate = property(__EffectiveTransferDate.value, __EffectiveTransferDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the catalog is or was transferred.')

    
    # Element CatalogReleaseReferenceList uses Python identifier CatalogReleaseReferenceList
    __CatalogReleaseReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReferenceList'), 'CatalogReleaseReferenceList', '__httpddex_netxmlern36_CatalogTransfer_CatalogReleaseReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 239, 9), )

    
    CatalogReleaseReferenceList = property(__CatalogReleaseReferenceList.value, __CatalogReleaseReferenceList.set, None, 'A Composite containing details of one or more Releases contained in the catalog that is or was transferred.')

    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_CatalogTransfer_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 246, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the CatalogTransfer applies (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory must be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_CatalogTransfer_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 251, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the CatalogTransfer does not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory must be present, but not both.')

    
    # Element TransferringFrom uses Python identifier TransferringFrom
    __TransferringFrom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TransferringFrom'), 'TransferringFrom', '__httpddex_netxmlern36_CatalogTransfer_TransferringFrom', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 259, 9), )

    
    TransferringFrom = property(__TransferringFrom.value, __TransferringFrom.set, None, 'A Composite containing details of the old RightsController.')

    
    # Element TransferringTo uses Python identifier TransferringTo
    __TransferringTo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TransferringTo'), 'TransferringTo', '__httpddex_netxmlern36_CatalogTransfer_TransferringTo', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 264, 9), )

    
    TransferringTo = property(__TransferringTo.value, __TransferringTo.set, None, 'A Composite containing details of the new RightsController.')

    _ElementMap.update({
        __CatalogTransferCompleted.name() : __CatalogTransferCompleted,
        __EffectiveTransferDate.name() : __EffectiveTransferDate,
        __CatalogReleaseReferenceList.name() : __CatalogReleaseReferenceList,
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __TransferringFrom.name() : __TransferringFrom,
        __TransferringTo.name() : __TransferringTo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CatalogTransfer', CatalogTransfer)


# Complex type {http://ddex.net/xml/ern/36}Character with content type ELEMENT_ONLY
class Character (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Character. A Character may be described through Name, Identifier and Roles."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Character')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 271, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_Character_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 277, 12), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern36_Character_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 283, 15), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A Composite containing details of the PartyName(s).')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern36_Character_ResourceContributor', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 298, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A Composite containing details of the Name, Identifier and role(s) of a Contributor.')

    
    # Attribute SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_Character_SequenceNumber', pyxb.binding.datatypes.integer)
    __SequenceNumber._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 306, 6)
    __SequenceNumber._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 306, 6)
    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the Character in a group of Characters. This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __ResourceContributor.name() : __ResourceContributor
    })
    _AttributeMap.update({
        __SequenceNumber.name() : __SequenceNumber
    })
Namespace.addCategoryObject('typeBinding', 'Character', Character)


# Complex type {http://ddex.net/xml/ern/36}Collection with content type ELEMENT_ONLY
class Collection (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Collection. Collections referenced from Video Resources are of CollectionType VideoChapter . Collections referenced from a Release composite are of CollectionType Series, Season or Episode."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Collection')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 312, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CollectionId uses Python identifier CollectionId
    __CollectionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionId'), 'CollectionId', '__httpddex_netxmlern36_Collection_CollectionId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 317, 9), )

    
    CollectionId = property(__CollectionId.value, __CollectionId.set, None, 'A Composite containing details of an Identifier of the Collection.')

    
    # Element CollectionType uses Python identifier CollectionType
    __CollectionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionType'), 'CollectionType', '__httpddex_netxmlern36_Collection_CollectionType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 322, 9), )

    
    CollectionType = property(__CollectionType.value, __CollectionType.set, None, 'A Composite containing details of the Type of the Collection.')

    
    # Element CollectionReference uses Python identifier CollectionReference
    __CollectionReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionReference'), 'CollectionReference', '__httpddex_netxmlern36_Collection_CollectionReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 330, 9), )

    
    CollectionReference = property(__CollectionReference.value, __CollectionReference.set, None, 'The Identifier (specific to the Message) of the Collection within the Release which contains it. This is a LocalCollectionAnchor starting with the letter X.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_Collection_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 340, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the Collection.')

    
    # Element Contributor uses Python identifier Contributor
    __Contributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Contributor'), 'Contributor', '__httpddex_netxmlern36_Collection_Contributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 348, 9), )

    
    Contributor = property(__Contributor.value, __Contributor.set, None, 'A Composite containing details a Contributor to the Collection.')

    
    # Element Character uses Python identifier Character
    __Character = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Character'), 'Character', '__httpddex_netxmlern36_Collection_Character', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 356, 9), )

    
    Character = property(__Character.value, __Character.set, None, 'A Composite containing details of a Character in the Collection. A Character may be described through Name, Identifier and Roles.')

    
    # Element CollectionCollectionReferenceList uses Python identifier CollectionCollectionReferenceList
    __CollectionCollectionReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReferenceList'), 'CollectionCollectionReferenceList', '__httpddex_netxmlern36_Collection_CollectionCollectionReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 364, 9), )

    
    CollectionCollectionReferenceList = property(__CollectionCollectionReferenceList.value, __CollectionCollectionReferenceList.set, None, 'A Composite containing a list of CollectionCollectionReferences for a Collection (specific to this Message).')

    
    # Element IsComplete uses Python identifier IsComplete
    __IsComplete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsComplete'), 'IsComplete', '__httpddex_netxmlern36_Collection_IsComplete', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 371, 9), )

    
    IsComplete = property(__IsComplete.value, __IsComplete.set, None, 'The Flag indicating whether the Collection is complete (=True) or not (=False). Only one of the Elements IsComplete here and in the CollectionDetailsByTerritory is valid for a given Collection.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_Collection_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 376, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The sum of the Durations of all Resources contained in the Collection (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element DurationOfMusicalContent uses Python identifier DurationOfMusicalContent
    __DurationOfMusicalContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DurationOfMusicalContent'), 'DurationOfMusicalContent', '__httpddex_netxmlern36_Collection_DurationOfMusicalContent', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 381, 9), )

    
    DurationOfMusicalContent = property(__DurationOfMusicalContent.value, __DurationOfMusicalContent.set, None, 'The Duration of the musical content (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern36_Collection_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 386, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Collection was created.')

    
    # Element OriginalReleaseDate uses Python identifier OriginalReleaseDate
    __OriginalReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate'), 'OriginalReleaseDate', '__httpddex_netxmlern36_Collection_OriginalReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 391, 9), )

    
    OriginalReleaseDate = property(__OriginalReleaseDate.value, __OriginalReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Collection was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element OriginalLanguage uses Python identifier OriginalLanguage
    __OriginalLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalLanguage'), 'OriginalLanguage', '__httpddex_netxmlern36_Collection_OriginalLanguage', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 396, 9), )

    
    OriginalLanguage = property(__OriginalLanguage.value, __OriginalLanguage.set, None, 'The orignal Language of the Collection (represented by an ISO 639-2 LanguageCode).')

    
    # Element CollectionDetailsByTerritory uses Python identifier CollectionDetailsByTerritory
    __CollectionDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionDetailsByTerritory'), 'CollectionDetailsByTerritory', '__httpddex_netxmlern36_Collection_CollectionDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 401, 9), )

    
    CollectionDetailsByTerritory = property(__CollectionDetailsByTerritory.value, __CollectionDetailsByTerritory.set, None, 'A Composite containing details of Descriptors and other attributes of the Collection which may vary according to Territory of release.')

    
    # Element CollectionResourceReferenceList uses Python identifier CollectionResourceReferenceList
    __CollectionResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionResourceReferenceList'), 'CollectionResourceReferenceList', '__httpddex_netxmlern36_Collection_CollectionResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 409, 9), )

    
    CollectionResourceReferenceList = property(__CollectionResourceReferenceList.value, __CollectionResourceReferenceList.set, None, 'A Composite containing a list of CollectionResourceReferences for a Resource (specific to this Message).')

    
    # Element CollectionWorkReferenceList uses Python identifier CollectionWorkReferenceList
    __CollectionWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionWorkReferenceList'), 'CollectionWorkReferenceList', '__httpddex_netxmlern36_Collection_CollectionWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 416, 9), )

    
    CollectionWorkReferenceList = property(__CollectionWorkReferenceList.value, __CollectionWorkReferenceList.set, None, 'A Composite containing a list of CollectionWorkReferences for a Work (specific to this Message).')

    
    # Element RepresentativeImageReference uses Python identifier RepresentativeImageReference
    __RepresentativeImageReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RepresentativeImageReference'), 'RepresentativeImageReference', '__httpddex_netxmlern36_Collection_RepresentativeImageReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 423, 9), )

    
    RepresentativeImageReference = property(__RepresentativeImageReference.value, __RepresentativeImageReference.set, None, 'A Reference for an Image (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern36_Collection_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 433, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A Composite containing details of the PLine for the Collection.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern36_Collection_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 441, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A Composite containing details of the CLine for the Collection.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Collection_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 450, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 450, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the Collection as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __CollectionId.name() : __CollectionId,
        __CollectionType.name() : __CollectionType,
        __CollectionReference.name() : __CollectionReference,
        __Title.name() : __Title,
        __Contributor.name() : __Contributor,
        __Character.name() : __Character,
        __CollectionCollectionReferenceList.name() : __CollectionCollectionReferenceList,
        __IsComplete.name() : __IsComplete,
        __Duration.name() : __Duration,
        __DurationOfMusicalContent.name() : __DurationOfMusicalContent,
        __CreationDate.name() : __CreationDate,
        __OriginalReleaseDate.name() : __OriginalReleaseDate,
        __OriginalLanguage.name() : __OriginalLanguage,
        __CollectionDetailsByTerritory.name() : __CollectionDetailsByTerritory,
        __CollectionResourceReferenceList.name() : __CollectionResourceReferenceList,
        __CollectionWorkReferenceList.name() : __CollectionWorkReferenceList,
        __RepresentativeImageReference.name() : __RepresentativeImageReference,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Collection', Collection)


# Complex type {http://ddex.net/xml/ern/36}CollectionDetailsByTerritory with content type ELEMENT_ONLY
class CollectionDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Descriptors and other attributes of a Collection which may vary according to Territory of release. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 456, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_CollectionDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 462, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the Collection details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_CollectionDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 467, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the Collection details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_CollectionDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 475, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the Collection.')

    
    # Element Contributor uses Python identifier Contributor
    __Contributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Contributor'), 'Contributor', '__httpddex_netxmlern36_CollectionDetailsByTerritory_Contributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 483, 9), )

    
    Contributor = property(__Contributor.value, __Contributor.set, None, 'A Composite containing details of a Contributor to the Collection.')

    
    # Element IsComplete uses Python identifier IsComplete
    __IsComplete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsComplete'), 'IsComplete', '__httpddex_netxmlern36_CollectionDetailsByTerritory_IsComplete', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 491, 9), )

    
    IsComplete = property(__IsComplete.value, __IsComplete.set, None, 'The Flag indicating whether the Collection is complete (=True) or not (=False). Only one of the Elements IsComplete here and in the Collection is valid for a given Collection.')

    
    # Element Character uses Python identifier Character
    __Character = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Character'), 'Character', '__httpddex_netxmlern36_CollectionDetailsByTerritory_Character', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 496, 9), )

    
    Character = property(__Character.value, __Character.set, None, 'A Composite containing details of a Character in the Collection. A Character may be described through Name, Identifier and Roles.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __Title.name() : __Title,
        __Contributor.name() : __Contributor,
        __IsComplete.name() : __IsComplete,
        __Character.name() : __Character
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionDetailsByTerritory', CollectionDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}CollectionList with content type ELEMENT_ONLY
class CollectionList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of one or more Collections."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 506, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Collection uses Python identifier Collection
    __Collection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Collection'), 'Collection', '__httpddex_netxmlern36_CollectionList_Collection', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 511, 9), )

    
    Collection = property(__Collection.value, __Collection.set, None, 'A Composite containing details of a Collection contained in a Resource.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_CollectionList_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 517, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 517, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the CollectionList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __Collection.name() : __Collection
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'CollectionList', CollectionList)


# Complex type {http://ddex.net/xml/ern/36}CollectionResourceReference with content type ELEMENT_ONLY
class CollectionResourceReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a CollectionResourceReference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionResourceReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 523, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CollectionResourceReference uses Python identifier CollectionResourceReference
    __CollectionResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference'), 'CollectionResourceReference', '__httpddex_netxmlern36_CollectionResourceReference_CollectionResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 528, 9), )

    
    CollectionResourceReference = property(__CollectionResourceReference.value, __CollectionResourceReference.set, None, 'A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_CollectionResourceReference_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 538, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the use of the Resource that is referenced in the CollectionResourceReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    _ElementMap.update({
        __CollectionResourceReference.name() : __CollectionResourceReference,
        __Duration.name() : __Duration
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionResourceReference', CollectionResourceReference)


# Complex type {http://ddex.net/xml/ern/36}CollectionResourceReferenceList with content type ELEMENT_ONLY
class CollectionResourceReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a list of CollectionResourceReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionResourceReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 545, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CollectionResourceReference uses Python identifier CollectionResourceReference
    __CollectionResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference'), 'CollectionResourceReference', '__httpddex_netxmlern36_CollectionResourceReferenceList_CollectionResourceReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 550, 9), )

    
    CollectionResourceReference = property(__CollectionResourceReference.value, __CollectionResourceReference.set, None, 'A Composite containing a CollectionResourceReference for a Collection (specific to this Message).')

    _ElementMap.update({
        __CollectionResourceReference.name() : __CollectionResourceReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionResourceReferenceList', CollectionResourceReferenceList)


# Complex type {http://ddex.net/xml/ern/36}CollectionWorkReference with content type ELEMENT_ONLY
class CollectionWorkReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a CollectionWorkReference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionWorkReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 559, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CollectionWorkReference uses Python identifier CollectionWorkReference
    __CollectionWorkReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference'), 'CollectionWorkReference', '__httpddex_netxmlern36_CollectionWorkReference_CollectionWorkReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 564, 9), )

    
    CollectionWorkReference = property(__CollectionWorkReference.value, __CollectionWorkReference.set, None, 'A Reference for a Work (specific to this Message). This is a LocalMusicalWorkAnchorReference starting with the letter W.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_CollectionWorkReference_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 574, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the use of the Work that is referenced in the CollectionWorkReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    _ElementMap.update({
        __CollectionWorkReference.name() : __CollectionWorkReference,
        __Duration.name() : __Duration
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionWorkReference', CollectionWorkReference)


# Complex type {http://ddex.net/xml/ern/36}CollectionWorkReferenceList with content type ELEMENT_ONLY
class CollectionWorkReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a list of CollectionWorkReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionWorkReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 581, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CollectionWorkReference uses Python identifier CollectionWorkReference
    __CollectionWorkReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference'), 'CollectionWorkReference', '__httpddex_netxmlern36_CollectionWorkReferenceList_CollectionWorkReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 586, 9), )

    
    CollectionWorkReference = property(__CollectionWorkReference.value, __CollectionWorkReference.set, None, 'A Composite containing a CollectionWorkReference for a Collection (specific to this Message).')

    _ElementMap.update({
        __CollectionWorkReference.name() : __CollectionWorkReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionWorkReferenceList', CollectionWorkReferenceList)


# Complex type {http://ddex.net/xml/ern/36}Condition with content type ELEMENT_ONLY
class Condition (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a condition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Condition')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 595, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Value'), 'Value', '__httpddex_netxmlern36_Condition_Value', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 600, 9), )

    
    Value = property(__Value.value, __Value.set, None, 'The numeric value of the condition.')

    
    # Element Unit uses Python identifier Unit
    __Unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Unit'), 'Unit', '__httpddex_netxmlern36_Condition_Unit', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 605, 9), )

    
    Unit = property(__Unit.value, __Unit.set, None, 'A UnitOfMeasure for the condition value.')

    
    # Element RelationalRelator uses Python identifier RelationalRelator
    __RelationalRelator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RelationalRelator'), 'RelationalRelator', '__httpddex_netxmlern36_Condition_RelationalRelator', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 610, 9), )

    
    RelationalRelator = property(__RelationalRelator.value, __RelationalRelator.set, None, 'A Relator expressing the accuracy of the condition value.')

    _ElementMap.update({
        __Value.name() : __Value,
        __Unit.name() : __Unit,
        __RelationalRelator.name() : __RelationalRelator
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Condition', Condition)


# Complex type {http://ddex.net/xml/ern/36}Cue with content type ELEMENT_ONLY
class Cue (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Cue."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Cue')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 617, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CueUseType uses Python identifier CueUseType
    __CueUseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueUseType'), 'CueUseType', '__httpddex_netxmlern36_Cue_CueUseType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 622, 9), )

    
    CueUseType = property(__CueUseType.value, __CueUseType.set, None, 'A Composite containing details of a UseType of the Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.')

    
    # Element CueThemeType uses Python identifier CueThemeType
    __CueThemeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueThemeType'), 'CueThemeType', '__httpddex_netxmlern36_Cue_CueThemeType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 627, 9), )

    
    CueThemeType = property(__CueThemeType.value, __CueThemeType.set, None, 'A Composite containing details of a ThemeType for the Creation referenced in the Cue.')

    
    # Element CueVocalType uses Python identifier CueVocalType
    __CueVocalType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueVocalType'), 'CueVocalType', '__httpddex_netxmlern36_Cue_CueVocalType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 632, 9), )

    
    CueVocalType = property(__CueVocalType.value, __CueVocalType.set, None, 'A Composite containing details of a VocalType for the Creation referenced in the Cue.')

    
    # Element IsDance uses Python identifier IsDance
    __IsDance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsDance'), 'IsDance', '__httpddex_netxmlern36_Cue_IsDance', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 637, 9), )

    
    IsDance = property(__IsDance.value, __IsDance.set, None, 'A Flag indicating whether a Creation contains dancing (=True) or not (=False).')

    
    # Element CueVisualPerceptionType uses Python identifier CueVisualPerceptionType
    __CueVisualPerceptionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueVisualPerceptionType'), 'CueVisualPerceptionType', '__httpddex_netxmlern36_Cue_CueVisualPerceptionType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 642, 9), )

    
    CueVisualPerceptionType = property(__CueVisualPerceptionType.value, __CueVisualPerceptionType.set, None, 'A Composite containing details of a VisualPerceptionType for the Creation referenced in the Cue.')

    
    # Element CueOrigin uses Python identifier CueOrigin
    __CueOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueOrigin'), 'CueOrigin', '__httpddex_netxmlern36_Cue_CueOrigin', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 649, 9), )

    
    CueOrigin = property(__CueOrigin.value, __CueOrigin.set, None, 'A Composite containing details of a CueOrigin for the Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.')

    
    # Element CueCreationReference uses Python identifier CueCreationReference
    __CueCreationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueCreationReference'), 'CueCreationReference', '__httpddex_netxmlern36_Cue_CueCreationReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 655, 12), )

    
    CueCreationReference = property(__CueCreationReference.value, __CueCreationReference.set, None, 'A Composite containing a CueCreationReference for a Creation (specific to this Message).')

    
    # Element ReferencedCreationType uses Python identifier ReferencedCreationType
    __ReferencedCreationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferencedCreationType'), 'ReferencedCreationType', '__httpddex_netxmlern36_Cue_ReferencedCreationType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 663, 15), )

    
    ReferencedCreationType = property(__ReferencedCreationType.value, __ReferencedCreationType.set, None, 'A Type of the Creation referenced in the Cue.')

    
    # Element ReferencedCreationId uses Python identifier ReferencedCreationId
    __ReferencedCreationId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferencedCreationId'), 'ReferencedCreationId', '__httpddex_netxmlern36_Cue_ReferencedCreationId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 668, 15), )

    
    ReferencedCreationId = property(__ReferencedCreationId.value, __ReferencedCreationId.set, None, 'A Composite containing details of a CreationIds.')

    
    # Element ReferencedCreationTitle uses Python identifier ReferencedCreationTitle
    __ReferencedCreationTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferencedCreationTitle'), 'ReferencedCreationTitle', '__httpddex_netxmlern36_Cue_ReferencedCreationTitle', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 673, 15), )

    
    ReferencedCreationTitle = property(__ReferencedCreationTitle.value, __ReferencedCreationTitle.set, None, 'A Composite containing details of a Title of the Creation referenced in the Cue.')

    
    # Element ReferencedCreationContributor uses Python identifier ReferencedCreationContributor
    __ReferencedCreationContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferencedCreationContributor'), 'ReferencedCreationContributor', '__httpddex_netxmlern36_Cue_ReferencedCreationContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 681, 15), )

    
    ReferencedCreationContributor = property(__ReferencedCreationContributor.value, __ReferencedCreationContributor.set, None, 'A Composite containing details a Contributor of the Creation referenced in the Cue.')

    
    # Element ReferencedCreationCharacter uses Python identifier ReferencedCreationCharacter
    __ReferencedCreationCharacter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferencedCreationCharacter'), 'ReferencedCreationCharacter', '__httpddex_netxmlern36_Cue_ReferencedCreationCharacter', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 689, 15), )

    
    ReferencedCreationCharacter = property(__ReferencedCreationCharacter.value, __ReferencedCreationCharacter.set, None, 'A Composite containing details of a Character in the Creation referenced in the Cue. A Character may be described through Name, Identifier and Roles.')

    
    # Element HasMusicalContent uses Python identifier HasMusicalContent
    __HasMusicalContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HasMusicalContent'), 'HasMusicalContent', '__httpddex_netxmlern36_Cue_HasMusicalContent', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 699, 9), )

    
    HasMusicalContent = property(__HasMusicalContent.value, __HasMusicalContent.set, None, 'A Flag indicating whether whether the Creation referenced in the Cue contains musical content such as a SoundRecording or a MusicalWork (=True) or not (=False).')

    
    # Element StartTime uses Python identifier StartTime
    __StartTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartTime'), 'StartTime', '__httpddex_netxmlern36_Cue_StartTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 704, 9), )

    
    StartTime = property(__StartTime.value, __StartTime.set, None, 'The start time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_Cue_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 709, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the use of the Creation that is referenced in the CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element EndTime uses Python identifier EndTime
    __EndTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EndTime'), 'EndTime', '__httpddex_netxmlern36_Cue_EndTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 714, 9), )

    
    EndTime = property(__EndTime.value, __EndTime.set, None, 'The end time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern36_Cue_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 719, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A Composite containing details of the PLine for the Cue.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern36_Cue_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 727, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A Composite containing details of the CLine for the Cue.')

    _ElementMap.update({
        __CueUseType.name() : __CueUseType,
        __CueThemeType.name() : __CueThemeType,
        __CueVocalType.name() : __CueVocalType,
        __IsDance.name() : __IsDance,
        __CueVisualPerceptionType.name() : __CueVisualPerceptionType,
        __CueOrigin.name() : __CueOrigin,
        __CueCreationReference.name() : __CueCreationReference,
        __ReferencedCreationType.name() : __ReferencedCreationType,
        __ReferencedCreationId.name() : __ReferencedCreationId,
        __ReferencedCreationTitle.name() : __ReferencedCreationTitle,
        __ReferencedCreationContributor.name() : __ReferencedCreationContributor,
        __ReferencedCreationCharacter.name() : __ReferencedCreationCharacter,
        __HasMusicalContent.name() : __HasMusicalContent,
        __StartTime.name() : __StartTime,
        __Duration.name() : __Duration,
        __EndTime.name() : __EndTime,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Cue', Cue)


# Complex type {http://ddex.net/xml/ern/36}CueSheet with content type ELEMENT_ONLY
class CueSheet (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CueSheet."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CueSheet')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 737, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CueSheetId uses Python identifier CueSheetId
    __CueSheetId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueSheetId'), 'CueSheetId', '__httpddex_netxmlern36_CueSheet_CueSheetId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 742, 9), )

    
    CueSheetId = property(__CueSheetId.value, __CueSheetId.set, None, 'A Composite containing details of a CueSheetId of the CueSheet.')

    
    # Element CueSheetReference uses Python identifier CueSheetReference
    __CueSheetReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueSheetReference'), 'CueSheetReference', '__httpddex_netxmlern36_CueSheet_CueSheetReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 750, 9), )

    
    CueSheetReference = property(__CueSheetReference.value, __CueSheetReference.set, None, 'The Identifier (specific to the Message) of the CueSheet within the Release which contains it. This is a LocalCueSheetAnchor starting with the letter Q.')

    
    # Element CueSheetType uses Python identifier CueSheetType
    __CueSheetType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueSheetType'), 'CueSheetType', '__httpddex_netxmlern36_CueSheet_CueSheetType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 760, 9), )

    
    CueSheetType = property(__CueSheetType.value, __CueSheetType.set, None, 'A Composite containing details of a Type of the CueSheet.')

    
    # Element Cue uses Python identifier Cue
    __Cue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Cue'), 'Cue', '__httpddex_netxmlern36_CueSheet_Cue', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 765, 9), )

    
    Cue = property(__Cue.value, __Cue.set, None, 'A Composite containing details of a Cue.')

    _ElementMap.update({
        __CueSheetId.name() : __CueSheetId,
        __CueSheetReference.name() : __CueSheetReference,
        __CueSheetType.name() : __CueSheetType,
        __Cue.name() : __Cue
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CueSheet', CueSheet)


# Complex type {http://ddex.net/xml/ern/36}CueSheetList with content type ELEMENT_ONLY
class CueSheetList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of one or more CueSheets."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CueSheetList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 772, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CueSheet uses Python identifier CueSheet
    __CueSheet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueSheet'), 'CueSheet', '__httpddex_netxmlern36_CueSheetList_CueSheet', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 777, 9), )

    
    CueSheet = property(__CueSheet.value, __CueSheet.set, None, 'A Composite containing details of a CueSheet contained in a Resource.')

    _ElementMap.update({
        __CueSheet.name() : __CueSheet
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CueSheetList', CueSheetList)


# Complex type {http://ddex.net/xml/ern/36}Deal with content type ELEMENT_ONLY
class Deal (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details (in full or in summary) of a Deal made between a DSP (as Licensee) and a Licensor of Works or Releases. When any new DealTerms are added or removed from an existing Deal (different UseTypes, Prices, Territories, DistributionChannels) then a new Deal is created, and (if appropriate) the ValidityPeriod of the existing Deal should be terminated. The only changes which should be made to the DealTerms of an existing Deal are corrections required because of an earlier error or omission, or the addition of an EndDate to the Deal's ValidityPeriod."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Deal')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 784, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DealReference uses Python identifier DealReference
    __DealReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealReference'), 'DealReference', '__httpddex_netxmlern36_Deal_DealReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 789, 9), )

    
    DealReference = property(__DealReference.value, __DealReference.set, None, 'A Composite containing a Reference to a TextDocument containing details of the Deal (in the form of an Identifier, Name or Description).')

    
    # Element DealTerms uses Python identifier DealTerms
    __DealTerms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealTerms'), 'DealTerms', '__httpddex_netxmlern36_Deal_DealTerms', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 797, 9), )

    
    DealTerms = property(__DealTerms.value, __DealTerms.set, None, 'A Composite containing details of the terms of the Deal.')

    
    # Element ResourceUsage uses Python identifier ResourceUsage
    __ResourceUsage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceUsage'), 'ResourceUsage', '__httpddex_netxmlern36_Deal_ResourceUsage', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 802, 9), )

    
    ResourceUsage = property(__ResourceUsage.value, __ResourceUsage.set, None, 'A Composite containing details of one or more Usages that govern a Resource in the Deal where the Usage of the Resource differs from the Usage of the other Resources in the same Release.')

    
    # Element DealTechnicalResourceDetailsReferenceList uses Python identifier DealTechnicalResourceDetailsReferenceList
    __DealTechnicalResourceDetailsReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReferenceList'), 'DealTechnicalResourceDetailsReferenceList', '__httpddex_netxmlern36_Deal_DealTechnicalResourceDetailsReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 807, 9), )

    
    DealTechnicalResourceDetailsReferenceList = property(__DealTechnicalResourceDetailsReferenceList.value, __DealTechnicalResourceDetailsReferenceList.set, None, 'A Composite containing a list of DealTechnicalResourceDetailsReferences for the Deal.')

    
    # Element DistributionChannelPage uses Python identifier DistributionChannelPage
    __DistributionChannelPage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DistributionChannelPage'), 'DistributionChannelPage', '__httpddex_netxmlern36_Deal_DistributionChannelPage', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 814, 9), )

    
    DistributionChannelPage = property(__DistributionChannelPage.value, __DistributionChannelPage.set, None, 'A Composite containing details of a WebPage for the DistributionChannel.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Deal_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 823, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 823, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the Deal as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __DealReference.name() : __DealReference,
        __DealTerms.name() : __DealTerms,
        __ResourceUsage.name() : __ResourceUsage,
        __DealTechnicalResourceDetailsReferenceList.name() : __DealTechnicalResourceDetailsReferenceList,
        __DistributionChannelPage.name() : __DistributionChannelPage
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Deal', Deal)


# Complex type {http://ddex.net/xml/ern/36}DealList with content type ELEMENT_ONLY
class DealList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of one or more Deals."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DealList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 829, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReleaseDeal uses Python identifier ReleaseDeal
    __ReleaseDeal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDeal'), 'ReleaseDeal', '__httpddex_netxmlern36_DealList_ReleaseDeal', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 834, 9), )

    
    ReleaseDeal = property(__ReleaseDeal.value, __ReleaseDeal.set, None, 'A Composite containing details of one or more Deals pertaining to one or more Releases.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_DealList_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 843, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 843, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the DealList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __ReleaseDeal.name() : __ReleaseDeal
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'DealList', DealList)


# Complex type {http://ddex.net/xml/ern/36}DealTechnicalResourceDetailsReferenceList with content type ELEMENT_ONLY
class DealTechnicalResourceDetailsReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a list of DealTechnicalResourceDetailsReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DealTechnicalResourceDetailsReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 849, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DealTechnicalResourceDetailsReference uses Python identifier DealTechnicalResourceDetailsReference
    __DealTechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReference'), 'DealTechnicalResourceDetailsReference', '__httpddex_netxmlern36_DealTechnicalResourceDetailsReferenceList_DealTechnicalResourceDetailsReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 854, 9), )

    
    DealTechnicalResourceDetailsReference = property(__DealTechnicalResourceDetailsReference.value, __DealTechnicalResourceDetailsReference.set, None, 'A Reference for a Composite specifying technical details of a Resource (specific to this Message). This is a LocalTechnicalResourceDetailsAnchorReference starting with the letter T.')

    _ElementMap.update({
        __DealTechnicalResourceDetailsReference.name() : __DealTechnicalResourceDetailsReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DealTechnicalResourceDetailsReferenceList', DealTechnicalResourceDetailsReferenceList)


# Complex type {http://ddex.net/xml/ern/36}DealTerms with content type ELEMENT_ONLY
class DealTerms (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of the terms of a Deal."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DealTerms')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 866, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CommercialModelType uses Python identifier CommercialModelType
    __CommercialModelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CommercialModelType'), 'CommercialModelType', '__httpddex_netxmlern36_DealTerms_CommercialModelType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 871, 9), )

    
    CommercialModelType = property(__CommercialModelType.value, __CommercialModelType.set, None, 'A Composite containing details of the fundamental business model which applies to the Deal (e.g. SubscriptionModel and PayAsYouGoModel). The CommercialModelType indicates how the Consumer pays for the Service or Release.')

    
    # Element Usage uses Python identifier Usage
    __Usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Usage'), 'Usage', '__httpddex_netxmlern36_DealTerms_Usage', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 880, 12), )

    
    Usage = property(__Usage.value, __Usage.set, None, 'A Composite containing the Types and number of Usages applicable to a Release to which the Deal applies.')

    
    # Element AllDealsCancelled uses Python identifier AllDealsCancelled
    __AllDealsCancelled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AllDealsCancelled'), 'AllDealsCancelled', '__httpddex_netxmlern36_DealTerms_AllDealsCancelled', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 885, 12), )

    
    AllDealsCancelled = property(__AllDealsCancelled.value, __AllDealsCancelled.set, None, 'The Flag indicating whether all Deals are cancelled for the given Territories (=True) or not (=False). This Flag can be used in conjunction with a StartDate of a ValidityPeriod to indicate the point in time from which all Deals are cancelled.')

    
    # Element TakeDown uses Python identifier TakeDown
    __TakeDown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TakeDown'), 'TakeDown', '__httpddex_netxmlern36_DealTerms_TakeDown', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 890, 12), )

    
    TakeDown = property(__TakeDown.value, __TakeDown.set, None, "The Flag indicating whether all Releases referred to are to be taken down by the MessageRecipient. This includes that all Deals referred to in a specific Composite are cancelled and no information about the Releases should be displayed to the end user on the DSP's website (=True) or not (=False). This Flag can be used in conjunction with a StartDate of a ValidityPeriod to indicate the point in time from which all Deals are cancelled.")

    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_DealTerms_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 897, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory in which the Deal applies (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory must be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_DealTerms_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 902, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory in which the Deal does not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory must be present, but not both.')

    
    # Element DistributionChannel uses Python identifier DistributionChannel
    __DistributionChannel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DistributionChannel'), 'DistributionChannel', '__httpddex_netxmlern36_DealTerms_DistributionChannel', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 911, 12), )

    
    DistributionChannel = property(__DistributionChannel.value, __DistributionChannel.set, None, 'A Composite containing details of the DSP through whose DistributionChannel the sales are permitted. If none are provided no limitations on the DistributionChannels are given.')

    
    # Element ExcludedDistributionChannel uses Python identifier ExcludedDistributionChannel
    __ExcludedDistributionChannel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedDistributionChannel'), 'ExcludedDistributionChannel', '__httpddex_netxmlern36_DealTerms_ExcludedDistributionChannel', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 916, 12), )

    
    ExcludedDistributionChannel = property(__ExcludedDistributionChannel.value, __ExcludedDistributionChannel.set, None, 'A Composite containing details of excluded DSP. This is used in an aggregator model where all agreed partners of the aggregators may use a ReleaseDeal, except those that are listed herein.')

    
    # Element PriceInformation uses Python identifier PriceInformation
    __PriceInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PriceInformation'), 'PriceInformation', '__httpddex_netxmlern36_DealTerms_PriceInformation', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 924, 9), )

    
    PriceInformation = property(__PriceInformation.value, __PriceInformation.set, None, 'A Composite containing details of a Price. Note that this Price applies to all UseTypes referenced in this Composite.')

    
    # Element IsPromotional uses Python identifier IsPromotional
    __IsPromotional = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPromotional'), 'IsPromotional', '__httpddex_netxmlern36_DealTerms_IsPromotional', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 933, 12), )

    
    IsPromotional = property(__IsPromotional.value, __IsPromotional.set, None, 'The Flag indicating whether a special Deal is made between the Licensor and the Licensee (=True) or not (=False) regarding the royalties or payments due to be paid for Releases distributed under this Deal.')

    
    # Element PromotionalCode uses Python identifier PromotionalCode
    __PromotionalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PromotionalCode'), 'PromotionalCode', '__httpddex_netxmlern36_DealTerms_PromotionalCode', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 938, 12), )

    
    PromotionalCode = property(__PromotionalCode.value, __PromotionalCode.set, None, 'A Composite containing details of a PromotionalCode.')

    
    # Element ValidityPeriod uses Python identifier ValidityPeriod
    __ValidityPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ValidityPeriod'), 'ValidityPeriod', '__httpddex_netxmlern36_DealTerms_ValidityPeriod', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 944, 9), )

    
    ValidityPeriod = property(__ValidityPeriod.value, __ValidityPeriod.set, None, 'A Composite containing details about a Period of Time during which the Deal is valid. No StartDate in this Composite means that the Deal is valid as per contractual relationship between MessageSender and MessageRecipient. No EndDate in this Composite means that the Deal is valid until further notice.')

    
    # Element ConsumerRentalPeriod uses Python identifier ConsumerRentalPeriod
    __ConsumerRentalPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerRentalPeriod'), 'ConsumerRentalPeriod', '__httpddex_netxmlern36_DealTerms_ConsumerRentalPeriod', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 949, 9), )

    
    ConsumerRentalPeriod = property(__ConsumerRentalPeriod.value, __ConsumerRentalPeriod.set, None, 'A Composite containing details of a Period the DSP may rent something to a Customer.')

    
    # Element PreOrderReleaseDate uses Python identifier PreOrderReleaseDate
    __PreOrderReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreOrderReleaseDate'), 'PreOrderReleaseDate', '__httpddex_netxmlern36_DealTerms_PreOrderReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 956, 9), )

    
    PreOrderReleaseDate = property(__PreOrderReleaseDate.value, __PreOrderReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the related Release is made available for pre-ordering.')

    
    # Element ReleaseDisplayStartDate uses Python identifier ReleaseDisplayStartDate
    __ReleaseDisplayStartDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDisplayStartDate'), 'ReleaseDisplayStartDate', '__httpddex_netxmlern36_DealTerms_ReleaseDisplayStartDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 963, 15), )

    
    ReleaseDisplayStartDate = property(__ReleaseDisplayStartDate.value, __ReleaseDisplayStartDate.set, None, 'A Date on which the Release is made first available for display. If other Track list, cover art and clip preview dates are not provided, then this date covers them as well (assuming clips are available). If no ReleaseDisplayStartDate is provided, the StartDate for the Deal is used instead. The ReleaseDisplayStartDate may not be later than the StartDate for the Deal. If the MessageRecipient is not able to cater for such granular display policies, the MessageRecipient may be forced to not display any Release information until a much later date.')

    
    # Element TrackListingPreviewStartDate uses Python identifier TrackListingPreviewStartDate
    __TrackListingPreviewStartDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TrackListingPreviewStartDate'), 'TrackListingPreviewStartDate', '__httpddex_netxmlern36_DealTerms_TrackListingPreviewStartDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 968, 15), )

    
    TrackListingPreviewStartDate = property(__TrackListingPreviewStartDate.value, __TrackListingPreviewStartDate.set, None, 'A Date on which the Track list is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no TrackListingPreviewStartDate is provided, the StartDate for the Deal is used instead. The TrackListingPreviewStartDate may not be later than the StartDate for the Deal.')

    
    # Element CoverArtPreviewStartDate uses Python identifier CoverArtPreviewStartDate
    __CoverArtPreviewStartDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CoverArtPreviewStartDate'), 'CoverArtPreviewStartDate', '__httpddex_netxmlern36_DealTerms_CoverArtPreviewStartDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 973, 15), )

    
    CoverArtPreviewStartDate = property(__CoverArtPreviewStartDate.value, __CoverArtPreviewStartDate.set, None, 'A Date on which the cover art is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no CoverArtPreviewStartDate is provided, the StartDate for the Deal is used instead. The CoverArtPreviewStartDate may not be later than the StartDate for the Deal.')

    
    # Element ClipPreviewStartDate uses Python identifier ClipPreviewStartDate
    __ClipPreviewStartDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ClipPreviewStartDate'), 'ClipPreviewStartDate', '__httpddex_netxmlern36_DealTerms_ClipPreviewStartDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 978, 15), )

    
    ClipPreviewStartDate = property(__ClipPreviewStartDate.value, __ClipPreviewStartDate.set, None, 'A Date on which an audio or video clip is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no ClipPreviewStartDate is provided, the StartDate for the Deal is used instead. The ClipPreviewStartDate may not be later than the StartDate for the Deal.')

    
    # Element PreOrderPreviewDate uses Python identifier PreOrderPreviewDate
    __PreOrderPreviewDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreOrderPreviewDate'), 'PreOrderPreviewDate', '__httpddex_netxmlern36_DealTerms_PreOrderPreviewDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 984, 12), )

    
    PreOrderPreviewDate = property(__PreOrderPreviewDate.value, __PreOrderPreviewDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the pre-ordered Release is made first available for previewing (it overrides the generic ReleaseDisplayStartDate if supplied). If no PreOrderPreviewDate is provided, the StartDate for the Deal is used instead. The PreOrderPreviewDate may not be later than the StartDate for the Deal. This element has been deprecated and may be deleted in a future version of this message.')

    
    # Element IsExclusive uses Python identifier IsExclusive
    __IsExclusive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsExclusive'), 'IsExclusive', '__httpddex_netxmlern36_DealTerms_IsExclusive', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 990, 9), )

    
    IsExclusive = property(__IsExclusive.value, __IsExclusive.set, None, 'The Flag indicating whether the Deal is exclusive (=True) or not (=False) to the MessageRecipient with respect to the relevant Territory(ies), Time(s) and Release(s). For other Territory(ies), or Time(s), other DSPs might be able to sell the Release(s). The exclusivity is in accordance with the agreement between the MessageSender and MessageRecipient.')

    
    # Element RelatedReleaseOfferSet uses Python identifier RelatedReleaseOfferSet
    __RelatedReleaseOfferSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RelatedReleaseOfferSet'), 'RelatedReleaseOfferSet', '__httpddex_netxmlern36_DealTerms_RelatedReleaseOfferSet', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 995, 9), )

    
    RelatedReleaseOfferSet = property(__RelatedReleaseOfferSet.value, __RelatedReleaseOfferSet.set, None, 'A Composite containing details of one or more offers related to the Release.')

    
    # Element PhysicalReturns uses Python identifier PhysicalReturns
    __PhysicalReturns = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PhysicalReturns'), 'PhysicalReturns', '__httpddex_netxmlern36_DealTerms_PhysicalReturns', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1003, 9), )

    
    PhysicalReturns = property(__PhysicalReturns.value, __PhysicalReturns.set, None, 'A Composite containing details of physical returns.')

    
    # Element NumberOfProductsPerCarton uses Python identifier NumberOfProductsPerCarton
    __NumberOfProductsPerCarton = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfProductsPerCarton'), 'NumberOfProductsPerCarton', '__httpddex_netxmlern36_DealTerms_NumberOfProductsPerCarton', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1008, 9), )

    
    NumberOfProductsPerCarton = property(__NumberOfProductsPerCarton.value, __NumberOfProductsPerCarton.set, None, 'A number of Products per carton. This is the smallest number of Products that can be ordered.')

    
    # Element RightsClaimPolicy uses Python identifier RightsClaimPolicy
    __RightsClaimPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicy'), 'RightsClaimPolicy', '__httpddex_netxmlern36_DealTerms_RightsClaimPolicy', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1013, 9), )

    
    RightsClaimPolicy = property(__RightsClaimPolicy.value, __RightsClaimPolicy.set, None, 'A Composite containing details of a rights claim policy.')

    
    # Element WebPolicy uses Python identifier WebPolicy
    __WebPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WebPolicy'), 'WebPolicy', '__httpddex_netxmlern36_DealTerms_WebPolicy', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1021, 9), )

    
    WebPolicy = property(__WebPolicy.value, __WebPolicy.set, None, 'A Composite containing details of UserGeneratedContent permissions.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_DealTerms_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1030, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1030, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the DealTerms as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __CommercialModelType.name() : __CommercialModelType,
        __Usage.name() : __Usage,
        __AllDealsCancelled.name() : __AllDealsCancelled,
        __TakeDown.name() : __TakeDown,
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __DistributionChannel.name() : __DistributionChannel,
        __ExcludedDistributionChannel.name() : __ExcludedDistributionChannel,
        __PriceInformation.name() : __PriceInformation,
        __IsPromotional.name() : __IsPromotional,
        __PromotionalCode.name() : __PromotionalCode,
        __ValidityPeriod.name() : __ValidityPeriod,
        __ConsumerRentalPeriod.name() : __ConsumerRentalPeriod,
        __PreOrderReleaseDate.name() : __PreOrderReleaseDate,
        __ReleaseDisplayStartDate.name() : __ReleaseDisplayStartDate,
        __TrackListingPreviewStartDate.name() : __TrackListingPreviewStartDate,
        __CoverArtPreviewStartDate.name() : __CoverArtPreviewStartDate,
        __ClipPreviewStartDate.name() : __ClipPreviewStartDate,
        __PreOrderPreviewDate.name() : __PreOrderPreviewDate,
        __IsExclusive.name() : __IsExclusive,
        __RelatedReleaseOfferSet.name() : __RelatedReleaseOfferSet,
        __PhysicalReturns.name() : __PhysicalReturns,
        __NumberOfProductsPerCarton.name() : __NumberOfProductsPerCarton,
        __RightsClaimPolicy.name() : __RightsClaimPolicy,
        __WebPolicy.name() : __WebPolicy
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'DealTerms', DealTerms)


# Complex type {http://ddex.net/xml/ern/36}Image with content type ELEMENT_ONLY
class Image (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an Image. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Image')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1036, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ImageType uses Python identifier ImageType
    __ImageType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageType'), 'ImageType', '__httpddex_netxmlern36_Image_ImageType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1041, 9), )

    
    ImageType = property(__ImageType.value, __ImageType.set, None, 'A Composite containing details of the Type of the Image.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern36_Image_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1046, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The Flag indicating whether the Image is related to an Artist (=True) or not (=False).')

    
    # Element ImageId uses Python identifier ImageId
    __ImageId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageId'), 'ImageId', '__httpddex_netxmlern36_Image_ImageId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1051, 9), )

    
    ImageId = property(__ImageId.value, __ImageId.set, None, 'A Composite containing details of Identifiers of the Image.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern36_Image_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1056, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The Identifier (specific to the Message) of the Image within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_Image_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1066, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the Image.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern36_Image_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1074, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Image was created.')

    
    # Element ImageDetailsByTerritory uses Python identifier ImageDetailsByTerritory
    __ImageDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageDetailsByTerritory'), 'ImageDetailsByTerritory', '__httpddex_netxmlern36_Image_ImageDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1079, 9), )

    
    ImageDetailsByTerritory = property(__ImageDetailsByTerritory.value, __ImageDetailsByTerritory.set, None, 'A Composite containing details of the Image which may vary according to Territory of release.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern36_Image_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1087, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1087, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The Flag indicating whether the Image Element was updated (=True) or not (=False). The Flag may only be used when the UpdateIndicator is set to UpdateMessage. When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided Image data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Image_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1092, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1092, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the Image as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __ImageType.name() : __ImageType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __ImageId.name() : __ImageId,
        __ResourceReference.name() : __ResourceReference,
        __Title.name() : __Title,
        __CreationDate.name() : __CreationDate,
        __ImageDetailsByTerritory.name() : __ImageDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Image', Image)


# Complex type {http://ddex.net/xml/ern/36}ImageDetailsByTerritory with content type ELEMENT_ONLY
class ImageDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Descriptors, Dates and other attributes of an Image which may vary according to Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImageDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1098, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_ImageDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1104, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the Image details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_ImageDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1109, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the Image details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern36_ImageDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1117, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A Composite containing details of a Contributor to the Image.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern36_ImageDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1125, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A Composite containing details of an indirect Contributor to the Image.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern36_ImageDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1133, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A Composite containing details of the CLine for the Image.')

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpddex_netxmlern36_ImageDetailsByTerritory_Description', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1141, 9), )

    
    Description = property(__Description.value, __Description.set, None, 'A Composite containing a Description of the subject of the Image.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern36_ImageDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1146, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured on the Image.')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern36_ImageDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1151, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Image was originally published, whether for physical or electronic/online distribution.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_ImageDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1158, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern36_ImageDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1163, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A Composite containing details of a Description of the Image containing Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern36_ImageDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1171, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A Composite containing details of a Synopsis of the Image.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern36_ImageDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1176, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A Composite containing details of a Genre to which the Image belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern36_ImageDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1184, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A Composite containing details of the classification of the Image according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element TechnicalImageDetails uses Python identifier TechnicalImageDetails
    __TechnicalImageDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalImageDetails'), 'TechnicalImageDetails', '__httpddex_netxmlern36_ImageDetailsByTerritory_TechnicalImageDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1192, 9), )

    
    TechnicalImageDetails = property(__TechnicalImageDetails.value, __TechnicalImageDetails.set, None, 'A Composite containing technical details of the Image.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_ImageDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1201, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1201, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the ImageDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __CLine.name() : __CLine,
        __Description.name() : __Description,
        __CourtesyLine.name() : __CourtesyLine,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __TechnicalImageDetails.name() : __TechnicalImageDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ImageDetailsByTerritory', ImageDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}MIDI with content type ELEMENT_ONLY
class MIDI (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a MIDI."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MIDI')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1207, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MidiType uses Python identifier MidiType
    __MidiType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MidiType'), 'MidiType', '__httpddex_netxmlern36_MIDI_MidiType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1212, 9), )

    
    MidiType = property(__MidiType.value, __MidiType.set, None, 'A Composite containing details of the Type of the MIDI.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern36_MIDI_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1217, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The Flag indicating whether the MIDI is related to an Artist (=True) or not (=False).')

    
    # Element MidiId uses Python identifier MidiId
    __MidiId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MidiId'), 'MidiId', '__httpddex_netxmlern36_MIDI_MidiId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1222, 9), )

    
    MidiId = property(__MidiId.value, __MidiId.set, None, 'A Composite containing details of Identifiers of the Midi.')

    
    # Element IndirectMidiId uses Python identifier IndirectMidiId
    __IndirectMidiId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectMidiId'), 'IndirectMidiId', '__httpddex_netxmlern36_MIDI_IndirectMidiId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1227, 9), )

    
    IndirectMidiId = property(__IndirectMidiId.value, __IndirectMidiId.set, None, 'A Composite containing details of a MusicalWorkId of a MusicalWork used in the MIDI.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern36_MIDI_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1235, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The Identifier (specific to the Message) of the MIDI within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern36_MIDI_ReferenceTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1245, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A Composite containing details of the ReferenceTitle of the MIDI.')

    
    # Element InstrumentationDescription uses Python identifier InstrumentationDescription
    __InstrumentationDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), 'InstrumentationDescription', '__httpddex_netxmlern36_MIDI_InstrumentationDescription', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1250, 9), )

    
    InstrumentationDescription = property(__InstrumentationDescription.value, __InstrumentationDescription.set, None, 'A Composite containing a Description of the Type of instrumentation of the MusicalWork(s) in the MIDI.')

    
    # Element IsMedley uses Python identifier IsMedley
    __IsMedley = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsMedley'), 'IsMedley', '__httpddex_netxmlern36_MIDI_IsMedley', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1257, 9), )

    
    IsMedley = property(__IsMedley.value, __IsMedley.set, None, 'The Flag indicating whether the MIDI is a Medley (=True) or not (=False).')

    
    # Element IsPotpourri uses Python identifier IsPotpourri
    __IsPotpourri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), 'IsPotpourri', '__httpddex_netxmlern36_MIDI_IsPotpourri', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1262, 9), )

    
    IsPotpourri = property(__IsPotpourri.value, __IsPotpourri.set, None, 'The Flag indicating whether the MIDI is a Potpourri (=True) or not (=False).')

    
    # Element IsInstrumental uses Python identifier IsInstrumental
    __IsInstrumental = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), 'IsInstrumental', '__httpddex_netxmlern36_MIDI_IsInstrumental', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1267, 9), )

    
    IsInstrumental = property(__IsInstrumental.value, __IsInstrumental.set, None, 'The Flag indicating whether the MIDI is instrumental (=True) or not (=False).')

    
    # Element IsBackground uses Python identifier IsBackground
    __IsBackground = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBackground'), 'IsBackground', '__httpddex_netxmlern36_MIDI_IsBackground', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1272, 9), )

    
    IsBackground = property(__IsBackground.value, __IsBackground.set, None, 'The Flag indicating whether the MIDI is used as background to other audio or audiovisual material (=True) or not (=False).')

    
    # Element IsHiddenResource uses Python identifier IsHiddenResource
    __IsHiddenResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), 'IsHiddenResource', '__httpddex_netxmlern36_MIDI_IsHiddenResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1277, 9), )

    
    IsHiddenResource = property(__IsHiddenResource.value, __IsHiddenResource.set, None, 'The Flag indicating whether the MIDI is hidden in some way from the Consumer (=True) or not (=False).')

    
    # Element IsBonusResource uses Python identifier IsBonusResource
    __IsBonusResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), 'IsBonusResource', '__httpddex_netxmlern36_MIDI_IsBonusResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1282, 9), )

    
    IsBonusResource = property(__IsBonusResource.value, __IsBonusResource.set, None, 'The Flag indicating whether the MIDI is additional to those on the original Release of which this is a Version (=True) or not (=False).')

    
    # Element IsComputerGenerated uses Python identifier IsComputerGenerated
    __IsComputerGenerated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated'), 'IsComputerGenerated', '__httpddex_netxmlern36_MIDI_IsComputerGenerated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1287, 9), )

    
    IsComputerGenerated = property(__IsComputerGenerated.value, __IsComputerGenerated.set, None, 'The Flag indicating whether the MIDI is generated by a computer (=True) or not (=False).')

    
    # Element NoSilenceBefore uses Python identifier NoSilenceBefore
    __NoSilenceBefore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), 'NoSilenceBefore', '__httpddex_netxmlern36_MIDI_NoSilenceBefore', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1292, 9), )

    
    NoSilenceBefore = property(__NoSilenceBefore.value, __NoSilenceBefore.set, None, 'The Flag indicating whether the MIDI is preceded by a period of silence (=False) or not (=True). ')

    
    # Element NoSilenceAfter uses Python identifier NoSilenceAfter
    __NoSilenceAfter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), 'NoSilenceAfter', '__httpddex_netxmlern36_MIDI_NoSilenceAfter', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1297, 9), )

    
    NoSilenceAfter = property(__NoSilenceAfter.value, __NoSilenceAfter.set, None, 'The Flag indicating whether the MIDI is followed by a period of silence (=False) or not (=True). ')

    
    # Element PerformerInformationRequired uses Python identifier PerformerInformationRequired
    __PerformerInformationRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), 'PerformerInformationRequired', '__httpddex_netxmlern36_MIDI_PerformerInformationRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1302, 9), )

    
    PerformerInformationRequired = property(__PerformerInformationRequired.value, __PerformerInformationRequired.set, None, 'A Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the MIDI.')

    
    # Element LanguageOfPerformance uses Python identifier LanguageOfPerformance
    __LanguageOfPerformance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), 'LanguageOfPerformance', '__httpddex_netxmlern36_MIDI_LanguageOfPerformance', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1307, 9), )

    
    LanguageOfPerformance = property(__LanguageOfPerformance.value, __LanguageOfPerformance.set, None, 'The Language of the Performance recorded in the MIDI (represented by an ISO 639-2 LanguageCode).')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_MIDI_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1314, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the MIDI (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_MIDI_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1319, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the MIDI.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern36_MIDI_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1324, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A Composite containing details of one or more MusicalWorks contained in the MIDI.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern36_MIDI_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1331, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current MIDI.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern36_MIDI_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1338, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the MIDI was created.')

    
    # Element MasteredDate uses Python identifier MasteredDate
    __MasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MasteredDate'), 'MasteredDate', '__httpddex_netxmlern36_MIDI_MasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1343, 9), )

    
    MasteredDate = property(__MasteredDate.value, __MasteredDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the MIDI was originally mastered (in either analogue or digital form).')

    
    # Element MidiDetailsByTerritory uses Python identifier MidiDetailsByTerritory
    __MidiDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MidiDetailsByTerritory'), 'MidiDetailsByTerritory', '__httpddex_netxmlern36_MIDI_MidiDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1348, 9), )

    
    MidiDetailsByTerritory = property(__MidiDetailsByTerritory.value, __MidiDetailsByTerritory.set, None, 'A Composite containing details of Descriptors and other attributes of the MIDI which may vary according to Territory of release. ')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern36_MIDI_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1356, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1356, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The Flag indicating whether the MIDI Element was updated (=True) or not (=False). The Flag may only be used when the UpdateIndicator is set to UpdateMessage. When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided MIDI data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_MIDI_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1361, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1361, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the MIDI as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __MidiType.name() : __MidiType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __MidiId.name() : __MidiId,
        __IndirectMidiId.name() : __IndirectMidiId,
        __ResourceReference.name() : __ResourceReference,
        __ReferenceTitle.name() : __ReferenceTitle,
        __InstrumentationDescription.name() : __InstrumentationDescription,
        __IsMedley.name() : __IsMedley,
        __IsPotpourri.name() : __IsPotpourri,
        __IsInstrumental.name() : __IsInstrumental,
        __IsBackground.name() : __IsBackground,
        __IsHiddenResource.name() : __IsHiddenResource,
        __IsBonusResource.name() : __IsBonusResource,
        __IsComputerGenerated.name() : __IsComputerGenerated,
        __NoSilenceBefore.name() : __NoSilenceBefore,
        __NoSilenceAfter.name() : __NoSilenceAfter,
        __PerformerInformationRequired.name() : __PerformerInformationRequired,
        __LanguageOfPerformance.name() : __LanguageOfPerformance,
        __Duration.name() : __Duration,
        __RightsAgreementId.name() : __RightsAgreementId,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __CreationDate.name() : __CreationDate,
        __MasteredDate.name() : __MasteredDate,
        __MidiDetailsByTerritory.name() : __MidiDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'MIDI', MIDI)


# Complex type {http://ddex.net/xml/ern/36}MidiDetailsByTerritory with content type ELEMENT_ONLY
class MidiDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Descriptors and other attributes of a MIDI which may vary according to Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MidiDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1367, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_MidiDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1373, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the MIDI details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_MidiDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1378, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the MIDI details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_MidiDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1386, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the MIDI.')

    
    # Element DisplayArtist uses Python identifier DisplayArtist
    __DisplayArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), 'DisplayArtist', '__httpddex_netxmlern36_MidiDetailsByTerritory_DisplayArtist', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1394, 9), )

    
    DisplayArtist = property(__DisplayArtist.value, __DisplayArtist.set, None, 'A Composite containing details of the DisplayArtist for the MIDI. The DisplayArtist may be described through Name, Identifier and Roles.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern36_MidiDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1402, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A Composite containing details of a Contributor to the MIDI.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern36_MidiDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1410, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A Composite containing details of an indirect Contributor to the MIDI.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_MidiDetailsByTerritory_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1418, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the MIDI.')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpddex_netxmlern36_MidiDetailsByTerritory_LabelName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1423, 9), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'A Composite containing the Name of the Label under which the Release is to be marketed.')

    
    # Element RightsController uses Python identifier RightsController
    __RightsController = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsController'), 'RightsController', '__httpddex_netxmlern36_MidiDetailsByTerritory_RightsController', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1431, 9), )

    
    RightsController = property(__RightsController.value, __RightsController.set, None, 'A Composite containing details of RightsController of Rights in the MIDI.')

    
    # Element RemasteredDate uses Python identifier RemasteredDate
    __RemasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), 'RemasteredDate', '__httpddex_netxmlern36_MidiDetailsByTerritory_RemasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1439, 9), )

    
    RemasteredDate = property(__RemasteredDate.value, __RemasteredDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the MIDI was re-mastered (usually digitally).')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern36_MidiDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1444, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the MIDI was originally published, whether for physical or electronic/online distribution.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern36_MidiDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1451, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A Composite containing details of the CLine for the MIDI.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern36_MidiDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1459, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for guests Artists or others featured on the MIDI.')

    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_MidiDetailsByTerritory_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1464, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the MIDI in a group of MIDIs in a Release.')

    
    # Element HostSoundCarrier uses Python identifier HostSoundCarrier
    __HostSoundCarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), 'HostSoundCarrier', '__httpddex_netxmlern36_MidiDetailsByTerritory_HostSoundCarrier', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1469, 9), )

    
    HostSoundCarrier = property(__HostSoundCarrier.value, __HostSoundCarrier.set, None, 'A Composite containing details of a HostSoundCarrier on which the MIDI appears (e.g., the CD on which it was originally released). This Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of MIDI information.')

    
    # Element MarketingComment uses Python identifier MarketingComment
    __MarketingComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MarketingComment'), 'MarketingComment', '__httpddex_netxmlern36_MidiDetailsByTerritory_MarketingComment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1477, 9), )

    
    MarketingComment = property(__MarketingComment.value, __MarketingComment.set, None, 'A Composite containing a Comment about the promotion and marketing of the MIDI.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern36_MidiDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1482, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A Composite containing details of a Genre to which the MIDI belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern36_MidiDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1490, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A Composite containing details of the classification of the MIDI according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_MidiDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1498, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern36_MidiDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1503, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A Composite containing details of a Description of the MIDI containing Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern36_MidiDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1511, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A Composite containing details of a Synopsis of the MIDI.')

    
    # Element TechnicalMidiDetails uses Python identifier TechnicalMidiDetails
    __TechnicalMidiDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalMidiDetails'), 'TechnicalMidiDetails', '__httpddex_netxmlern36_MidiDetailsByTerritory_TechnicalMidiDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1516, 9), )

    
    TechnicalMidiDetails = property(__TechnicalMidiDetails.value, __TechnicalMidiDetails.set, None, 'A Composite containing technical details of the MIDI.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_MidiDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1525, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1525, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the MidiDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __Title.name() : __Title,
        __DisplayArtist.name() : __DisplayArtist,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __RightsAgreementId.name() : __RightsAgreementId,
        __LabelName.name() : __LabelName,
        __RightsController.name() : __RightsController,
        __RemasteredDate.name() : __RemasteredDate,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __CLine.name() : __CLine,
        __CourtesyLine.name() : __CourtesyLine,
        __SequenceNumber.name() : __SequenceNumber,
        __HostSoundCarrier.name() : __HostSoundCarrier,
        __MarketingComment.name() : __MarketingComment,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __TechnicalMidiDetails.name() : __TechnicalMidiDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'MidiDetailsByTerritory', MidiDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}PhysicalReturns with content type ELEMENT_ONLY
class PhysicalReturns (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of physical returns."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PhysicalReturns')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1531, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PhysicalReturnsAllowed uses Python identifier PhysicalReturnsAllowed
    __PhysicalReturnsAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PhysicalReturnsAllowed'), 'PhysicalReturnsAllowed', '__httpddex_netxmlern36_PhysicalReturns_PhysicalReturnsAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1536, 9), )

    
    PhysicalReturnsAllowed = property(__PhysicalReturnsAllowed.value, __PhysicalReturnsAllowed.set, None, 'The Flag indicating whether physical returns are allowed (=True) or not (=False).')

    
    # Element LatestDateForPhysicalReturns uses Python identifier LatestDateForPhysicalReturns
    __LatestDateForPhysicalReturns = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LatestDateForPhysicalReturns'), 'LatestDateForPhysicalReturns', '__httpddex_netxmlern36_PhysicalReturns_LatestDateForPhysicalReturns', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1541, 9), )

    
    LatestDateForPhysicalReturns = property(__LatestDateForPhysicalReturns.value, __LatestDateForPhysicalReturns.set, None, 'A Date which is the latest one for physical returns (in ISO 8601:2004 format: YYYY-MM-DD).')

    _ElementMap.update({
        __PhysicalReturnsAllowed.name() : __PhysicalReturnsAllowed,
        __LatestDateForPhysicalReturns.name() : __LatestDateForPhysicalReturns
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PhysicalReturns', PhysicalReturns)


# Complex type {http://ddex.net/xml/ern/36}PreviewDetails with content type ELEMENT_ONLY
class PreviewDetails (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a preview."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PreviewDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1548, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartType uses Python identifier PartType
    __PartType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartType'), 'PartType', '__httpddex_netxmlern36_PreviewDetails_PartType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1553, 9), )

    
    PartType = property(__PartType.value, __PartType.set, None, 'A Composite containing a Description of the Type of Part that the preview relates to, e.g. chorus or intro.')

    
    # Element TopLeftCorner uses Python identifier TopLeftCorner
    __TopLeftCorner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TopLeftCorner'), 'TopLeftCorner', '__httpddex_netxmlern36_PreviewDetails_TopLeftCorner', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1558, 9), )

    
    TopLeftCorner = property(__TopLeftCorner.value, __TopLeftCorner.set, None, 'The position of the preview measured in Pixels or millimetres from the top left corner of the Resource.')

    
    # Element BottomRightCorner uses Python identifier BottomRightCorner
    __BottomRightCorner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BottomRightCorner'), 'BottomRightCorner', '__httpddex_netxmlern36_PreviewDetails_BottomRightCorner', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1563, 9), )

    
    BottomRightCorner = property(__BottomRightCorner.value, __BottomRightCorner.set, None, 'The position of the preview measured in Pixels or millimetres  from the bottom right corner of the Resource.')

    
    # Element ExpressionType uses Python identifier ExpressionType
    __ExpressionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExpressionType'), 'ExpressionType', '__httpddex_netxmlern36_PreviewDetails_ExpressionType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1568, 9), )

    
    ExpressionType = property(__ExpressionType.value, __ExpressionType.set, None, 'A Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview).')

    _ElementMap.update({
        __PartType.name() : __PartType,
        __TopLeftCorner.name() : __TopLeftCorner,
        __BottomRightCorner.name() : __BottomRightCorner,
        __ExpressionType.name() : __ExpressionType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PreviewDetails', PreviewDetails)


# Complex type {http://ddex.net/xml/ern/36}RelatedReleaseOfferSet with content type ELEMENT_ONLY
class RelatedReleaseOfferSet (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of one or more offers related to one or more Releases."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RelatedReleaseOfferSet')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1619, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern36_RelatedReleaseOfferSet_ReleaseId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1625, 12), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A Composite containing details of ReleaseIds of the Release(s) for which the offer(s) are available.')

    
    # Element ReleaseDescription uses Python identifier ReleaseDescription
    __ReleaseDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDescription'), 'ReleaseDescription', '__httpddex_netxmlern36_RelatedReleaseOfferSet_ReleaseDescription', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1630, 12), )

    
    ReleaseDescription = property(__ReleaseDescription.value, __ReleaseDescription.set, None, 'A Composite containing a Description of the Release(s) for which the offer(s) are available.This Element is designed to be used to describe entire collections or repertoires, and is not to be used to list individual Releases by xs:ID or Title.')

    
    # Element Deal uses Python identifier Deal
    __Deal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Deal'), 'Deal', '__httpddex_netxmlern36_RelatedReleaseOfferSet_Deal', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1636, 9), )

    
    Deal = property(__Deal.value, __Deal.set, None, 'A Composite containing details of a Deal that is available as an offer related to the Release(s). If no Deal is provided, the parent Release and the Releases listed in the RelatedReleaseOfferSet are bundled and offered under the ReleaseOffer associated with the parent Release.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_RelatedReleaseOfferSet_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1642, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1642, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the RelatedReleaseOfferSet as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __ReleaseId.name() : __ReleaseId,
        __ReleaseDescription.name() : __ReleaseDescription,
        __Deal.name() : __Deal
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'RelatedReleaseOfferSet', RelatedReleaseOfferSet)


# Complex type {http://ddex.net/xml/ern/36}Release with content type ELEMENT_ONLY
class Release (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a DDEX Release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Release')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1648, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern36_Release_ReleaseId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1653, 9), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A Composite containing details of ReleaseIds. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead.')

    
    # Element ReleaseReference uses Python identifier ReleaseReference
    __ReleaseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseReference'), 'ReleaseReference', '__httpddex_netxmlern36_Release_ReleaseReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1658, 9), )

    
    ReleaseReference = property(__ReleaseReference.value, __ReleaseReference.set, None, 'The Identifier (specific to the Message) of the Release. Used to link the Release to one or more Deal(s). This is a LocalReleaseAnchor starting with the letter R.')

    
    # Element ExternalResourceLink uses Python identifier ExternalResourceLink
    __ExternalResourceLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalResourceLink'), 'ExternalResourceLink', '__httpddex_netxmlern36_Release_ExternalResourceLink', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1668, 9), )

    
    ExternalResourceLink = property(__ExternalResourceLink.value, __ExternalResourceLink.set, None, 'A Composite containing details of promotional or other material related to the Release.')

    
    # Element SalesReportingProxyReleaseId uses Python identifier SalesReportingProxyReleaseId
    __SalesReportingProxyReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SalesReportingProxyReleaseId'), 'SalesReportingProxyReleaseId', '__httpddex_netxmlern36_Release_SalesReportingProxyReleaseId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1676, 9), )

    
    SalesReportingProxyReleaseId = property(__SalesReportingProxyReleaseId.value, __SalesReportingProxyReleaseId.set, None, 'A Composite containing details of the A Composite containing details of the SalesReportingProxyReleaseId.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern36_Release_ReferenceTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1684, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A Composite containing details of the ReferenceTitle of the Release.')

    
    # Element ReleaseResourceReferenceList uses Python identifier ReleaseResourceReferenceList
    __ReleaseResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReferenceList'), 'ReleaseResourceReferenceList', '__httpddex_netxmlern36_Release_ReleaseResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1690, 12), )

    
    ReleaseResourceReferenceList = property(__ReleaseResourceReferenceList.value, __ReleaseResourceReferenceList.set, None, 'A Composite containing details of one or more Resources contained in the Release.')

    
    # Element ResourceOmissionReason uses Python identifier ResourceOmissionReason
    __ResourceOmissionReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceOmissionReason'), 'ResourceOmissionReason', '__httpddex_netxmlern36_Release_ResourceOmissionReason', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1696, 12), )

    
    ResourceOmissionReason = property(__ResourceOmissionReason.value, __ResourceOmissionReason.set, None, 'A Composite containing details of a ResourceOmissionReason.')

    
    # Element ReleaseCollectionReferenceList uses Python identifier ReleaseCollectionReferenceList
    __ReleaseCollectionReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseCollectionReferenceList'), 'ReleaseCollectionReferenceList', '__httpddex_netxmlern36_Release_ReleaseCollectionReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1702, 9), )

    
    ReleaseCollectionReferenceList = property(__ReleaseCollectionReferenceList.value, __ReleaseCollectionReferenceList.set, None, 'A Composite containing details of one or more Collections contained in the Release.')

    
    # Element ReleaseType uses Python identifier ReleaseType
    __ReleaseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseType'), 'ReleaseType', '__httpddex_netxmlern36_Release_ReleaseType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1709, 9), )

    
    ReleaseType = property(__ReleaseType.value, __ReleaseType.set, None, 'A Composite containing details of the form in which a ReleaseCreator anticipates offering the Release to Consumers. This may be overridden by the ReleaseType for specific Territories as specified in the ReleaseDetailsByTerritory Composite.')

    
    # Element ReleaseDetailsByTerritory uses Python identifier ReleaseDetailsByTerritory
    __ReleaseDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDetailsByTerritory'), 'ReleaseDetailsByTerritory', '__httpddex_netxmlern36_Release_ReleaseDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1717, 9), )

    
    ReleaseDetailsByTerritory = property(__ReleaseDetailsByTerritory.value, __ReleaseDetailsByTerritory.set, None, 'A Composite containing details of Descriptors and other attributes of the Release which may vary according to Territory of release.')

    
    # Element LanguageOfPerformance uses Python identifier LanguageOfPerformance
    __LanguageOfPerformance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), 'LanguageOfPerformance', '__httpddex_netxmlern36_Release_LanguageOfPerformance', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1724, 9), )

    
    LanguageOfPerformance = property(__LanguageOfPerformance.value, __LanguageOfPerformance.set, None, 'The predominant original Language of the Performance recorded in the Resources (represented by an ISO 639-2 LanguageCode).')

    
    # Element LanguageOfDubbing uses Python identifier LanguageOfDubbing
    __LanguageOfDubbing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageOfDubbing'), 'LanguageOfDubbing', '__httpddex_netxmlern36_Release_LanguageOfDubbing', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1732, 9), )

    
    LanguageOfDubbing = property(__LanguageOfDubbing.value, __LanguageOfDubbing.set, None, 'The predominant Language of dubbing used in the  Resources (represented by an ISO 639-2 LanguageCode).')

    
    # Element SubTitleLanguage uses Python identifier SubTitleLanguage
    __SubTitleLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SubTitleLanguage'), 'SubTitleLanguage', '__httpddex_netxmlern36_Release_SubTitleLanguage', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1740, 9), )

    
    SubTitleLanguage = property(__SubTitleLanguage.value, __SubTitleLanguage.set, None, 'The predominant Language of SubTitles in the  Resources (represented by an ISO 639-2 LanguageCode).')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_Release_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1748, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The sum of the Durations of all Resources contained in the Release (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_Release_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1753, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern36_Release_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1758, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A Composite containing details of the PLine for the Release.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern36_Release_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1766, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A Composite containing details of the CLine for the Release.')

    
    # Element ArtistProfilePage uses Python identifier ArtistProfilePage
    __ArtistProfilePage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ArtistProfilePage'), 'ArtistProfilePage', '__httpddex_netxmlern36_Release_ArtistProfilePage', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1774, 9), )

    
    ArtistProfilePage = property(__ArtistProfilePage.value, __ArtistProfilePage.set, None, 'A Composite containing details of a WebPage for the Artist.')

    
    # Element GlobalReleaseDate uses Python identifier GlobalReleaseDate
    __GlobalReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GlobalReleaseDate'), 'GlobalReleaseDate', '__httpddex_netxmlern36_Release_GlobalReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1782, 9), )

    
    GlobalReleaseDate = property(__GlobalReleaseDate.value, __GlobalReleaseDate.set, None, 'A Composite containing details of the Date of the Event in which the Release was or will be first made globally available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element GlobalOriginalReleaseDate uses Python identifier GlobalOriginalReleaseDate
    __GlobalOriginalReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GlobalOriginalReleaseDate'), 'GlobalOriginalReleaseDate', '__httpddex_netxmlern36_Release_GlobalOriginalReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1787, 9), )

    
    GlobalOriginalReleaseDate = property(__GlobalOriginalReleaseDate.value, __GlobalOriginalReleaseDate.set, None, 'A Composite containing details of the Date of the Event in which the collection of tracks for the Release (e.g. the equivalent physical album on vinyl) was or will be first made globally available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Release_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1793, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1793, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the Release as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    
    # Attribute IsMainRelease uses Python identifier IsMainRelease
    __IsMainRelease = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsMainRelease'), 'IsMainRelease', '__httpddex_netxmlern36_Release_IsMainRelease', pyxb.binding.datatypes.boolean)
    __IsMainRelease._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1798, 6)
    __IsMainRelease._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1798, 6)
    
    IsMainRelease = property(__IsMainRelease.value, __IsMainRelease.set, None, 'The Flag indicating whether the Release is a main one as defined in the relevant Profile Standard (=True) or not (=False). This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __ReleaseId.name() : __ReleaseId,
        __ReleaseReference.name() : __ReleaseReference,
        __ExternalResourceLink.name() : __ExternalResourceLink,
        __SalesReportingProxyReleaseId.name() : __SalesReportingProxyReleaseId,
        __ReferenceTitle.name() : __ReferenceTitle,
        __ReleaseResourceReferenceList.name() : __ReleaseResourceReferenceList,
        __ResourceOmissionReason.name() : __ResourceOmissionReason,
        __ReleaseCollectionReferenceList.name() : __ReleaseCollectionReferenceList,
        __ReleaseType.name() : __ReleaseType,
        __ReleaseDetailsByTerritory.name() : __ReleaseDetailsByTerritory,
        __LanguageOfPerformance.name() : __LanguageOfPerformance,
        __LanguageOfDubbing.name() : __LanguageOfDubbing,
        __SubTitleLanguage.name() : __SubTitleLanguage,
        __Duration.name() : __Duration,
        __RightsAgreementId.name() : __RightsAgreementId,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine,
        __ArtistProfilePage.name() : __ArtistProfilePage,
        __GlobalReleaseDate.name() : __GlobalReleaseDate,
        __GlobalOriginalReleaseDate.name() : __GlobalOriginalReleaseDate
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode,
        __IsMainRelease.name() : __IsMainRelease
    })
Namespace.addCategoryObject('typeBinding', 'Release', Release)


# Complex type {http://ddex.net/xml/ern/36}ReleaseDeal with content type ELEMENT_ONLY
class ReleaseDeal (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of one or more Deals pertaining to one or more Releases."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseDeal')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1804, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DealReleaseReference uses Python identifier DealReleaseReference
    __DealReleaseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealReleaseReference'), 'DealReleaseReference', '__httpddex_netxmlern36_ReleaseDeal_DealReleaseReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1809, 9), )

    
    DealReleaseReference = property(__DealReleaseReference.value, __DealReleaseReference.set, None, 'The Identifier (specific to the Message) of a Release in the Deal. This is a LocalReleaseAnchorReference starting with the letter R.')

    
    # Element Deal uses Python identifier Deal
    __Deal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Deal'), 'Deal', '__httpddex_netxmlern36_ReleaseDeal_Deal', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1819, 9), )

    
    Deal = property(__Deal.value, __Deal.set, None, 'A Composite containing details of a Deal governing the Usage of all Releases identified in the ReleaseDeal Composite.')

    
    # Element EffectiveDate uses Python identifier EffectiveDate
    __EffectiveDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EffectiveDate'), 'EffectiveDate', '__httpddex_netxmlern36_ReleaseDeal_EffectiveDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1824, 9), )

    
    EffectiveDate = property(__EffectiveDate.value, __EffectiveDate.set, None, 'The Date at which the MessageRecipient is expected to cancel all Deals for the Release and replace them with the Deals provided within the current Message. The EffectiveDate is typically the date on which the NewReleaseMessage is being sent.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_ReleaseDeal_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1830, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1830, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the ReleaseDeal as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __DealReleaseReference.name() : __DealReleaseReference,
        __Deal.name() : __Deal,
        __EffectiveDate.name() : __EffectiveDate
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseDeal', ReleaseDeal)


# Complex type {http://ddex.net/xml/ern/36}ReleaseDetailsByTerritory with content type ELEMENT_ONLY
class ReleaseDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Descriptors and other attributes of a Release which may vary according to Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1836, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1842, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the ReleaseSummaryDetailsByTerritory apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1847, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the ReleaseSummaryDetailsByTerritory do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element DisplayArtistName uses Python identifier DisplayArtistName
    __DisplayArtistName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtistName'), 'DisplayArtistName', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_DisplayArtistName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1855, 9), )

    
    DisplayArtistName = property(__DisplayArtistName.value, __DisplayArtistName.set, None, 'A Composite containing the Name to be used by a DSP when presenting Artist details of the Release to a Consumer.')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_LabelName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1863, 9), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'A Composite containing the Name of the Label for the Release.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1871, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1876, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the Release.')

    
    # Element DisplayArtist uses Python identifier DisplayArtist
    __DisplayArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), 'DisplayArtist', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_DisplayArtist', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1884, 9), )

    
    DisplayArtist = property(__DisplayArtist.value, __DisplayArtist.set, None, 'A Composite containing details of the DisplayArtist for the Release. The DisplayArtist may be described through Name, Identifier and Roles.')

    
    # Element IsMultiArtistCompilation uses Python identifier IsMultiArtistCompilation
    __IsMultiArtistCompilation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsMultiArtistCompilation'), 'IsMultiArtistCompilation', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_IsMultiArtistCompilation', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1892, 9), )

    
    IsMultiArtistCompilation = property(__IsMultiArtistCompilation.value, __IsMultiArtistCompilation.set, None, 'The Flag indicating whether the Release is a multiartist compilation (=True) or not (=False).')

    
    # Element AdministratingRecordCompany uses Python identifier AdministratingRecordCompany
    __AdministratingRecordCompany = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdministratingRecordCompany'), 'AdministratingRecordCompany', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_AdministratingRecordCompany', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1897, 9), )

    
    AdministratingRecordCompany = property(__AdministratingRecordCompany.value, __AdministratingRecordCompany.set, None, 'A Composite containing details of the AdministratingRecordCompany for the Release. ')

    
    # Element ReleaseType uses Python identifier ReleaseType
    __ReleaseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseType'), 'ReleaseType', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_ReleaseType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1905, 9), )

    
    ReleaseType = property(__ReleaseType.value, __ReleaseType.set, None, 'A Composite containing details of the form in which a ReleaseCreator anticipates offering the Release to Consumers. This overrides the ReleaseType specified globally for the Release.')

    
    # Element RelatedRelease uses Python identifier RelatedRelease
    __RelatedRelease = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RelatedRelease'), 'RelatedRelease', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_RelatedRelease', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1913, 9), )

    
    RelatedRelease = property(__RelatedRelease.value, __RelatedRelease.set, None, 'A Composite containing details of a Release (or a PhysicalProduct or a DigitalProduct derived from such a Release) which is related to this Release.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1921, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A Composite containing details of the classification of the Release according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element AvRating uses Python identifier AvRating
    __AvRating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AvRating'), 'AvRating', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_AvRating', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1929, 9), )

    
    AvRating = property(__AvRating.value, __AvRating.set, None, 'A Composite containing details of a rating for the Release.')

    
    # Element MarketingComment uses Python identifier MarketingComment
    __MarketingComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MarketingComment'), 'MarketingComment', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_MarketingComment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1937, 9), )

    
    MarketingComment = property(__MarketingComment.value, __MarketingComment.set, None, 'A Composite containing a Comment about the promotion and marketing of the Release.')

    
    # Element ResourceGroup uses Python identifier ResourceGroup
    __ResourceGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroup'), 'ResourceGroup', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_ResourceGroup', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1942, 9), )

    
    ResourceGroup = property(__ResourceGroup.value, __ResourceGroup.set, None, 'A Composite containing details of a group of some or all of the Resources in the Release. ResourceGroups are used to signal groupings or sequences of Resources within a Release. Examples include individual carriers in a multi-carrier Release or classical Work groupings as well as the default order of Resources within a Release.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1950, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A Composite containing details of a Genre to which the Release belongs.')

    
    # Element ReleaseDate uses Python identifier ReleaseDate
    __ReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDate'), 'ReleaseDate', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_ReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1958, 9), )

    
    ReleaseDate = property(__ReleaseDate.value, __ReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Release was or will be first made available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element OriginalReleaseDate uses Python identifier OriginalReleaseDate
    __OriginalReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate'), 'OriginalReleaseDate', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_OriginalReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1963, 9), )

    
    OriginalReleaseDate = property(__OriginalReleaseDate.value, __OriginalReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the collection of tracks for the Release (e.g. the equivalent physical album on vinyl) was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element OriginalDigitalReleaseDate uses Python identifier OriginalDigitalReleaseDate
    __OriginalDigitalReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalDigitalReleaseDate'), 'OriginalDigitalReleaseDate', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_OriginalDigitalReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1968, 9), )

    
    OriginalDigitalReleaseDate = property(__OriginalDigitalReleaseDate.value, __OriginalDigitalReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Release was or will be first made available in electronic/online format for Usage (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1976, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A Composite containing a Description providing details of how a DSP can obtain any related Release File.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1983, 12), )

    
    File = property(__File.value, __File.set, None, 'A Composite containing details of a related Release File that a DSP can obtain.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1989, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A Composite containing details of a Description of the Release containing Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1997, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A Composite containing details of a Synopsis of the Release.')

    
    # Element Character uses Python identifier Character
    __Character = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Character'), 'Character', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_Character', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2002, 9), )

    
    Character = property(__Character.value, __Character.set, None, 'A Composite containing details of a Character in the Release. A Character may be described through Name, Identifier and Roles.')

    
    # Element NumberOfUnitsPerPhysicalRelease uses Python identifier NumberOfUnitsPerPhysicalRelease
    __NumberOfUnitsPerPhysicalRelease = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfUnitsPerPhysicalRelease'), 'NumberOfUnitsPerPhysicalRelease', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_NumberOfUnitsPerPhysicalRelease', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2010, 9), )

    
    NumberOfUnitsPerPhysicalRelease = property(__NumberOfUnitsPerPhysicalRelease.value, __NumberOfUnitsPerPhysicalRelease.set, None, 'A number of units (typically a CD or a DVD) contained in a physical Release. This Element is for boxed sets.')

    
    # Element DisplayConductor uses Python identifier DisplayConductor
    __DisplayConductor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), 'DisplayConductor', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_DisplayConductor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2017, 9), )

    
    DisplayConductor = property(__DisplayConductor.value, __DisplayConductor.set, None, 'A Composite containing details of a DisplayConductor for the Release. A DisplayConductor may be described through Name, Identifier and Roles.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_ReleaseDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2026, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2026, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the ReleaseSummaryDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __DisplayArtistName.name() : __DisplayArtistName,
        __LabelName.name() : __LabelName,
        __RightsAgreementId.name() : __RightsAgreementId,
        __Title.name() : __Title,
        __DisplayArtist.name() : __DisplayArtist,
        __IsMultiArtistCompilation.name() : __IsMultiArtistCompilation,
        __AdministratingRecordCompany.name() : __AdministratingRecordCompany,
        __ReleaseType.name() : __ReleaseType,
        __RelatedRelease.name() : __RelatedRelease,
        __ParentalWarningType.name() : __ParentalWarningType,
        __AvRating.name() : __AvRating,
        __MarketingComment.name() : __MarketingComment,
        __ResourceGroup.name() : __ResourceGroup,
        __Genre.name() : __Genre,
        __ReleaseDate.name() : __ReleaseDate,
        __OriginalReleaseDate.name() : __OriginalReleaseDate,
        __OriginalDigitalReleaseDate.name() : __OriginalDigitalReleaseDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __Character.name() : __Character,
        __NumberOfUnitsPerPhysicalRelease.name() : __NumberOfUnitsPerPhysicalRelease,
        __DisplayConductor.name() : __DisplayConductor
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseDetailsByTerritory', ReleaseDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}ReleaseList with content type ELEMENT_ONLY
class ReleaseList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of one or more Releases."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2032, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Release uses Python identifier Release
    __Release = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Release'), 'Release', '__httpddex_netxmlern36_ReleaseList_Release', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2037, 9), )

    
    Release = property(__Release.value, __Release.set, None, 'A Composite containing details of a DDEX Release.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_ReleaseList_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2046, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2046, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the ReleaseList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __Release.name() : __Release
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseList', ReleaseList)


# Complex type {http://ddex.net/xml/ern/36}ResourceContributor with content type ELEMENT_ONLY
class ResourceContributor (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of the Name, Identifier and role(s) of a Contributor to a Resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceContributor')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2052, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_ResourceContributor_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2058, 12), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern36_ResourceContributor_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2064, 15), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A Composite containing details of the PartyName(s).')

    
    # Element ResourceContributorRole uses Python identifier ResourceContributorRole
    __ResourceContributorRole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributorRole'), 'ResourceContributorRole', '__httpddex_netxmlern36_ResourceContributor_ResourceContributorRole', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2079, 9), )

    
    ResourceContributorRole = property(__ResourceContributorRole.value, __ResourceContributorRole.set, None, 'A Composite containing details of a role played by the Contributor.')

    
    # Element IsFeaturedArtist uses Python identifier IsFeaturedArtist
    __IsFeaturedArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsFeaturedArtist'), 'IsFeaturedArtist', '__httpddex_netxmlern36_ResourceContributor_IsFeaturedArtist', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2087, 9), )

    
    IsFeaturedArtist = property(__IsFeaturedArtist.value, __IsFeaturedArtist.set, None, 'A Flag indicating whether the Contributor is a featured Artist (=True) or not (=False).')

    
    # Element IsContractedArtist uses Python identifier IsContractedArtist
    __IsContractedArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsContractedArtist'), 'IsContractedArtist', '__httpddex_netxmlern36_ResourceContributor_IsContractedArtist', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2092, 9), )

    
    IsContractedArtist = property(__IsContractedArtist.value, __IsContractedArtist.set, None, 'A Flag indicating whether the Contributor is an Artist that has a contract for its part in creating the Resource (=True) or not (=False).')

    
    # Element TerritoryOfPerformance uses Python identifier TerritoryOfPerformance
    __TerritoryOfPerformance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryOfPerformance'), 'TerritoryOfPerformance', '__httpddex_netxmlern36_ResourceContributor_TerritoryOfPerformance', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2097, 9), )

    
    TerritoryOfPerformance = property(__TerritoryOfPerformance.value, __TerritoryOfPerformance.set, None, 'A country of performance (represented by an ISO 3166-1 TerritoryCode).')

    
    # Element InstrumentType uses Python identifier InstrumentType
    __InstrumentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'InstrumentType'), 'InstrumentType', '__httpddex_netxmlern36_ResourceContributor_InstrumentType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2105, 9), )

    
    InstrumentType = property(__InstrumentType.value, __InstrumentType.set, None, 'A Type of musical instrument played by the Artist.')

    
    # Element ArtistDelegatedUsageRights uses Python identifier ArtistDelegatedUsageRights
    __ArtistDelegatedUsageRights = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ArtistDelegatedUsageRights'), 'ArtistDelegatedUsageRights', '__httpddex_netxmlern36_ResourceContributor_ArtistDelegatedUsageRights', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2113, 9), )

    
    ArtistDelegatedUsageRights = property(__ArtistDelegatedUsageRights.value, __ArtistDelegatedUsageRights.set, None, 'A Composite containing details of the kinds of usage for which rights have been delegated by the Artist.')

    
    # Element Sex uses Python identifier Sex
    __Sex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Sex'), 'Sex', '__httpddex_netxmlern36_ResourceContributor_Sex', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2120, 9), )

    
    Sex = property(__Sex.value, __Sex.set, None, 'Sex')

    
    # Element DateAndPlaceOfBirth uses Python identifier DateAndPlaceOfBirth
    __DateAndPlaceOfBirth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfBirth'), 'DateAndPlaceOfBirth', '__httpddex_netxmlern36_ResourceContributor_DateAndPlaceOfBirth', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2125, 9), )

    
    DateAndPlaceOfBirth = property(__DateAndPlaceOfBirth.value, __DateAndPlaceOfBirth.set, None, 'A Composite containing details of the Date and Place of birth.')

    
    # Element DateAndPlaceOfDeath uses Python identifier DateAndPlaceOfDeath
    __DateAndPlaceOfDeath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfDeath'), 'DateAndPlaceOfDeath', '__httpddex_netxmlern36_ResourceContributor_DateAndPlaceOfDeath', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2130, 9), )

    
    DateAndPlaceOfDeath = property(__DateAndPlaceOfDeath.value, __DateAndPlaceOfDeath.set, None, 'A Composite containing details of the Date and Place of death.')

    
    # Element PrimaryRole uses Python identifier PrimaryRole
    __PrimaryRole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PrimaryRole'), 'PrimaryRole', '__httpddex_netxmlern36_ResourceContributor_PrimaryRole', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2135, 9), )

    
    PrimaryRole = property(__PrimaryRole.value, __PrimaryRole.set, None, 'A Composite containing details of the primary role played by the Artist in relation to other Artists.')

    
    # Element PrimaryInstrumentType uses Python identifier PrimaryInstrumentType
    __PrimaryInstrumentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PrimaryInstrumentType'), 'PrimaryInstrumentType', '__httpddex_netxmlern36_ResourceContributor_PrimaryInstrumentType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2140, 9), )

    
    PrimaryInstrumentType = property(__PrimaryInstrumentType.value, __PrimaryInstrumentType.set, None, 'A Type of (musical) instrument primarily played by the Artist.')

    
    # Element GoverningAgreementType uses Python identifier GoverningAgreementType
    __GoverningAgreementType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GoverningAgreementType'), 'GoverningAgreementType', '__httpddex_netxmlern36_ResourceContributor_GoverningAgreementType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2145, 9), )

    
    GoverningAgreementType = property(__GoverningAgreementType.value, __GoverningAgreementType.set, None, "A Composite containing details of a Type of an agreement that covers the Artist's participation in making a SoundRecording.")

    
    # Element ContactInformation uses Python identifier ContactInformation
    __ContactInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContactInformation'), 'ContactInformation', '__httpddex_netxmlern36_ResourceContributor_ContactInformation', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2152, 9), )

    
    ContactInformation = property(__ContactInformation.value, __ContactInformation.set, None, 'A Composite containing details of contact Identifiers of the Artist.')

    
    # Element TerritoryOfResidency uses Python identifier TerritoryOfResidency
    __TerritoryOfResidency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryOfResidency'), 'TerritoryOfResidency', '__httpddex_netxmlern36_ResourceContributor_TerritoryOfResidency', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2157, 9), )

    
    TerritoryOfResidency = property(__TerritoryOfResidency.value, __TerritoryOfResidency.set, None, 'The country of main residency of the Artist (represented by an ISO 3166-1 TerritoryCode).')

    
    # Element AdditionalRoles uses Python identifier AdditionalRoles
    __AdditionalRoles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdditionalRoles'), 'AdditionalRoles', '__httpddex_netxmlern36_ResourceContributor_AdditionalRoles', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2162, 9), )

    
    AdditionalRoles = property(__AdditionalRoles.value, __AdditionalRoles.set, None, 'A Composite containing details of the additional roles played by the Artist.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern36_ResourceContributor_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2170, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A Composite containing details of a typical or main Genre relating to the Artist.')

    
    # Element Membership uses Python identifier Membership
    __Membership = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Membership'), 'Membership', '__httpddex_netxmlern36_ResourceContributor_Membership', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2178, 9), )

    
    Membership = property(__Membership.value, __Membership.set, None, 'A Composite containing details of a membership in a collective rights management organization.')

    
    # Attribute SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_ResourceContributor_SequenceNumber', pyxb.binding.datatypes.integer)
    __SequenceNumber._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2187, 6)
    __SequenceNumber._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2187, 6)
    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the ResourceContributor in a group of ResourceContributors that have contributed to a Resource. This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __ResourceContributorRole.name() : __ResourceContributorRole,
        __IsFeaturedArtist.name() : __IsFeaturedArtist,
        __IsContractedArtist.name() : __IsContractedArtist,
        __TerritoryOfPerformance.name() : __TerritoryOfPerformance,
        __InstrumentType.name() : __InstrumentType,
        __ArtistDelegatedUsageRights.name() : __ArtistDelegatedUsageRights,
        __Sex.name() : __Sex,
        __DateAndPlaceOfBirth.name() : __DateAndPlaceOfBirth,
        __DateAndPlaceOfDeath.name() : __DateAndPlaceOfDeath,
        __PrimaryRole.name() : __PrimaryRole,
        __PrimaryInstrumentType.name() : __PrimaryInstrumentType,
        __GoverningAgreementType.name() : __GoverningAgreementType,
        __ContactInformation.name() : __ContactInformation,
        __TerritoryOfResidency.name() : __TerritoryOfResidency,
        __AdditionalRoles.name() : __AdditionalRoles,
        __Genre.name() : __Genre,
        __Membership.name() : __Membership
    })
    _AttributeMap.update({
        __SequenceNumber.name() : __SequenceNumber
    })
Namespace.addCategoryObject('typeBinding', 'ResourceContributor', ResourceContributor)


# Complex type {http://ddex.net/xml/ern/36}ResourceGroup with content type ELEMENT_ONLY
class ResourceGroup (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ResourceGroup. ResourceGroups are used to signal groupings or sequences of Resources within a Release. Examples include individual carriers in a multi-carrier Release or classical Work groupings as well as the default order of Resources within a Release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceGroup')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2193, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_ResourceGroup_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2198, 9), )

    
    Title = property(__Title.value, __Title.set, None, "A Composite containing details of a Title of the ResourceGroup. Typically this will apply to 'sub' ResourceGroups within a hierarchy, e.g., different Albums in a Set.")

    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_ResourceGroup_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2206, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the ResourceGroup within all ResourceGroups at this level. The default value is 1, and the value must be incremented by 1 for each ResourceGroup occurring at a particular level. The SequenceNumber is unique within its ResourceGroupLevelNumber.')

    
    # Element DisplayArtist uses Python identifier DisplayArtist
    __DisplayArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), 'DisplayArtist', '__httpddex_netxmlern36_ResourceGroup_DisplayArtist', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2211, 9), )

    
    DisplayArtist = property(__DisplayArtist.value, __DisplayArtist.set, None, 'A Composite containing details of the DisplayArtist for the ResourceGroup. The DisplayArtist may be described through Name, Identifier and Roles.')

    
    # Element DisplayConductor uses Python identifier DisplayConductor
    __DisplayConductor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), 'DisplayConductor', '__httpddex_netxmlern36_ResourceGroup_DisplayConductor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2219, 9), )

    
    DisplayConductor = property(__DisplayConductor.value, __DisplayConductor.set, None, 'A Composite containing details of a DisplayConductor for the ResourceGroup. A DisplayConductor may be described through Name, Identifier and Roles.')

    
    # Element DisplayComposer uses Python identifier DisplayComposer
    __DisplayComposer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayComposer'), 'DisplayComposer', '__httpddex_netxmlern36_ResourceGroup_DisplayComposer', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2227, 9), )

    
    DisplayComposer = property(__DisplayComposer.value, __DisplayComposer.set, None, 'A Composite containing details of a DisplayComposer for the ResourceGroup. A DisplayComposer may be described through Name, Identifier and Roles.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern36_ResourceGroup_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2235, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A Composite containing details of a Contributor to this ResourceGroup. This includes roles such as the compiler of the ResourceGroup, and may summarize details of Contributors to individual SoundRecordings or other content.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern36_ResourceGroup_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2243, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A Composite containing details of an indirect Contributor to this ResourceGroup.')

    
    # Element CarrierType uses Python identifier CarrierType
    __CarrierType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CarrierType'), 'CarrierType', '__httpddex_netxmlern36_ResourceGroup_CarrierType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2251, 9), )

    
    CarrierType = property(__CarrierType.value, __CarrierType.set, None, 'A Composite containing details of a Carrier.')

    
    # Element ResourceGroup uses Python identifier ResourceGroup
    __ResourceGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroup'), 'ResourceGroup', '__httpddex_netxmlern36_ResourceGroup_ResourceGroup', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2259, 9), )

    
    ResourceGroup = property(__ResourceGroup.value, __ResourceGroup.set, None, 'A ResourceGroup contained within this ResourceGroup. ResourceGroups are used to signal groupings or sequences of Resources within a Release. Examples include individual carriers in a multi-carrier Release or classical Work groupings as well as the default order of Resources within a Release.')

    
    # Element ResourceGroupContentItem uses Python identifier ResourceGroupContentItem
    __ResourceGroupContentItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroupContentItem'), 'ResourceGroupContentItem', '__httpddex_netxmlern36_ResourceGroup_ResourceGroupContentItem', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2268, 12), )

    
    ResourceGroupContentItem = property(__ResourceGroupContentItem.value, __ResourceGroupContentItem.set, None, 'A Composite containing details of a Resource contained in the ResourceGroup.')

    
    # Element ResourceGroupResourceReferenceList uses Python identifier ResourceGroupResourceReferenceList
    __ResourceGroupResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroupResourceReferenceList'), 'ResourceGroupResourceReferenceList', '__httpddex_netxmlern36_ResourceGroup_ResourceGroupResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2276, 12), )

    
    ResourceGroupResourceReferenceList = property(__ResourceGroupResourceReferenceList.value, __ResourceGroupResourceReferenceList.set, None, 'A Composite containing details of a Resource contained in the ResourceGroup.')

    
    # Element ResourceGroupReleaseReference uses Python identifier ResourceGroupReleaseReference
    __ResourceGroupReleaseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroupReleaseReference'), 'ResourceGroupReleaseReference', '__httpddex_netxmlern36_ResourceGroup_ResourceGroupReleaseReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2285, 12), )

    
    ResourceGroupReleaseReference = property(__ResourceGroupReleaseReference.value, __ResourceGroupReleaseReference.set, None, 'The Identifier (specific to the Message) of a Release which has the same content as the ResourceGroup. This is a LocalReleaseAnchorReference starting with the letter R.')

    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern36_ResourceGroup_ReleaseId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2295, 12), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A Composite containing details of ReleaseIds of a Release which has the same content as the ResourceGroup. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_ResourceGroup_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2302, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2302, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the ResourceGroup as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __Title.name() : __Title,
        __SequenceNumber.name() : __SequenceNumber,
        __DisplayArtist.name() : __DisplayArtist,
        __DisplayConductor.name() : __DisplayConductor,
        __DisplayComposer.name() : __DisplayComposer,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __CarrierType.name() : __CarrierType,
        __ResourceGroup.name() : __ResourceGroup,
        __ResourceGroupContentItem.name() : __ResourceGroupContentItem,
        __ResourceGroupResourceReferenceList.name() : __ResourceGroupResourceReferenceList,
        __ResourceGroupReleaseReference.name() : __ResourceGroupReleaseReference,
        __ReleaseId.name() : __ReleaseId
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ResourceGroup', ResourceGroup)


# Complex type {http://ddex.net/xml/ern/36}ResourceList with content type ELEMENT_ONLY
class ResourceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of one or more Resources. ResourceList provides a simple means of aggregating Resources without any explicit sequencing or grouping: if that is needed it is provided by the ResourceGroup Composite. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2308, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SoundRecording uses Python identifier SoundRecording
    __SoundRecording = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecording'), 'SoundRecording', '__httpddex_netxmlern36_ResourceList_SoundRecording', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2313, 9), )

    
    SoundRecording = property(__SoundRecording.value, __SoundRecording.set, None, 'A Composite containing details of a SoundRecording.')

    
    # Element MIDI uses Python identifier MIDI
    __MIDI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MIDI'), 'MIDI', '__httpddex_netxmlern36_ResourceList_MIDI', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2321, 9), )

    
    MIDI = property(__MIDI.value, __MIDI.set, None, 'A Composite containing details of a MIDI.')

    
    # Element Video uses Python identifier Video
    __Video = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Video'), 'Video', '__httpddex_netxmlern36_ResourceList_Video', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2326, 9), )

    
    Video = property(__Video.value, __Video.set, None, 'A Composite containing details of a Video.')

    
    # Element Image uses Python identifier Image
    __Image = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Image'), 'Image', '__httpddex_netxmlern36_ResourceList_Image', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2334, 9), )

    
    Image = property(__Image.value, __Image.set, None, 'A Composite containing details of an Image.')

    
    # Element Text uses Python identifier Text
    __Text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Text'), 'Text', '__httpddex_netxmlern36_ResourceList_Text', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2342, 9), )

    
    Text = property(__Text.value, __Text.set, None, 'A Composite containing details of a Text.')

    
    # Element SheetMusic uses Python identifier SheetMusic
    __SheetMusic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SheetMusic'), 'SheetMusic', '__httpddex_netxmlern36_ResourceList_SheetMusic', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2347, 9), )

    
    SheetMusic = property(__SheetMusic.value, __SheetMusic.set, None, 'A Composite containing details of a Text.')

    
    # Element Software uses Python identifier Software
    __Software = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Software'), 'Software', '__httpddex_netxmlern36_ResourceList_Software', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2355, 9), )

    
    Software = property(__Software.value, __Software.set, None, 'A Composite containing details of an item of Software.')

    
    # Element UserDefinedResource uses Python identifier UserDefinedResource
    __UserDefinedResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedResource'), 'UserDefinedResource', '__httpddex_netxmlern36_ResourceList_UserDefinedResource', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2363, 9), )

    
    UserDefinedResource = property(__UserDefinedResource.value, __UserDefinedResource.set, None, 'A Composite containing details of a UserDefinedResource.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_ResourceList_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2372, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2372, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the ResourceList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __SoundRecording.name() : __SoundRecording,
        __MIDI.name() : __MIDI,
        __Video.name() : __Video,
        __Image.name() : __Image,
        __Text.name() : __Text,
        __SheetMusic.name() : __SheetMusic,
        __Software.name() : __Software,
        __UserDefinedResource.name() : __UserDefinedResource
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ResourceList', ResourceList)


# Complex type {http://ddex.net/xml/ern/36}ResourceUsage with content type ELEMENT_ONLY
class ResourceUsage (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of one or more Usages that govern a Resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceUsage')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2378, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DealResourceReference uses Python identifier DealResourceReference
    __DealResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealResourceReference'), 'DealResourceReference', '__httpddex_netxmlern36_ResourceUsage_DealResourceReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2383, 9), )

    
    DealResourceReference = property(__DealResourceReference.value, __DealResourceReference.set, None, 'A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.')

    
    # Element Usage uses Python identifier Usage
    __Usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Usage'), 'Usage', '__httpddex_netxmlern36_ResourceUsage_Usage', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2393, 9), )

    
    Usage = property(__Usage.value, __Usage.set, None, 'A Composite containing the Types and number of Usages applicable to the Resource.')

    _ElementMap.update({
        __DealResourceReference.name() : __DealResourceReference,
        __Usage.name() : __Usage
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ResourceUsage', ResourceUsage)


# Complex type {http://ddex.net/xml/ern/36}RightsClaimPolicy with content type ELEMENT_ONLY
class RightsClaimPolicy (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a rights claim policy."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RightsClaimPolicy')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2400, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Condition uses Python identifier Condition
    __Condition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Condition'), 'Condition', '__httpddex_netxmlern36_RightsClaimPolicy_Condition', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2405, 9), )

    
    Condition = property(__Condition.value, __Condition.set, None, 'A Composite containing details of conditions.')

    
    # Element RightsClaimPolicyType uses Python identifier RightsClaimPolicyType
    __RightsClaimPolicyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicyType'), 'RightsClaimPolicyType', '__httpddex_netxmlern36_RightsClaimPolicy_RightsClaimPolicyType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2410, 9), )

    
    RightsClaimPolicyType = property(__RightsClaimPolicyType.value, __RightsClaimPolicyType.set, None, 'A Type of rights claim policy.')

    _ElementMap.update({
        __Condition.name() : __Condition,
        __RightsClaimPolicyType.name() : __RightsClaimPolicyType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RightsClaimPolicy', RightsClaimPolicy)


# Complex type {http://ddex.net/xml/ern/36}SheetMusic with content type ELEMENT_ONLY
class SheetMusic (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a SheetMusic."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SheetMusic')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2417, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SheetMusicType uses Python identifier SheetMusicType
    __SheetMusicType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SheetMusicType'), 'SheetMusicType', '__httpddex_netxmlern36_SheetMusic_SheetMusicType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2422, 9), )

    
    SheetMusicType = property(__SheetMusicType.value, __SheetMusicType.set, None, 'A Composite containing details of the Type of the SheetMusic.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern36_SheetMusic_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2427, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The Flag indicating whether the SheetMusic is related to an Artist (=True) or not (=False).')

    
    # Element SheetMusicId uses Python identifier SheetMusicId
    __SheetMusicId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SheetMusicId'), 'SheetMusicId', '__httpddex_netxmlern36_SheetMusic_SheetMusicId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2432, 9), )

    
    SheetMusicId = property(__SheetMusicId.value, __SheetMusicId.set, None, 'A Composite containing details of Identifiers of the SheetMusic.')

    
    # Element IndirectSheetMusicId uses Python identifier IndirectSheetMusicId
    __IndirectSheetMusicId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectSheetMusicId'), 'IndirectSheetMusicId', '__httpddex_netxmlern36_SheetMusic_IndirectSheetMusicId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2437, 9), )

    
    IndirectSheetMusicId = property(__IndirectSheetMusicId.value, __IndirectSheetMusicId.set, None, 'A Composite containing details of a MusicalWorkId of a MusicalWork used in the SheetMusic.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern36_SheetMusic_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2445, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The Identifier (specific to the Message) of the SheetMusic within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.')

    
    # Element LanguageOfLyrics uses Python identifier LanguageOfLyrics
    __LanguageOfLyrics = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageOfLyrics'), 'LanguageOfLyrics', '__httpddex_netxmlern36_SheetMusic_LanguageOfLyrics', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2455, 9), )

    
    LanguageOfLyrics = property(__LanguageOfLyrics.value, __LanguageOfLyrics.set, None, 'The Language of the lyrics of the SheetMusic (represented by an ISO 639-2 LanguageCode).')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_SheetMusic_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2460, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) related to the SheetMusic.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern36_SheetMusic_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2465, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A Composite containing details of one or more MusicalWorks contained in the SheetMusic.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern36_SheetMusic_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2472, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current SheetMusic.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern36_SheetMusic_ReferenceTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2479, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A Composite containing details of the ReferenceTitle of the SheetMusic.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern36_SheetMusic_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2484, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the SheetMusic was created.')

    
    # Element SheetMusicDetailsByTerritory uses Python identifier SheetMusicDetailsByTerritory
    __SheetMusicDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SheetMusicDetailsByTerritory'), 'SheetMusicDetailsByTerritory', '__httpddex_netxmlern36_SheetMusic_SheetMusicDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2489, 9), )

    
    SheetMusicDetailsByTerritory = property(__SheetMusicDetailsByTerritory.value, __SheetMusicDetailsByTerritory.set, None, 'A Composite containing details of the SheetMusic which may vary according to Territory of release.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern36_SheetMusic_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2497, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2497, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The Flag indicating whether the SheetMusic Element was updated (=True) or not (=False). The Flag may only be used when the UpdateIndicator is set to UpdateMessage. When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided SheetMusic data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_SheetMusic_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2502, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2502, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the SheetMusic as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __SheetMusicType.name() : __SheetMusicType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __SheetMusicId.name() : __SheetMusicId,
        __IndirectSheetMusicId.name() : __IndirectSheetMusicId,
        __ResourceReference.name() : __ResourceReference,
        __LanguageOfLyrics.name() : __LanguageOfLyrics,
        __RightsAgreementId.name() : __RightsAgreementId,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __ReferenceTitle.name() : __ReferenceTitle,
        __CreationDate.name() : __CreationDate,
        __SheetMusicDetailsByTerritory.name() : __SheetMusicDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'SheetMusic', SheetMusic)


# Complex type {http://ddex.net/xml/ern/36}SheetMusicDetailsByTerritory with content type ELEMENT_ONLY
class SheetMusicDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Descriptors, Dates and other attributes of a SheetMusic which may vary according to Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SheetMusicDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2508, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2514, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the SheetMusic details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2519, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the SheetMusic details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2527, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the SheetMusic.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2535, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A Composite containing details of a Contributor to the SheetMusic.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2543, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A Composite containing details of an indirect Contributor to the SheetMusic.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2551, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A Composite containing details of the CLine for the SheetMusic.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2559, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured in the SheetMusic.')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2564, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the SheetMusic was originally published, whether for physical or electronic/online distribution.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2571, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2576, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A Composite containing details of a Genre to which the SheetMusic belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2584, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A Composite containing details of the classification of the SheetMusic according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element TechnicalSheetMusicDetails uses Python identifier TechnicalSheetMusicDetails
    __TechnicalSheetMusicDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalSheetMusicDetails'), 'TechnicalSheetMusicDetails', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_TechnicalSheetMusicDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2592, 9), )

    
    TechnicalSheetMusicDetails = property(__TechnicalSheetMusicDetails.value, __TechnicalSheetMusicDetails.set, None, 'A Composite containing technical details of the SheetMusic.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_SheetMusicDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2601, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2601, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the SheetMusicDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __Title.name() : __Title,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __CLine.name() : __CLine,
        __CourtesyLine.name() : __CourtesyLine,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __TechnicalSheetMusicDetails.name() : __TechnicalSheetMusicDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'SheetMusicDetailsByTerritory', SheetMusicDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}Software with content type ELEMENT_ONLY
class Software (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an item of Software."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Software')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2607, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SoftwareType uses Python identifier SoftwareType
    __SoftwareType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoftwareType'), 'SoftwareType', '__httpddex_netxmlern36_Software_SoftwareType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2612, 9), )

    
    SoftwareType = property(__SoftwareType.value, __SoftwareType.set, None, 'A Composite containing details of the Type of the Software.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern36_Software_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2617, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The Flag indicating whether the Software is related to an Artist (=True) or not (=False).')

    
    # Element SoftwareId uses Python identifier SoftwareId
    __SoftwareId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoftwareId'), 'SoftwareId', '__httpddex_netxmlern36_Software_SoftwareId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2622, 9), )

    
    SoftwareId = property(__SoftwareId.value, __SoftwareId.set, None, 'A Composite containing details of Identifiers of the Software.')

    
    # Element IndirectSoftwareId uses Python identifier IndirectSoftwareId
    __IndirectSoftwareId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectSoftwareId'), 'IndirectSoftwareId', '__httpddex_netxmlern36_Software_IndirectSoftwareId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2627, 9), )

    
    IndirectSoftwareId = property(__IndirectSoftwareId.value, __IndirectSoftwareId.set, None, 'A Composite containing details of a MusicalWorkId of a MusicalWork used in the Software.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern36_Software_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2635, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The Identifier (specific to the Message) of the Software within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern36_Software_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2645, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A Composite containing details of one or more MusicalWorks contained in the Software.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern36_Software_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2652, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current Software.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_Software_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2659, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the Software.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern36_Software_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2667, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Software was created.')

    
    # Element SoftwareDetailsByTerritory uses Python identifier SoftwareDetailsByTerritory
    __SoftwareDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoftwareDetailsByTerritory'), 'SoftwareDetailsByTerritory', '__httpddex_netxmlern36_Software_SoftwareDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2672, 9), )

    
    SoftwareDetailsByTerritory = property(__SoftwareDetailsByTerritory.value, __SoftwareDetailsByTerritory.set, None, 'A Composite containing details of the Software which may vary according to Territory of release.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern36_Software_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2680, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2680, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The Flag indicating whether the Software Element was updated (=True) or not (=False). The Flag may only be used when the UpdateIndicator is set to UpdateMessage. When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided Software data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Software_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2685, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2685, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the Software as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __SoftwareType.name() : __SoftwareType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __SoftwareId.name() : __SoftwareId,
        __IndirectSoftwareId.name() : __IndirectSoftwareId,
        __ResourceReference.name() : __ResourceReference,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __Title.name() : __Title,
        __CreationDate.name() : __CreationDate,
        __SoftwareDetailsByTerritory.name() : __SoftwareDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Software', Software)


# Complex type {http://ddex.net/xml/ern/36}SoftwareDetailsByTerritory with content type ELEMENT_ONLY
class SoftwareDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Descriptors, Dates and other attributes of a Software application which may vary according to Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoftwareDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2691, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2697, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the Software details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2702, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the Software details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2710, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A Composite containing details of a Contributor to the Software.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2718, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A Composite containing details of an indirect Contributor to the Software.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2726, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A Composite containing details of the PLine for the Software.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2734, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A Composite containing details of the CLine for the Software.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2742, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured in the Software.')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2747, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Software was originally published, whether for physical or electronic/online distribution.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2754, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2759, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A Composite containing details of a Description of the Software containing Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2767, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A Composite containing details of a Synopsis of the Software.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2772, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A Composite containing details of a Genre to which the Software belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2780, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A Composite containing details of the classification of the Software according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element TechnicalSoftwareDetails uses Python identifier TechnicalSoftwareDetails
    __TechnicalSoftwareDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalSoftwareDetails'), 'TechnicalSoftwareDetails', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_TechnicalSoftwareDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2788, 9), )

    
    TechnicalSoftwareDetails = property(__TechnicalSoftwareDetails.value, __TechnicalSoftwareDetails.set, None, 'A Composite containing technical details of the Software.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_SoftwareDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2797, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2797, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the SoftwareDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine,
        __CourtesyLine.name() : __CourtesyLine,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __TechnicalSoftwareDetails.name() : __TechnicalSoftwareDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'SoftwareDetailsByTerritory', SoftwareDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}SoundRecording with content type ELEMENT_ONLY
class SoundRecording (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a SoundRecording."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoundRecording')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2803, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SoundRecordingType uses Python identifier SoundRecordingType
    __SoundRecordingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecordingType'), 'SoundRecordingType', '__httpddex_netxmlern36_SoundRecording_SoundRecordingType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2808, 9), )

    
    SoundRecordingType = property(__SoundRecordingType.value, __SoundRecordingType.set, None, 'A Composite containing details of the Type of the SoundRecording.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern36_SoundRecording_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2815, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The Flag indicating whether the SoundRecording is related to an Artist (=True) or not (=False).')

    
    # Element SoundRecordingId uses Python identifier SoundRecordingId
    __SoundRecordingId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecordingId'), 'SoundRecordingId', '__httpddex_netxmlern36_SoundRecording_SoundRecordingId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2820, 9), )

    
    SoundRecordingId = property(__SoundRecordingId.value, __SoundRecordingId.set, None, 'A Composite containing details of a SoundRecordingId.')

    
    # Element IndirectSoundRecordingId uses Python identifier IndirectSoundRecordingId
    __IndirectSoundRecordingId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectSoundRecordingId'), 'IndirectSoundRecordingId', '__httpddex_netxmlern36_SoundRecording_IndirectSoundRecordingId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2827, 9), )

    
    IndirectSoundRecordingId = property(__IndirectSoundRecordingId.value, __IndirectSoundRecordingId.set, None, 'A Composite containing details of a MusicalWorkId of a MusicalWork used in the SoundRecording.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern36_SoundRecording_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2835, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The Identifier (specific to the Message) of the SoundRecording within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern36_SoundRecording_ReferenceTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2845, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A Composite containing details of the ReferenceTitle of the SoundRecording.')

    
    # Element InstrumentationDescription uses Python identifier InstrumentationDescription
    __InstrumentationDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), 'InstrumentationDescription', '__httpddex_netxmlern36_SoundRecording_InstrumentationDescription', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2850, 9), )

    
    InstrumentationDescription = property(__InstrumentationDescription.value, __InstrumentationDescription.set, None, 'A Composite containing a Description of the Type of instrumentation of the MusicalWork(s) in the SoundRecording.')

    
    # Element IsMedley uses Python identifier IsMedley
    __IsMedley = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsMedley'), 'IsMedley', '__httpddex_netxmlern36_SoundRecording_IsMedley', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2857, 9), )

    
    IsMedley = property(__IsMedley.value, __IsMedley.set, None, 'The Flag indicating whether the SoundRecording is a Medley (=True) or not (=False).')

    
    # Element IsPotpourri uses Python identifier IsPotpourri
    __IsPotpourri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), 'IsPotpourri', '__httpddex_netxmlern36_SoundRecording_IsPotpourri', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2862, 9), )

    
    IsPotpourri = property(__IsPotpourri.value, __IsPotpourri.set, None, 'The Flag indicating whether the SoundRecording is a Potpourri (=True) or not (=False).')

    
    # Element IsInstrumental uses Python identifier IsInstrumental
    __IsInstrumental = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), 'IsInstrumental', '__httpddex_netxmlern36_SoundRecording_IsInstrumental', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2867, 9), )

    
    IsInstrumental = property(__IsInstrumental.value, __IsInstrumental.set, None, 'The Flag indicating whether the SoundRecording is instrumental (=True) or not (=False).')

    
    # Element IsBackground uses Python identifier IsBackground
    __IsBackground = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBackground'), 'IsBackground', '__httpddex_netxmlern36_SoundRecording_IsBackground', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2872, 9), )

    
    IsBackground = property(__IsBackground.value, __IsBackground.set, None, 'The Flag indicating whether the SoundRecording is used as background to other audio or audiovisual material (=True) or not (=False).')

    
    # Element IsHiddenResource uses Python identifier IsHiddenResource
    __IsHiddenResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), 'IsHiddenResource', '__httpddex_netxmlern36_SoundRecording_IsHiddenResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2877, 9), )

    
    IsHiddenResource = property(__IsHiddenResource.value, __IsHiddenResource.set, None, 'The Flag indicating whether the SoundRecording is hidden in some way from the Consumer (=True) or not (=False).')

    
    # Element IsBonusResource uses Python identifier IsBonusResource
    __IsBonusResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), 'IsBonusResource', '__httpddex_netxmlern36_SoundRecording_IsBonusResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2882, 9), )

    
    IsBonusResource = property(__IsBonusResource.value, __IsBonusResource.set, None, 'The Flag indicating whether the SoundRecording is additional to those on the original Release of which this is a Version (=True) or not (=False).')

    
    # Element HasPreOrderFulfillment uses Python identifier HasPreOrderFulfillment
    __HasPreOrderFulfillment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HasPreOrderFulfillment'), 'HasPreOrderFulfillment', '__httpddex_netxmlern36_SoundRecording_HasPreOrderFulfillment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2887, 9), )

    
    HasPreOrderFulfillment = property(__HasPreOrderFulfillment.value, __HasPreOrderFulfillment.set, None, 'A Flag indicating whether a DSP shall (=True) or shall not (=False) make the SoundRecording available during the pre-oder period. If the Flag is not set or set to false, the SoundRecording shall not be made available.')

    
    # Element IsComputerGenerated uses Python identifier IsComputerGenerated
    __IsComputerGenerated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated'), 'IsComputerGenerated', '__httpddex_netxmlern36_SoundRecording_IsComputerGenerated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2892, 9), )

    
    IsComputerGenerated = property(__IsComputerGenerated.value, __IsComputerGenerated.set, None, 'The Flag indicating whether the SoundRecording is generated by a computer (=True) or not (=False).')

    
    # Element IsRemastered uses Python identifier IsRemastered
    __IsRemastered = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsRemastered'), 'IsRemastered', '__httpddex_netxmlern36_SoundRecording_IsRemastered', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2897, 9), )

    
    IsRemastered = property(__IsRemastered.value, __IsRemastered.set, None, 'The Flag indicating whether the SoundRecording is remastered (=True) or not (=False).')

    
    # Element NoSilenceBefore uses Python identifier NoSilenceBefore
    __NoSilenceBefore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), 'NoSilenceBefore', '__httpddex_netxmlern36_SoundRecording_NoSilenceBefore', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2902, 9), )

    
    NoSilenceBefore = property(__NoSilenceBefore.value, __NoSilenceBefore.set, None, 'The Flag indicating whether the SoundRecording is preceded by a period of silence (=False) or not (=True). ')

    
    # Element NoSilenceAfter uses Python identifier NoSilenceAfter
    __NoSilenceAfter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), 'NoSilenceAfter', '__httpddex_netxmlern36_SoundRecording_NoSilenceAfter', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2907, 9), )

    
    NoSilenceAfter = property(__NoSilenceAfter.value, __NoSilenceAfter.set, None, 'The Flag indicating whether the SoundRecording is followed by a period of silence (=False) or not (=True). ')

    
    # Element PerformerInformationRequired uses Python identifier PerformerInformationRequired
    __PerformerInformationRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), 'PerformerInformationRequired', '__httpddex_netxmlern36_SoundRecording_PerformerInformationRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2912, 9), )

    
    PerformerInformationRequired = property(__PerformerInformationRequired.value, __PerformerInformationRequired.set, None, 'A Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the SoundRecording.')

    
    # Element LanguageOfPerformance uses Python identifier LanguageOfPerformance
    __LanguageOfPerformance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), 'LanguageOfPerformance', '__httpddex_netxmlern36_SoundRecording_LanguageOfPerformance', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2917, 9), )

    
    LanguageOfPerformance = property(__LanguageOfPerformance.value, __LanguageOfPerformance.set, None, 'The Language of the Performance recorded in the SoundRecording (represented by an ISO 639-2 LanguageCode).')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_SoundRecording_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2924, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the SoundRecording (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_SoundRecording_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2929, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the SoundRecording.')

    
    # Element SoundRecordingCollectionReferenceList uses Python identifier SoundRecordingCollectionReferenceList
    __SoundRecordingCollectionReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReferenceList'), 'SoundRecordingCollectionReferenceList', '__httpddex_netxmlern36_SoundRecording_SoundRecordingCollectionReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2934, 9), )

    
    SoundRecordingCollectionReferenceList = property(__SoundRecordingCollectionReferenceList.value, __SoundRecordingCollectionReferenceList.set, None, 'A Composite containing details of one or more Collections. The referenced Collection has to be of CollectionType AudioChapter.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern36_SoundRecording_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2941, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A Composite containing details of one or more MusicalWorks contained in the SoundRecording.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern36_SoundRecording_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2948, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current SoundRecording.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern36_SoundRecording_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2955, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the SoundRecording was created.')

    
    # Element MasteredDate uses Python identifier MasteredDate
    __MasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MasteredDate'), 'MasteredDate', '__httpddex_netxmlern36_SoundRecording_MasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2960, 9), )

    
    MasteredDate = property(__MasteredDate.value, __MasteredDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the SoundRecording was originally mastered (in either analogue or digital form).')

    
    # Element SoundRecordingDetailsByTerritory uses Python identifier SoundRecordingDetailsByTerritory
    __SoundRecordingDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecordingDetailsByTerritory'), 'SoundRecordingDetailsByTerritory', '__httpddex_netxmlern36_SoundRecording_SoundRecordingDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2965, 9), )

    
    SoundRecordingDetailsByTerritory = property(__SoundRecordingDetailsByTerritory.value, __SoundRecordingDetailsByTerritory.set, None, 'A Composite containing details of Descriptors and other attributes of the SoundRecording which may vary according to Territory.')

    
    # Element TerritoryOfCommissioning uses Python identifier TerritoryOfCommissioning
    __TerritoryOfCommissioning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning'), 'TerritoryOfCommissioning', '__httpddex_netxmlern36_SoundRecording_TerritoryOfCommissioning', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2972, 9), )

    
    TerritoryOfCommissioning = property(__TerritoryOfCommissioning.value, __TerritoryOfCommissioning.set, None, 'The country of commissioning (represented by an ISO 3166-1 TerritoryCode).')

    
    # Element NumberOfFeaturedArtists uses Python identifier NumberOfFeaturedArtists
    __NumberOfFeaturedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists'), 'NumberOfFeaturedArtists', '__httpddex_netxmlern36_SoundRecording_NumberOfFeaturedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2979, 9), )

    
    NumberOfFeaturedArtists = property(__NumberOfFeaturedArtists.value, __NumberOfFeaturedArtists.set, None, 'The number of FeaturedArtists associated with the SoundRecording.')

    
    # Element NumberOfNonFeaturedArtists uses Python identifier NumberOfNonFeaturedArtists
    __NumberOfNonFeaturedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists'), 'NumberOfNonFeaturedArtists', '__httpddex_netxmlern36_SoundRecording_NumberOfNonFeaturedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2984, 9), )

    
    NumberOfNonFeaturedArtists = property(__NumberOfNonFeaturedArtists.value, __NumberOfNonFeaturedArtists.set, None, 'The number of NonFeaturedArtists associated with the SoundRecording.')

    
    # Element NumberOfContractedArtists uses Python identifier NumberOfContractedArtists
    __NumberOfContractedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists'), 'NumberOfContractedArtists', '__httpddex_netxmlern36_SoundRecording_NumberOfContractedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2989, 9), )

    
    NumberOfContractedArtists = property(__NumberOfContractedArtists.value, __NumberOfContractedArtists.set, None, 'The number of ContractedArtists associated with the SoundRecording.')

    
    # Element NumberOfNonContractedArtists uses Python identifier NumberOfNonContractedArtists
    __NumberOfNonContractedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists'), 'NumberOfNonContractedArtists', '__httpddex_netxmlern36_SoundRecording_NumberOfNonContractedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2994, 9), )

    
    NumberOfNonContractedArtists = property(__NumberOfNonContractedArtists.value, __NumberOfNonContractedArtists.set, None, 'The number of NonContractedArtists associated with the SoundRecording.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern36_SoundRecording_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3000, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3000, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The Flag indicating whether the SoundRecording Element was updated (=True) or not (=False). The Flag may only be used when the UpdateIndicator is set to UpdateMessage. When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided SoundRecording data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_SoundRecording_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3005, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3005, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the SoundRecording as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __SoundRecordingType.name() : __SoundRecordingType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __SoundRecordingId.name() : __SoundRecordingId,
        __IndirectSoundRecordingId.name() : __IndirectSoundRecordingId,
        __ResourceReference.name() : __ResourceReference,
        __ReferenceTitle.name() : __ReferenceTitle,
        __InstrumentationDescription.name() : __InstrumentationDescription,
        __IsMedley.name() : __IsMedley,
        __IsPotpourri.name() : __IsPotpourri,
        __IsInstrumental.name() : __IsInstrumental,
        __IsBackground.name() : __IsBackground,
        __IsHiddenResource.name() : __IsHiddenResource,
        __IsBonusResource.name() : __IsBonusResource,
        __HasPreOrderFulfillment.name() : __HasPreOrderFulfillment,
        __IsComputerGenerated.name() : __IsComputerGenerated,
        __IsRemastered.name() : __IsRemastered,
        __NoSilenceBefore.name() : __NoSilenceBefore,
        __NoSilenceAfter.name() : __NoSilenceAfter,
        __PerformerInformationRequired.name() : __PerformerInformationRequired,
        __LanguageOfPerformance.name() : __LanguageOfPerformance,
        __Duration.name() : __Duration,
        __RightsAgreementId.name() : __RightsAgreementId,
        __SoundRecordingCollectionReferenceList.name() : __SoundRecordingCollectionReferenceList,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __CreationDate.name() : __CreationDate,
        __MasteredDate.name() : __MasteredDate,
        __SoundRecordingDetailsByTerritory.name() : __SoundRecordingDetailsByTerritory,
        __TerritoryOfCommissioning.name() : __TerritoryOfCommissioning,
        __NumberOfFeaturedArtists.name() : __NumberOfFeaturedArtists,
        __NumberOfNonFeaturedArtists.name() : __NumberOfNonFeaturedArtists,
        __NumberOfContractedArtists.name() : __NumberOfContractedArtists,
        __NumberOfNonContractedArtists.name() : __NumberOfNonContractedArtists
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'SoundRecording', SoundRecording)


# Complex type {http://ddex.net/xml/ern/36}SoundRecordingDetailsByTerritory with content type ELEMENT_ONLY
class SoundRecordingDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Descriptors and other attributes of a SoundRecording which may vary according to Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoundRecordingDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3011, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3017, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the SoundRecording details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3022, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the SoundRecording details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3030, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the SoundRecording.')

    
    # Element DisplayArtist uses Python identifier DisplayArtist
    __DisplayArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), 'DisplayArtist', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_DisplayArtist', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3038, 9), )

    
    DisplayArtist = property(__DisplayArtist.value, __DisplayArtist.set, None, 'A Composite containing details of the DisplayArtist for the SoundRecording. The DisplayArtist may be described through Name, Identifier and Roles.')

    
    # Element DisplayConductor uses Python identifier DisplayConductor
    __DisplayConductor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), 'DisplayConductor', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_DisplayConductor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3046, 9), )

    
    DisplayConductor = property(__DisplayConductor.value, __DisplayConductor.set, None, 'A Composite containing details of a DisplayConductor for the SoundRecording. A DisplayConductor may be described through Name, Identifier and Roles.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3054, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A Composite containing details of a Contributor to the SoundRecording.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3062, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A Composite containing details of an indirect Contributor to the SoundRecording.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3070, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the SoundRecording.')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_LabelName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3075, 9), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'A Composite containing the Name of the Label under which the Release is to be marketed.')

    
    # Element RightsController uses Python identifier RightsController
    __RightsController = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsController'), 'RightsController', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_RightsController', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3083, 9), )

    
    RightsController = property(__RightsController.value, __RightsController.set, None, 'A Composite containing details of RightsController of Rights in the SoundRecording.')

    
    # Element RemasteredDate uses Python identifier RemasteredDate
    __RemasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), 'RemasteredDate', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_RemasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3091, 9), )

    
    RemasteredDate = property(__RemasteredDate.value, __RemasteredDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the SoundRecording was re-mastered (usually digitally).')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3096, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the SoundRecording was originally published, whether for physical or electronic/online distribution.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3103, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A Composite containing details of the PLine for the SoundRecording.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3111, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for guests Artists or others featured on the SoundRecording.')

    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3116, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the SoundRecording in a group of SoundRecordings in a Release.')

    
    # Element HostSoundCarrier uses Python identifier HostSoundCarrier
    __HostSoundCarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), 'HostSoundCarrier', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_HostSoundCarrier', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3121, 9), )

    
    HostSoundCarrier = property(__HostSoundCarrier.value, __HostSoundCarrier.set, None, 'A Composite containing details of a HostSoundCarrier on which the SoundRecording appears (e.g., the CD on which it was originally released). This Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of SoundRecording information.')

    
    # Element MarketingComment uses Python identifier MarketingComment
    __MarketingComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MarketingComment'), 'MarketingComment', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_MarketingComment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3129, 9), )

    
    MarketingComment = property(__MarketingComment.value, __MarketingComment.set, None, 'A Composite containing a Comment about the promotion and marketing of the SoundRecording.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3134, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A Composite containing details of a Genre to which the SoundRecording belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3142, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A Composite containing details of the classification of the SoundRecording according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element AvRating uses Python identifier AvRating
    __AvRating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AvRating'), 'AvRating', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_AvRating', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3150, 9), )

    
    AvRating = property(__AvRating.value, __AvRating.set, None, 'A Composite containing details of a rating for the SoundRecording.')

    
    # Element TechnicalSoundRecordingDetails uses Python identifier TechnicalSoundRecordingDetails
    __TechnicalSoundRecordingDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalSoundRecordingDetails'), 'TechnicalSoundRecordingDetails', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_TechnicalSoundRecordingDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3158, 9), )

    
    TechnicalSoundRecordingDetails = property(__TechnicalSoundRecordingDetails.value, __TechnicalSoundRecordingDetails.set, None, 'A Composite containing technical details of the SoundRecording.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3166, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3171, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A Composite containing details of a Description of the SoundRecording containing Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3179, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A Composite containing details of a Synopsis of the SoundRecording.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_SoundRecordingDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3185, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3185, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the SoundRecordingDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __Title.name() : __Title,
        __DisplayArtist.name() : __DisplayArtist,
        __DisplayConductor.name() : __DisplayConductor,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __RightsAgreementId.name() : __RightsAgreementId,
        __LabelName.name() : __LabelName,
        __RightsController.name() : __RightsController,
        __RemasteredDate.name() : __RemasteredDate,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __PLine.name() : __PLine,
        __CourtesyLine.name() : __CourtesyLine,
        __SequenceNumber.name() : __SequenceNumber,
        __HostSoundCarrier.name() : __HostSoundCarrier,
        __MarketingComment.name() : __MarketingComment,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __AvRating.name() : __AvRating,
        __TechnicalSoundRecordingDetails.name() : __TechnicalSoundRecordingDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'SoundRecordingDetailsByTerritory', SoundRecordingDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}SoundRecordingPreviewDetails with content type ELEMENT_ONLY
class SoundRecordingPreviewDetails (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a preview."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoundRecordingPreviewDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3191, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartType uses Python identifier PartType
    __PartType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartType'), 'PartType', '__httpddex_netxmlern36_SoundRecordingPreviewDetails_PartType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3196, 9), )

    
    PartType = property(__PartType.value, __PartType.set, None, 'A Composite containing a Description of the Type of Part that the preview relates to, e.g. chorus or intro.')

    
    # Element StartPoint uses Python identifier StartPoint
    __StartPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartPoint'), 'StartPoint', '__httpddex_netxmlern36_SoundRecordingPreviewDetails_StartPoint', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3201, 9), )

    
    StartPoint = property(__StartPoint.value, __StartPoint.set, None, 'The start point of the preview given in seconds from the start of the Resource.')

    
    # Element EndPoint uses Python identifier EndPoint
    __EndPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EndPoint'), 'EndPoint', '__httpddex_netxmlern36_SoundRecordingPreviewDetails_EndPoint', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3206, 9), )

    
    EndPoint = property(__EndPoint.value, __EndPoint.set, None, 'The end point of the preview given in seconds from the start of the Resource.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_SoundRecordingPreviewDetails_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3211, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the preview, measured from the StartPoint.')

    
    # Element TopLeftCorner uses Python identifier TopLeftCorner
    __TopLeftCorner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TopLeftCorner'), 'TopLeftCorner', '__httpddex_netxmlern36_SoundRecordingPreviewDetails_TopLeftCorner', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3216, 9), )

    
    TopLeftCorner = property(__TopLeftCorner.value, __TopLeftCorner.set, None, 'The position of the preview measured in Pixels or millimetres from the top left corner of the Resource.')

    
    # Element BottomRightCorner uses Python identifier BottomRightCorner
    __BottomRightCorner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BottomRightCorner'), 'BottomRightCorner', '__httpddex_netxmlern36_SoundRecordingPreviewDetails_BottomRightCorner', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3221, 9), )

    
    BottomRightCorner = property(__BottomRightCorner.value, __BottomRightCorner.set, None, 'The position of the preview measured in Pixels or millimetres  from the bottom right corner of the Resource.')

    
    # Element ExpressionType uses Python identifier ExpressionType
    __ExpressionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExpressionType'), 'ExpressionType', '__httpddex_netxmlern36_SoundRecordingPreviewDetails_ExpressionType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3226, 9), )

    
    ExpressionType = property(__ExpressionType.value, __ExpressionType.set, None, 'A Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview).')

    _ElementMap.update({
        __PartType.name() : __PartType,
        __StartPoint.name() : __StartPoint,
        __EndPoint.name() : __EndPoint,
        __Duration.name() : __Duration,
        __TopLeftCorner.name() : __TopLeftCorner,
        __BottomRightCorner.name() : __BottomRightCorner,
        __ExpressionType.name() : __ExpressionType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SoundRecordingPreviewDetails', SoundRecordingPreviewDetails)


# Complex type {http://ddex.net/xml/ern/36}TechnicalImageDetails with content type ELEMENT_ONLY
class TechnicalImageDetails (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing technical details of a Image."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalImageDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3233, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern36_TechnicalImageDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3238, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The Identifier (specific to the Message) of the TechnicalImageDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern36_TechnicalImageDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3248, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A Composite containing details of a Type of DrmPlatform.')

    
    # Element ContainerFormat uses Python identifier ContainerFormat
    __ContainerFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), 'ContainerFormat', '__httpddex_netxmlern36_TechnicalImageDetails_ContainerFormat', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3253, 9), )

    
    ContainerFormat = property(__ContainerFormat.value, __ContainerFormat.set, None, 'A Composite containing details of a ContainerFormat.')

    
    # Element ImageCodecType uses Python identifier ImageCodecType
    __ImageCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageCodecType'), 'ImageCodecType', '__httpddex_netxmlern36_TechnicalImageDetails_ImageCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3258, 9), )

    
    ImageCodecType = property(__ImageCodecType.value, __ImageCodecType.set, None, 'A Composite containing details of a Type of ImageCodec.')

    
    # Element ImageHeight uses Python identifier ImageHeight
    __ImageHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageHeight'), 'ImageHeight', '__httpddex_netxmlern36_TechnicalImageDetails_ImageHeight', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3263, 9), )

    
    ImageHeight = property(__ImageHeight.value, __ImageHeight.set, None, 'A Composite containing the vertical Extent of an Image of the Image and a UnitOfMeasure (the default is Pixels).')

    
    # Element ImageWidth uses Python identifier ImageWidth
    __ImageWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageWidth'), 'ImageWidth', '__httpddex_netxmlern36_TechnicalImageDetails_ImageWidth', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3268, 9), )

    
    ImageWidth = property(__ImageWidth.value, __ImageWidth.set, None, 'A Composite containing the horizontal Extent of an Image of the Image and a UnitOfMeasure (the default is Pixels).')

    
    # Element AspectRatio uses Python identifier AspectRatio
    __AspectRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AspectRatio'), 'AspectRatio', '__httpddex_netxmlern36_TechnicalImageDetails_AspectRatio', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3273, 9), )

    
    AspectRatio = property(__AspectRatio.value, __AspectRatio.set, None, 'A Composite containing the ratio formed by dividing the ImageHeight by the ImageWidth.')

    
    # Element ColorDepth uses Python identifier ColorDepth
    __ColorDepth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ColorDepth'), 'ColorDepth', '__httpddex_netxmlern36_TechnicalImageDetails_ColorDepth', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3278, 9), )

    
    ColorDepth = property(__ColorDepth.value, __ColorDepth.set, None, 'An amount of data determining the color of a pixel of the Image (given in bits per pixel).')

    
    # Element ImageResolution uses Python identifier ImageResolution
    __ImageResolution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageResolution'), 'ImageResolution', '__httpddex_netxmlern36_TechnicalImageDetails_ImageResolution', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3283, 9), )

    
    ImageResolution = property(__ImageResolution.value, __ImageResolution.set, None, 'A number of pixels of the Image displayed in a specific spatial range (given in dpi).')

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern36_TechnicalImageDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3288, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The Flag indicating whether the Image is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern36_TechnicalImageDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3293, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_TechnicalImageDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3298, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern36_TechnicalImageDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3303, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A Composite containing details of when a consumer is able to get hold of the Image.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern36_TechnicalImageDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3311, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A Composite containing a Description providing details of how a DSP can obtain a File that contains the Image.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern36_TechnicalImageDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3318, 12), )

    
    File = property(__File.value, __File.set, None, 'A Composite containing details of a File containing the Image that a DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern36_TechnicalImageDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3324, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A Composite containing details of a Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TechnicalImageDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3333, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3333, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the TechnicalImageDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __ContainerFormat.name() : __ContainerFormat,
        __ImageCodecType.name() : __ImageCodecType,
        __ImageHeight.name() : __ImageHeight,
        __ImageWidth.name() : __ImageWidth,
        __AspectRatio.name() : __AspectRatio,
        __ColorDepth.name() : __ColorDepth,
        __ImageResolution.name() : __ImageResolution,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalImageDetails', TechnicalImageDetails)


# Complex type {http://ddex.net/xml/ern/36}TechnicalMidiDetails with content type ELEMENT_ONLY
class TechnicalMidiDetails (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing technical details of a MIDI."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalMidiDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3339, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern36_TechnicalMidiDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3344, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The Identifier (specific to the Message) of the TechnicalMidiDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_TechnicalMidiDetails_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3354, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the instantiation of the MIDI if this differs from the Duration provided for the MIDI itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole MIDI.')

    
    # Element ResourceProcessingRequired uses Python identifier ResourceProcessingRequired
    __ResourceProcessingRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), 'ResourceProcessingRequired', '__httpddex_netxmlern36_TechnicalMidiDetails_ResourceProcessingRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3359, 9), )

    
    ResourceProcessingRequired = property(__ResourceProcessingRequired.value, __ResourceProcessingRequired.set, None, 'The Flag indicating whether the MIDI needs to be processed (=True) or not (=False) (typically: transcoded) by the MessageRecipient before being delivered to Consumers.')

    
    # Element UsableResourceDuration uses Python identifier UsableResourceDuration
    __UsableResourceDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), 'UsableResourceDuration', '__httpddex_netxmlern36_TechnicalMidiDetails_UsableResourceDuration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3364, 9), )

    
    UsableResourceDuration = property(__UsableResourceDuration.value, __UsableResourceDuration.set, None, "The Duration of the MIDI that may be sold to a Consumer if the MIDI provided is not intended to be provided to Consumers 'as is' but will need to be transcoded into an appropriate format by the MessageRecipient or any other DSP handling the Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).")

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern36_TechnicalMidiDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3369, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The Flag indicating whether the MIDI is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern36_TechnicalMidiDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3374, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_TechnicalMidiDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3381, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern36_TechnicalMidiDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3386, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A Composite containing details of when a consumer is able to get hold of the MIDI.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern36_TechnicalMidiDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3394, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A Composite containing a Description providing details of how a DSP can obtain a File that contains the MIDI.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern36_TechnicalMidiDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3401, 12), )

    
    File = property(__File.value, __File.set, None, 'A Composite containing details of a File containing the MIDI that a DSP can obtain.')

    
    # Element NumberOfVoices uses Python identifier NumberOfVoices
    __NumberOfVoices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfVoices'), 'NumberOfVoices', '__httpddex_netxmlern36_TechnicalMidiDetails_NumberOfVoices', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3407, 9), )

    
    NumberOfVoices = property(__NumberOfVoices.value, __NumberOfVoices.set, None, 'The number of voices.')

    
    # Element SoundProcessorType uses Python identifier SoundProcessorType
    __SoundProcessorType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundProcessorType'), 'SoundProcessorType', '__httpddex_netxmlern36_TechnicalMidiDetails_SoundProcessorType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3412, 9), )

    
    SoundProcessorType = property(__SoundProcessorType.value, __SoundProcessorType.set, None, 'A Type of sound processor.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern36_TechnicalMidiDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3419, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A Composite containing details of a Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TechnicalMidiDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3428, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3428, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the TechnicalMidiDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __Duration.name() : __Duration,
        __ResourceProcessingRequired.name() : __ResourceProcessingRequired,
        __UsableResourceDuration.name() : __UsableResourceDuration,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __NumberOfVoices.name() : __NumberOfVoices,
        __SoundProcessorType.name() : __SoundProcessorType,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalMidiDetails', TechnicalMidiDetails)


# Complex type {http://ddex.net/xml/ern/36}TechnicalSheetMusicDetails with content type ELEMENT_ONLY
class TechnicalSheetMusicDetails (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing technical details of a SheetMusic."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalSheetMusicDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3434, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3439, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The Identifier (specific to the Message) of the TechnicalSheetMusicDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3449, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A Composite containing details of a Type of DrmPlatform.')

    
    # Element ContainerFormat uses Python identifier ContainerFormat
    __ContainerFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), 'ContainerFormat', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_ContainerFormat', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3454, 9), )

    
    ContainerFormat = property(__ContainerFormat.value, __ContainerFormat.set, None, 'A Composite containing details of a ContainerFormat.')

    
    # Element SheetMusicCodecType uses Python identifier SheetMusicCodecType
    __SheetMusicCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SheetMusicCodecType'), 'SheetMusicCodecType', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_SheetMusicCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3459, 9), )

    
    SheetMusicCodecType = property(__SheetMusicCodecType.value, __SheetMusicCodecType.set, None, 'A Composite containing details of a Type of SheetMusicCodec.')

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3466, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The Flag indicating whether the SheetMusic is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3471, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3476, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3481, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A Composite containing details of when a consumer is able to get hold of the SheetMusic.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3489, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A Composite containing a Description providing details of how a DSP can obtain a File that contains the SheetMusic.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3496, 12), )

    
    File = property(__File.value, __File.set, None, 'A Composite containing details of a File containing the SheetMusic that a DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3502, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A Composite containing details of a Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TechnicalSheetMusicDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3511, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3511, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the TechnicalSheetMusicDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __ContainerFormat.name() : __ContainerFormat,
        __SheetMusicCodecType.name() : __SheetMusicCodecType,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalSheetMusicDetails', TechnicalSheetMusicDetails)


# Complex type {http://ddex.net/xml/ern/36}TechnicalSoftwareDetails with content type ELEMENT_ONLY
class TechnicalSoftwareDetails (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing technical details of a Software."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalSoftwareDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3517, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern36_TechnicalSoftwareDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3522, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The Identifier (specific to the Message) of the TechnicalSoftwareDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern36_TechnicalSoftwareDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3532, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A Composite containing details of a Type of DrmPlatform.')

    
    # Element OperatingSystemType uses Python identifier OperatingSystemType
    __OperatingSystemType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OperatingSystemType'), 'OperatingSystemType', '__httpddex_netxmlern36_TechnicalSoftwareDetails_OperatingSystemType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3537, 9), )

    
    OperatingSystemType = property(__OperatingSystemType.value, __OperatingSystemType.set, None, 'A Composite containing details of a Type of OperatingSystem.')

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern36_TechnicalSoftwareDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3544, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The Flag indicating whether the Software is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern36_TechnicalSoftwareDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3549, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_TechnicalSoftwareDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3554, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern36_TechnicalSoftwareDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3559, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A Composite containing details of when a consumer is able to get hold of the Software.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern36_TechnicalSoftwareDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3567, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A Composite containing a Description providing details of how a DSP can obtain a File that contains the Software.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern36_TechnicalSoftwareDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3574, 12), )

    
    File = property(__File.value, __File.set, None, 'A Composite containing details of a File containing the Software that a DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern36_TechnicalSoftwareDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3580, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A Composite containing details of a Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TechnicalSoftwareDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3589, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3589, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the TechnicalSoftwareDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __OperatingSystemType.name() : __OperatingSystemType,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalSoftwareDetails', TechnicalSoftwareDetails)


# Complex type {http://ddex.net/xml/ern/36}TechnicalSoundRecordingDetails with content type ELEMENT_ONLY
class TechnicalSoundRecordingDetails (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing technical details of a SoundRecording."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalSoundRecordingDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3595, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3600, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The Identifier (specific to the Message) of the TechnicalSoundRecordingDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3610, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A Composite containing details of a Type of DrmPlatform.')

    
    # Element ContainerFormat uses Python identifier ContainerFormat
    __ContainerFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), 'ContainerFormat', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_ContainerFormat', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3615, 9), )

    
    ContainerFormat = property(__ContainerFormat.value, __ContainerFormat.set, None, 'A Composite containing details of a ContainerFormat.')

    
    # Element AudioCodecType uses Python identifier AudioCodecType
    __AudioCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AudioCodecType'), 'AudioCodecType', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_AudioCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3620, 9), )

    
    AudioCodecType = property(__AudioCodecType.value, __AudioCodecType.set, None, 'A Composite containing details of a Type of AudioCodec.')

    
    # Element BitRate uses Python identifier BitRate
    __BitRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BitRate'), 'BitRate', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_BitRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3625, 9), )

    
    BitRate = property(__BitRate.value, __BitRate.set, None, 'A Composite containing the BitRate for the audio data and a UnitOfMeasure (the default is kbps).')

    
    # Element NumberOfChannels uses Python identifier NumberOfChannels
    __NumberOfChannels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfChannels'), 'NumberOfChannels', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_NumberOfChannels', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3630, 9), )

    
    NumberOfChannels = property(__NumberOfChannels.value, __NumberOfChannels.set, None, 'A number of audio channels.')

    
    # Element SamplingRate uses Python identifier SamplingRate
    __SamplingRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SamplingRate'), 'SamplingRate', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_SamplingRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3635, 9), )

    
    SamplingRate = property(__SamplingRate.value, __SamplingRate.set, None, 'A Composite containing the sampling rate of the SoundRecording and a UnitOfMeasure (the default is Hz).')

    
    # Element BitsPerSample uses Python identifier BitsPerSample
    __BitsPerSample = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BitsPerSample'), 'BitsPerSample', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_BitsPerSample', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3640, 9), )

    
    BitsPerSample = property(__BitsPerSample.value, __BitsPerSample.set, None, 'An amount of audio data in a sample.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3645, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the instantiation of the SoundRecording if this differs from the Duration provided for the SoundRecording itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole SoundRecording.')

    
    # Element ResourceProcessingRequired uses Python identifier ResourceProcessingRequired
    __ResourceProcessingRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), 'ResourceProcessingRequired', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_ResourceProcessingRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3650, 9), )

    
    ResourceProcessingRequired = property(__ResourceProcessingRequired.value, __ResourceProcessingRequired.set, None, 'The Flag indicating whether the SoundRecording needs to be processed (=True) or not (=False) (typically: transcoded) by the MessageRecipient before being delivered to Consumers.')

    
    # Element UsableResourceDuration uses Python identifier UsableResourceDuration
    __UsableResourceDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), 'UsableResourceDuration', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_UsableResourceDuration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3655, 9), )

    
    UsableResourceDuration = property(__UsableResourceDuration.value, __UsableResourceDuration.set, None, "The Duration of the SoundRecording that may be sold to a Consumer if the SoundRecording provided is not intended to be provided to Consumers 'as is' but will need to be transcoded into an appropriate format by the MessageRecipient or any other DSP handling the Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).")

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3660, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The Flag indicating whether the SoundRecording is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3665, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3672, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3677, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A Composite containing details of when a consumer is able to get hold of the SoundRecording.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3685, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A Composite containing a Description providing details of how a DSP can obtain a File that contains the SoundRecording.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3692, 12), )

    
    File = property(__File.value, __File.set, None, 'A Composite containing details of a File containing the SoundRecording that a DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3698, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A Composite containing details of a Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TechnicalSoundRecordingDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3707, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3707, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the TechnicalSoundRecordingDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __ContainerFormat.name() : __ContainerFormat,
        __AudioCodecType.name() : __AudioCodecType,
        __BitRate.name() : __BitRate,
        __NumberOfChannels.name() : __NumberOfChannels,
        __SamplingRate.name() : __SamplingRate,
        __BitsPerSample.name() : __BitsPerSample,
        __Duration.name() : __Duration,
        __ResourceProcessingRequired.name() : __ResourceProcessingRequired,
        __UsableResourceDuration.name() : __UsableResourceDuration,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalSoundRecordingDetails', TechnicalSoundRecordingDetails)


# Complex type {http://ddex.net/xml/ern/36}TechnicalTextDetails with content type ELEMENT_ONLY
class TechnicalTextDetails (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing technical details of a Text."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalTextDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3713, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern36_TechnicalTextDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3718, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The Identifier (specific to the Message) of the TechnicalTextDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern36_TechnicalTextDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3728, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A Composite containing details of a Type of DrmPlatform.')

    
    # Element ContainerFormat uses Python identifier ContainerFormat
    __ContainerFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), 'ContainerFormat', '__httpddex_netxmlern36_TechnicalTextDetails_ContainerFormat', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3733, 9), )

    
    ContainerFormat = property(__ContainerFormat.value, __ContainerFormat.set, None, 'A Composite containing details of a ContainerFormat.')

    
    # Element TextCodecType uses Python identifier TextCodecType
    __TextCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TextCodecType'), 'TextCodecType', '__httpddex_netxmlern36_TechnicalTextDetails_TextCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3738, 9), )

    
    TextCodecType = property(__TextCodecType.value, __TextCodecType.set, None, 'A Composite containing details of a Type of TextCodec.')

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern36_TechnicalTextDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3743, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The Flag indicating whether the Text is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern36_TechnicalTextDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3748, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_TechnicalTextDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3753, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern36_TechnicalTextDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3758, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A Composite containing details of when a consumer is able to get hold of the Text.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern36_TechnicalTextDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3766, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A Composite containing a Description providing details of how a DSP can obtain a File that contains the Text.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern36_TechnicalTextDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3773, 12), )

    
    File = property(__File.value, __File.set, None, 'A Composite containing details of a File containing the Text that a DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern36_TechnicalTextDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3779, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A Composite containing details of a Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TechnicalTextDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3788, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3788, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the TechnicalTextDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __ContainerFormat.name() : __ContainerFormat,
        __TextCodecType.name() : __TextCodecType,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalTextDetails', TechnicalTextDetails)


# Complex type {http://ddex.net/xml/ern/36}TechnicalUserDefinedResourceDetails with content type ELEMENT_ONLY
class TechnicalUserDefinedResourceDetails (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing technical details of a UserDefinedResource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalUserDefinedResourceDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3794, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern36_TechnicalUserDefinedResourceDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3799, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The Identifier (specific to the Message) of the TechnicalUserDefinedResourceDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_TechnicalUserDefinedResourceDetails_UserDefinedValue', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3809, 9), )

    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A Composite containing details of a UserDefinedValue.')

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern36_TechnicalUserDefinedResourceDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3817, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The Flag indicating whether the UserDefinedResource is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern36_TechnicalUserDefinedResourceDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3822, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_TechnicalUserDefinedResourceDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3827, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern36_TechnicalUserDefinedResourceDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3832, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A Composite containing details of when a consumer is able to get hold of the UserDefinedResource.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern36_TechnicalUserDefinedResourceDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3840, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A Composite containing a Description providing details of how a DSP can obtain a File that contains the UserDefinedResource.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern36_TechnicalUserDefinedResourceDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3847, 12), )

    
    File = property(__File.value, __File.set, None, 'A Composite containing details of a File containing the UserDefinedResource that a DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern36_TechnicalUserDefinedResourceDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3853, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A Composite containing details of a Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TechnicalUserDefinedResourceDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3862, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3862, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the TechnicalUserDefinedResourceDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __UserDefinedValue.name() : __UserDefinedValue,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalUserDefinedResourceDetails', TechnicalUserDefinedResourceDetails)


# Complex type {http://ddex.net/xml/ern/36}TechnicalVideoDetails with content type ELEMENT_ONLY
class TechnicalVideoDetails (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing technical details of a Video."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalVideoDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3868, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern36_TechnicalVideoDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3873, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The Identifier (specific to the Message) of the TechnicalVideoDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern36_TechnicalVideoDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3883, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A Composite containing details of a Type of DrmPlatform.')

    
    # Element OverallBitRate uses Python identifier OverallBitRate
    __OverallBitRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OverallBitRate'), 'OverallBitRate', '__httpddex_netxmlern36_TechnicalVideoDetails_OverallBitRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3888, 9), )

    
    OverallBitRate = property(__OverallBitRate.value, __OverallBitRate.set, None, 'A Composite containing the overall BitRate and a UnitOfMeasure (the default is kbps).')

    
    # Element ContainerFormat uses Python identifier ContainerFormat
    __ContainerFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), 'ContainerFormat', '__httpddex_netxmlern36_TechnicalVideoDetails_ContainerFormat', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3893, 9), )

    
    ContainerFormat = property(__ContainerFormat.value, __ContainerFormat.set, None, 'A Composite containing details of a ContainerFormat.')

    
    # Element VideoCodecType uses Python identifier VideoCodecType
    __VideoCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoCodecType'), 'VideoCodecType', '__httpddex_netxmlern36_TechnicalVideoDetails_VideoCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3898, 9), )

    
    VideoCodecType = property(__VideoCodecType.value, __VideoCodecType.set, None, 'A Composite containing details of a Type of VideoCodec.')

    
    # Element VideoBitRate uses Python identifier VideoBitRate
    __VideoBitRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoBitRate'), 'VideoBitRate', '__httpddex_netxmlern36_TechnicalVideoDetails_VideoBitRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3903, 9), )

    
    VideoBitRate = property(__VideoBitRate.value, __VideoBitRate.set, None, 'A Composite containing the BitRate for the video data and a UnitOfMeasure (the default is kbps).')

    
    # Element FrameRate uses Python identifier FrameRate
    __FrameRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FrameRate'), 'FrameRate', '__httpddex_netxmlern36_TechnicalVideoDetails_FrameRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3908, 9), )

    
    FrameRate = property(__FrameRate.value, __FrameRate.set, None, 'A Composite containing the Rate for a number of frames shown in the Video in a specific Period of Time and a UnitOfMeasure (the default is Hz, interlaced).')

    
    # Element ImageHeight uses Python identifier ImageHeight
    __ImageHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageHeight'), 'ImageHeight', '__httpddex_netxmlern36_TechnicalVideoDetails_ImageHeight', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3913, 9), )

    
    ImageHeight = property(__ImageHeight.value, __ImageHeight.set, None, 'A Composite containing the vertical Extent of an Image of the Video and a UnitOfMeasure (the default is Pixels).')

    
    # Element ImageWidth uses Python identifier ImageWidth
    __ImageWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageWidth'), 'ImageWidth', '__httpddex_netxmlern36_TechnicalVideoDetails_ImageWidth', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3918, 9), )

    
    ImageWidth = property(__ImageWidth.value, __ImageWidth.set, None, 'A Composite containing the horizontal Extent of an Image of the Video and a UnitOfMeasure (the default is Pixels).')

    
    # Element AspectRatio uses Python identifier AspectRatio
    __AspectRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AspectRatio'), 'AspectRatio', '__httpddex_netxmlern36_TechnicalVideoDetails_AspectRatio', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3923, 9), )

    
    AspectRatio = property(__AspectRatio.value, __AspectRatio.set, None, 'A Composite containing the ratio formed by dividing the ImageHeight by the ImageWidth.')

    
    # Element ColorDepth uses Python identifier ColorDepth
    __ColorDepth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ColorDepth'), 'ColorDepth', '__httpddex_netxmlern36_TechnicalVideoDetails_ColorDepth', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3928, 9), )

    
    ColorDepth = property(__ColorDepth.value, __ColorDepth.set, None, 'An amount of data determining the color of a pixel of an Image of the Video (given in bits per pixel).')

    
    # Element VideoDefinitionType uses Python identifier VideoDefinitionType
    __VideoDefinitionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoDefinitionType'), 'VideoDefinitionType', '__httpddex_netxmlern36_TechnicalVideoDetails_VideoDefinitionType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3933, 9), )

    
    VideoDefinitionType = property(__VideoDefinitionType.value, __VideoDefinitionType.set, None, 'A Type of resolution (or definition) in which the Video is provided.')

    
    # Element AudioCodecType uses Python identifier AudioCodecType
    __AudioCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AudioCodecType'), 'AudioCodecType', '__httpddex_netxmlern36_TechnicalVideoDetails_AudioCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3940, 9), )

    
    AudioCodecType = property(__AudioCodecType.value, __AudioCodecType.set, None, 'A Composite containing details of a Type of AudioCodec.')

    
    # Element AudioBitRate uses Python identifier AudioBitRate
    __AudioBitRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AudioBitRate'), 'AudioBitRate', '__httpddex_netxmlern36_TechnicalVideoDetails_AudioBitRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3945, 9), )

    
    AudioBitRate = property(__AudioBitRate.value, __AudioBitRate.set, None, 'A Composite containing the BitRate for the audio data and a UnitOfMeasure (the default is kbps).')

    
    # Element NumberOfAudioChannels uses Python identifier NumberOfAudioChannels
    __NumberOfAudioChannels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfAudioChannels'), 'NumberOfAudioChannels', '__httpddex_netxmlern36_TechnicalVideoDetails_NumberOfAudioChannels', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3950, 9), )

    
    NumberOfAudioChannels = property(__NumberOfAudioChannels.value, __NumberOfAudioChannels.set, None, 'A number of audio channels.')

    
    # Element AudioSamplingRate uses Python identifier AudioSamplingRate
    __AudioSamplingRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AudioSamplingRate'), 'AudioSamplingRate', '__httpddex_netxmlern36_TechnicalVideoDetails_AudioSamplingRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3955, 9), )

    
    AudioSamplingRate = property(__AudioSamplingRate.value, __AudioSamplingRate.set, None, 'A Composite containing the SamplingRate for the audio data and a UnitOfMeasure (the default is Hz).')

    
    # Element AudioBitsPerSample uses Python identifier AudioBitsPerSample
    __AudioBitsPerSample = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AudioBitsPerSample'), 'AudioBitsPerSample', '__httpddex_netxmlern36_TechnicalVideoDetails_AudioBitsPerSample', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3960, 9), )

    
    AudioBitsPerSample = property(__AudioBitsPerSample.value, __AudioBitsPerSample.set, None, 'An amount of audio data in a sample.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_TechnicalVideoDetails_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3965, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the instantiation of the Video if this differs from the Duration provided for the Video itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole Video.')

    
    # Element ResourceProcessingRequired uses Python identifier ResourceProcessingRequired
    __ResourceProcessingRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), 'ResourceProcessingRequired', '__httpddex_netxmlern36_TechnicalVideoDetails_ResourceProcessingRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3970, 9), )

    
    ResourceProcessingRequired = property(__ResourceProcessingRequired.value, __ResourceProcessingRequired.set, None, 'The Flag indicating whether the Video needs to be processed (=True) or not (=False) (typically: transcoded) by the MessageRecipient before being delivered to Consumers.')

    
    # Element UsableResourceDuration uses Python identifier UsableResourceDuration
    __UsableResourceDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), 'UsableResourceDuration', '__httpddex_netxmlern36_TechnicalVideoDetails_UsableResourceDuration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3975, 9), )

    
    UsableResourceDuration = property(__UsableResourceDuration.value, __UsableResourceDuration.set, None, "The Duration of the Video that may be sold to a Consumer if the Video provided is not intended to be provided to Consumers 'as is' but will need to be transcoded into an appropriate format by the MessageRecipient or any other DSP handling the Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).")

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern36_TechnicalVideoDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3980, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The Flag indicating whether the Video is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern36_TechnicalVideoDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3985, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_TechnicalVideoDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3992, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern36_TechnicalVideoDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3997, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A Composite containing details of when a consumer is able to get hold of the Video.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern36_TechnicalVideoDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4005, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A Composite containing a Description providing details of how a DSP can obtain a File that contains the Video.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern36_TechnicalVideoDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4012, 12), )

    
    File = property(__File.value, __File.set, None, 'A Composite containing details of a File containing the Video that a DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern36_TechnicalVideoDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4018, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A Composite containing details of a Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TechnicalVideoDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4027, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4027, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the TechnicalSoundRecordingDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __OverallBitRate.name() : __OverallBitRate,
        __ContainerFormat.name() : __ContainerFormat,
        __VideoCodecType.name() : __VideoCodecType,
        __VideoBitRate.name() : __VideoBitRate,
        __FrameRate.name() : __FrameRate,
        __ImageHeight.name() : __ImageHeight,
        __ImageWidth.name() : __ImageWidth,
        __AspectRatio.name() : __AspectRatio,
        __ColorDepth.name() : __ColorDepth,
        __VideoDefinitionType.name() : __VideoDefinitionType,
        __AudioCodecType.name() : __AudioCodecType,
        __AudioBitRate.name() : __AudioBitRate,
        __NumberOfAudioChannels.name() : __NumberOfAudioChannels,
        __AudioSamplingRate.name() : __AudioSamplingRate,
        __AudioBitsPerSample.name() : __AudioBitsPerSample,
        __Duration.name() : __Duration,
        __ResourceProcessingRequired.name() : __ResourceProcessingRequired,
        __UsableResourceDuration.name() : __UsableResourceDuration,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalVideoDetails', TechnicalVideoDetails)


# Complex type {http://ddex.net/xml/ern/36}Text with content type ELEMENT_ONLY
class Text (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Text."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Text')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4033, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TextType uses Python identifier TextType
    __TextType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TextType'), 'TextType', '__httpddex_netxmlern36_Text_TextType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4038, 9), )

    
    TextType = property(__TextType.value, __TextType.set, None, 'A Composite containing details of the Type of the Text.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern36_Text_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4043, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The Flag indicating whether the Text is related to an Artist (=True) or not (=False).')

    
    # Element TextId uses Python identifier TextId
    __TextId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TextId'), 'TextId', '__httpddex_netxmlern36_Text_TextId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4048, 9), )

    
    TextId = property(__TextId.value, __TextId.set, None, 'A Composite containing details of an Identifier of the Text.')

    
    # Element IndirectTextId uses Python identifier IndirectTextId
    __IndirectTextId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectTextId'), 'IndirectTextId', '__httpddex_netxmlern36_Text_IndirectTextId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4056, 9), )

    
    IndirectTextId = property(__IndirectTextId.value, __IndirectTextId.set, None, 'A Composite containing details of a MusicalWorkId of a MusicalWork used in the Text.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern36_Text_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4064, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The Identifier (specific to the Message) of the Text within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern36_Text_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4074, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A Composite containing details of one or more MusicalWorks contained in the Text.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern36_Text_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4081, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current Text.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_Text_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4088, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the Text.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern36_Text_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4096, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Text was created.')

    
    # Element TextDetailsByTerritory uses Python identifier TextDetailsByTerritory
    __TextDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TextDetailsByTerritory'), 'TextDetailsByTerritory', '__httpddex_netxmlern36_Text_TextDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4101, 9), )

    
    TextDetailsByTerritory = property(__TextDetailsByTerritory.value, __TextDetailsByTerritory.set, None, 'A Composite containing details of the Text which may vary according to Territory of release.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern36_Text_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4109, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4109, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The Flag indicating whether the Text Element was updated (=True) or not (=False). The Flag may only be used when the UpdateIndicator is set to UpdateMessage. When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided Text data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Text_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4114, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4114, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the Text as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TextType.name() : __TextType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __TextId.name() : __TextId,
        __IndirectTextId.name() : __IndirectTextId,
        __ResourceReference.name() : __ResourceReference,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __Title.name() : __Title,
        __CreationDate.name() : __CreationDate,
        __TextDetailsByTerritory.name() : __TextDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Text', Text)


# Complex type {http://ddex.net/xml/ern/36}TextDetailsByTerritory with content type ELEMENT_ONLY
class TextDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Descriptors, Dates and other attributes of a Text which may vary according to Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TextDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4120, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_TextDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4126, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the Text details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_TextDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4131, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the Text details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern36_TextDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4139, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A Composite containing details of a Contributor to the Text.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern36_TextDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4147, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A Composite containing details of an indirect Contributor to the Text.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern36_TextDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4155, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A Composite containing details of the CLine for the Text.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern36_TextDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4163, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured in the Text.')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern36_TextDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4168, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Text was originally published, whether for physical or electronic/online distribution.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_TextDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4175, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern36_TextDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4180, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A Composite containing details of a Description of the Text containing Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern36_TextDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4188, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A Composite containing details of a Synopsis of the Text.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern36_TextDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4193, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A Composite containing details of a Genre to which the Text belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern36_TextDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4201, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A Composite containing details of the classification of the Text according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element TechnicalTextDetails uses Python identifier TechnicalTextDetails
    __TechnicalTextDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalTextDetails'), 'TechnicalTextDetails', '__httpddex_netxmlern36_TextDetailsByTerritory_TechnicalTextDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4209, 9), )

    
    TechnicalTextDetails = property(__TechnicalTextDetails.value, __TechnicalTextDetails.set, None, 'A Composite containing technical details of the Text.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TextDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4218, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4218, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the TextDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __CLine.name() : __CLine,
        __CourtesyLine.name() : __CourtesyLine,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __TechnicalTextDetails.name() : __TechnicalTextDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TextDetailsByTerritory', TextDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}TypedRightsController with content type ELEMENT_ONLY
class TypedRightsController (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a RightsController. RightsControllers are typicallydescribed by Name, Identifier and role(s)."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TypedRightsController')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4224, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_TypedRightsController_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4230, 12), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern36_TypedRightsController_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4236, 15), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A Composite containing details of the PartyName(s).')

    
    # Element RightsControllerRole uses Python identifier RightsControllerRole
    __RightsControllerRole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsControllerRole'), 'RightsControllerRole', '__httpddex_netxmlern36_TypedRightsController_RightsControllerRole', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4251, 9), )

    
    RightsControllerRole = property(__RightsControllerRole.value, __RightsControllerRole.set, None, 'A role that describes the Party involved in the administration of Rights.')

    
    # Element RightShareUnknown uses Python identifier RightShareUnknown
    __RightShareUnknown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightShareUnknown'), 'RightShareUnknown', '__httpddex_netxmlern36_TypedRightsController_RightShareUnknown', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4260, 12), )

    
    RightShareUnknown = property(__RightShareUnknown.value, __RightShareUnknown.set, None, 'The Flag indicating whether the RightSharePercentage is unknown (=True) or not (=False).')

    
    # Element RightSharePercentage uses Python identifier RightSharePercentage
    __RightSharePercentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightSharePercentage'), 'RightSharePercentage', '__httpddex_netxmlern36_TypedRightsController_RightSharePercentage', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4265, 12), )

    
    RightSharePercentage = property(__RightSharePercentage.value, __RightSharePercentage.set, None, "The share of the licensed Rights owned by the RightsController. RightShare information is given as a xs:decimal value (e.g. '0.125' represents 12.5%). If no information is given, 100% is assumed.")

    
    # Element RightsControllerType uses Python identifier RightsControllerType
    __RightsControllerType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsControllerType'), 'RightsControllerType', '__httpddex_netxmlern36_TypedRightsController_RightsControllerType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4271, 9), )

    
    RightsControllerType = property(__RightsControllerType.value, __RightsControllerType.set, None, 'A type of the RightsController.')

    
    # Element TerritoryOfRegistration uses Python identifier TerritoryOfRegistration
    __TerritoryOfRegistration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryOfRegistration'), 'TerritoryOfRegistration', '__httpddex_netxmlern36_TypedRightsController_TerritoryOfRegistration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4278, 9), )

    
    TerritoryOfRegistration = property(__TerritoryOfRegistration.value, __TerritoryOfRegistration.set, None, 'The country of registration (represented by an ISO 3166-1 TerritoryCode).')

    
    # Element StartDate uses Python identifier StartDate
    __StartDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartDate'), 'StartDate', '__httpddex_netxmlern36_TypedRightsController_StartDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4285, 9), )

    
    StartDate = property(__StartDate.value, __StartDate.set, None, 'The Date that marks the beginning of the title (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element EndDate uses Python identifier EndDate
    __EndDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EndDate'), 'EndDate', '__httpddex_netxmlern36_TypedRightsController_EndDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4290, 9), )

    
    EndDate = property(__EndDate.value, __EndDate.set, None, 'The Date that marks the end of the title (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Attribute SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_TypedRightsController_SequenceNumber', pyxb.binding.datatypes.integer)
    __SequenceNumber._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4296, 6)
    __SequenceNumber._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4296, 6)
    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the RightsController in a group of RightsControllers. This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __RightsControllerRole.name() : __RightsControllerRole,
        __RightShareUnknown.name() : __RightShareUnknown,
        __RightSharePercentage.name() : __RightSharePercentage,
        __RightsControllerType.name() : __RightsControllerType,
        __TerritoryOfRegistration.name() : __TerritoryOfRegistration,
        __StartDate.name() : __StartDate,
        __EndDate.name() : __EndDate
    })
    _AttributeMap.update({
        __SequenceNumber.name() : __SequenceNumber
    })
Namespace.addCategoryObject('typeBinding', 'TypedRightsController', TypedRightsController)


# Complex type {http://ddex.net/xml/ern/36}UserDefinedResource with content type ELEMENT_ONLY
class UserDefinedResource (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a UserDefinedResource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserDefinedResource')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4302, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UserDefinedResourceType uses Python identifier UserDefinedResourceType
    __UserDefinedResourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceType'), 'UserDefinedResourceType', '__httpddex_netxmlern36_UserDefinedResource_UserDefinedResourceType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4307, 9), )

    
    UserDefinedResourceType = property(__UserDefinedResourceType.value, __UserDefinedResourceType.set, None, 'A Composite containing details of the Type of the UserDefinedResource.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern36_UserDefinedResource_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4314, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The Flag indicating whether the UserDefinedResource is related to an Artist (=True) or not (=False).')

    
    # Element UserDefinedResourceId uses Python identifier UserDefinedResourceId
    __UserDefinedResourceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceId'), 'UserDefinedResourceId', '__httpddex_netxmlern36_UserDefinedResource_UserDefinedResourceId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4319, 9), )

    
    UserDefinedResourceId = property(__UserDefinedResourceId.value, __UserDefinedResourceId.set, None, 'A Composite containing details of Identifiers of the UserDefinedResource.')

    
    # Element IndirectUserDefinedResourceId uses Python identifier IndirectUserDefinedResourceId
    __IndirectUserDefinedResourceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectUserDefinedResourceId'), 'IndirectUserDefinedResourceId', '__httpddex_netxmlern36_UserDefinedResource_IndirectUserDefinedResourceId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4326, 9), )

    
    IndirectUserDefinedResourceId = property(__IndirectUserDefinedResourceId.value, __IndirectUserDefinedResourceId.set, None, 'A Composite containing details of a MusicalWorkId of a MusicalWork used in the UserDefinedResource.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern36_UserDefinedResource_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4334, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The Identifier (specific to the Message) of the UserDefinedResource within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern36_UserDefinedResource_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4344, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A Composite containing details of one or more MusicalWorks contained in the UserDefinedResource.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern36_UserDefinedResource_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4351, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current UserDefinedResource.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_UserDefinedResource_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4358, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the UserDefinedResource.')

    
    # Element UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_UserDefinedResource_UserDefinedValue', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4366, 9), )

    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A Composite containing details of a UserDefinedValue.')

    
    # Element UserDefinedResourceDetailsByTerritory uses Python identifier UserDefinedResourceDetailsByTerritory
    __UserDefinedResourceDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceDetailsByTerritory'), 'UserDefinedResourceDetailsByTerritory', '__httpddex_netxmlern36_UserDefinedResource_UserDefinedResourceDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4374, 9), )

    
    UserDefinedResourceDetailsByTerritory = property(__UserDefinedResourceDetailsByTerritory.value, __UserDefinedResourceDetailsByTerritory.set, None, 'A Composite containing details of the UserDefinedResource which may vary according to Territory of release.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern36_UserDefinedResource_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4382, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4382, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The Flag indicating whether the UserDefinedResource Element was updated (=True) or not (=False). The Flag may only be used when the UpdateIndicator is set to UpdateMessage. When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided UserDefinedResource data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_UserDefinedResource_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4387, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4387, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the UserDefinedResource as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __UserDefinedResourceType.name() : __UserDefinedResourceType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __UserDefinedResourceId.name() : __UserDefinedResourceId,
        __IndirectUserDefinedResourceId.name() : __IndirectUserDefinedResourceId,
        __ResourceReference.name() : __ResourceReference,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __Title.name() : __Title,
        __UserDefinedValue.name() : __UserDefinedValue,
        __UserDefinedResourceDetailsByTerritory.name() : __UserDefinedResourceDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'UserDefinedResource', UserDefinedResource)


# Complex type {http://ddex.net/xml/ern/36}UserDefinedResourceDetailsByTerritory with content type ELEMENT_ONLY
class UserDefinedResourceDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Descriptors, Dates and other attributes of a UserDefinedResource application which may vary according to Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserDefinedResourceDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4393, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4399, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the UserDefinedResource details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4404, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the UserDefinedResource details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4412, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A Composite containing details of a Contributor to the UserDefinedResource.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4420, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A Composite containing details of an indirect Contributor to the UserDefinedResource.')

    
    # Element UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_UserDefinedValue', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4428, 9), )

    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A Composite containing details of a UserDefinedValue.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4436, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A Composite containing details of the PLine for the UserDefinedResource.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4444, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A Composite containing details of the CLine for the UserDefinedResource.')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4452, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the UserDefinedResource was originally published, whether for physical or electronic/online distribution.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4459, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4464, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A Composite containing details of a Description of the UserDefinedResource containing Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4472, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A Composite containing details of a Synopsis of the UserDefinedResource.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4477, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A Composite containing details of a Genre to which the UserDefinedResource belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4485, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A Composite containing details of the classification of the UserDefinedResource according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element TechnicalUserDefinedResourceDetails uses Python identifier TechnicalUserDefinedResourceDetails
    __TechnicalUserDefinedResourceDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalUserDefinedResourceDetails'), 'TechnicalUserDefinedResourceDetails', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_TechnicalUserDefinedResourceDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4493, 9), )

    
    TechnicalUserDefinedResourceDetails = property(__TechnicalUserDefinedResourceDetails.value, __TechnicalUserDefinedResourceDetails.set, None, 'A Composite containing technical details of the UserDefinedResource.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_UserDefinedResourceDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4502, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4502, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the UserDefinedResourceDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __UserDefinedValue.name() : __UserDefinedValue,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __TechnicalUserDefinedResourceDetails.name() : __TechnicalUserDefinedResourceDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'UserDefinedResourceDetailsByTerritory', UserDefinedResourceDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}Video with content type ELEMENT_ONLY
class Video (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Video."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Video')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4508, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VideoType uses Python identifier VideoType
    __VideoType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoType'), 'VideoType', '__httpddex_netxmlern36_Video_VideoType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4513, 9), )

    
    VideoType = property(__VideoType.value, __VideoType.set, None, 'A Composite containing details of the Type of the Video.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern36_Video_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4518, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The Flag indicating whether the Video is related to an Artist (=True) or not (=False).')

    
    # Element VideoId uses Python identifier VideoId
    __VideoId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoId'), 'VideoId', '__httpddex_netxmlern36_Video_VideoId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4523, 9), )

    
    VideoId = property(__VideoId.value, __VideoId.set, None, 'A Composite containing details of an Identifier of the Video.')

    
    # Element IndirectVideoId uses Python identifier IndirectVideoId
    __IndirectVideoId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectVideoId'), 'IndirectVideoId', '__httpddex_netxmlern36_Video_IndirectVideoId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4531, 9), )

    
    IndirectVideoId = property(__IndirectVideoId.value, __IndirectVideoId.set, None, 'A Composite containing details of a MusicalWorkId of a MusicalWork used in the Video.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern36_Video_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4539, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The Identifier (specific to the Message) of the Video within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.')

    
    # Element VideoCueSheetReference uses Python identifier VideoCueSheetReference
    __VideoCueSheetReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoCueSheetReference'), 'VideoCueSheetReference', '__httpddex_netxmlern36_Video_VideoCueSheetReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4550, 12), )

    
    VideoCueSheetReference = property(__VideoCueSheetReference.value, __VideoCueSheetReference.set, None, 'A Composite containing a VideoCueSheetReference for a CueSheet (specific to this Message).')

    
    # Element ReasonForCueSheetAbsence uses Python identifier ReasonForCueSheetAbsence
    __ReasonForCueSheetAbsence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReasonForCueSheetAbsence'), 'ReasonForCueSheetAbsence', '__httpddex_netxmlern36_Video_ReasonForCueSheetAbsence', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4557, 12), )

    
    ReasonForCueSheetAbsence = property(__ReasonForCueSheetAbsence.value, __ReasonForCueSheetAbsence.set, None, 'A Composite containing the textual Description of the reason for the Identifier being used as a proxy.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern36_Video_ReferenceTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4563, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A Composite containing details of the ReferenceTitle of the Video.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_Video_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4568, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the Video.')

    
    # Element InstrumentationDescription uses Python identifier InstrumentationDescription
    __InstrumentationDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), 'InstrumentationDescription', '__httpddex_netxmlern36_Video_InstrumentationDescription', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4576, 9), )

    
    InstrumentationDescription = property(__InstrumentationDescription.value, __InstrumentationDescription.set, None, 'A Composite containing a Description of the Type of instrumentation of the MusicalWork(s) in the Video.')

    
    # Element IsMedley uses Python identifier IsMedley
    __IsMedley = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsMedley'), 'IsMedley', '__httpddex_netxmlern36_Video_IsMedley', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4583, 9), )

    
    IsMedley = property(__IsMedley.value, __IsMedley.set, None, 'The Flag indicating whether the Video is a Medley (=True) or not (=False).')

    
    # Element IsPotpourri uses Python identifier IsPotpourri
    __IsPotpourri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), 'IsPotpourri', '__httpddex_netxmlern36_Video_IsPotpourri', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4588, 9), )

    
    IsPotpourri = property(__IsPotpourri.value, __IsPotpourri.set, None, 'The Flag indicating whether the Video is a Potpourri (=True) or not (=False).')

    
    # Element IsInstrumental uses Python identifier IsInstrumental
    __IsInstrumental = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), 'IsInstrumental', '__httpddex_netxmlern36_Video_IsInstrumental', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4593, 9), )

    
    IsInstrumental = property(__IsInstrumental.value, __IsInstrumental.set, None, 'The Flag indicating whether the Video is instrumental (=True) or not (=False).')

    
    # Element IsBackground uses Python identifier IsBackground
    __IsBackground = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBackground'), 'IsBackground', '__httpddex_netxmlern36_Video_IsBackground', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4598, 9), )

    
    IsBackground = property(__IsBackground.value, __IsBackground.set, None, 'The Flag indicating whether the Video is used as background to other audio or audiovisual material (=True) or not (=False).')

    
    # Element IsHiddenResource uses Python identifier IsHiddenResource
    __IsHiddenResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), 'IsHiddenResource', '__httpddex_netxmlern36_Video_IsHiddenResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4603, 9), )

    
    IsHiddenResource = property(__IsHiddenResource.value, __IsHiddenResource.set, None, 'The Flag indicating whether the Video is hidden in some way from the Consumer (=True) or not (=False).')

    
    # Element IsBonusResource uses Python identifier IsBonusResource
    __IsBonusResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), 'IsBonusResource', '__httpddex_netxmlern36_Video_IsBonusResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4608, 9), )

    
    IsBonusResource = property(__IsBonusResource.value, __IsBonusResource.set, None, 'The Flag indicating whether the Video is additional to those on the original Release of which this is a Version (=True) or not (=False).')

    
    # Element HasPreOrderFulfillment uses Python identifier HasPreOrderFulfillment
    __HasPreOrderFulfillment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HasPreOrderFulfillment'), 'HasPreOrderFulfillment', '__httpddex_netxmlern36_Video_HasPreOrderFulfillment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4613, 9), )

    
    HasPreOrderFulfillment = property(__HasPreOrderFulfillment.value, __HasPreOrderFulfillment.set, None, 'A Flag indicating whether a DSP shall (=True) or shall not (=False) make the Video available during the pre-oder period. If the Flag is not set or set to false, the Video shall not be made available.')

    
    # Element IsRemastered uses Python identifier IsRemastered
    __IsRemastered = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsRemastered'), 'IsRemastered', '__httpddex_netxmlern36_Video_IsRemastered', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4618, 9), )

    
    IsRemastered = property(__IsRemastered.value, __IsRemastered.set, None, 'The Flag indicating whether the Video is remastered (=True) or not (=False).')

    
    # Element NoSilenceBefore uses Python identifier NoSilenceBefore
    __NoSilenceBefore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), 'NoSilenceBefore', '__httpddex_netxmlern36_Video_NoSilenceBefore', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4623, 9), )

    
    NoSilenceBefore = property(__NoSilenceBefore.value, __NoSilenceBefore.set, None, 'The Flag indicating whether the Video is preceded by a period of silence (=False) or not (=True). ')

    
    # Element NoSilenceAfter uses Python identifier NoSilenceAfter
    __NoSilenceAfter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), 'NoSilenceAfter', '__httpddex_netxmlern36_Video_NoSilenceAfter', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4628, 9), )

    
    NoSilenceAfter = property(__NoSilenceAfter.value, __NoSilenceAfter.set, None, 'The Flag indicating whether the Video is followed by a period of silence (=False) or not (=True). ')

    
    # Element PerformerInformationRequired uses Python identifier PerformerInformationRequired
    __PerformerInformationRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), 'PerformerInformationRequired', '__httpddex_netxmlern36_Video_PerformerInformationRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4633, 9), )

    
    PerformerInformationRequired = property(__PerformerInformationRequired.value, __PerformerInformationRequired.set, None, 'A Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the Video.')

    
    # Element LanguageOfPerformance uses Python identifier LanguageOfPerformance
    __LanguageOfPerformance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), 'LanguageOfPerformance', '__httpddex_netxmlern36_Video_LanguageOfPerformance', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4638, 9), )

    
    LanguageOfPerformance = property(__LanguageOfPerformance.value, __LanguageOfPerformance.set, None, 'The original Language of the Performance recorded in the Video (represented by an ISO 639-2 LanguageCode).')

    
    # Element LanguageOfDubbing uses Python identifier LanguageOfDubbing
    __LanguageOfDubbing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageOfDubbing'), 'LanguageOfDubbing', '__httpddex_netxmlern36_Video_LanguageOfDubbing', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4646, 9), )

    
    LanguageOfDubbing = property(__LanguageOfDubbing.value, __LanguageOfDubbing.set, None, 'The Language of dubbing used in the Video (represented by an ISO 639-2 LanguageCode).')

    
    # Element SubTitleLanguage uses Python identifier SubTitleLanguage
    __SubTitleLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SubTitleLanguage'), 'SubTitleLanguage', '__httpddex_netxmlern36_Video_SubTitleLanguage', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4654, 9), )

    
    SubTitleLanguage = property(__SubTitleLanguage.value, __SubTitleLanguage.set, None, 'The Language of SubTitles in the Video (represented by an ISO 639-2 LanguageCode).')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_Video_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4662, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the Video (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_Video_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4667, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Video.')

    
    # Element VideoCollectionReferenceList uses Python identifier VideoCollectionReferenceList
    __VideoCollectionReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoCollectionReferenceList'), 'VideoCollectionReferenceList', '__httpddex_netxmlern36_Video_VideoCollectionReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4672, 9), )

    
    VideoCollectionReferenceList = property(__VideoCollectionReferenceList.value, __VideoCollectionReferenceList.set, None, 'A Composite containing details of one or more Collections. The referenced Collection has to be of CollectionType VideoChapter.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern36_Video_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4679, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A Composite containing details of one or more MusicalWorks contained in the Video.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern36_Video_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4686, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current Video.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern36_Video_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4693, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Video was created.')

    
    # Element MasteredDate uses Python identifier MasteredDate
    __MasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MasteredDate'), 'MasteredDate', '__httpddex_netxmlern36_Video_MasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4698, 9), )

    
    MasteredDate = property(__MasteredDate.value, __MasteredDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the Video was originally mastered (in either analogue or digital form).')

    
    # Element VideoDetailsByTerritory uses Python identifier VideoDetailsByTerritory
    __VideoDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoDetailsByTerritory'), 'VideoDetailsByTerritory', '__httpddex_netxmlern36_Video_VideoDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4703, 9), )

    
    VideoDetailsByTerritory = property(__VideoDetailsByTerritory.value, __VideoDetailsByTerritory.set, None, 'A Composite containing details of Descriptors and other attributes of the Video which may vary according to Territory of release. ')

    
    # Element TerritoryOfCommissioning uses Python identifier TerritoryOfCommissioning
    __TerritoryOfCommissioning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning'), 'TerritoryOfCommissioning', '__httpddex_netxmlern36_Video_TerritoryOfCommissioning', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4710, 9), )

    
    TerritoryOfCommissioning = property(__TerritoryOfCommissioning.value, __TerritoryOfCommissioning.set, None, 'The country of commissioning (represented by an ISO 3166-1 TerritoryCode).')

    
    # Element NumberOfFeaturedArtists uses Python identifier NumberOfFeaturedArtists
    __NumberOfFeaturedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists'), 'NumberOfFeaturedArtists', '__httpddex_netxmlern36_Video_NumberOfFeaturedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4717, 9), )

    
    NumberOfFeaturedArtists = property(__NumberOfFeaturedArtists.value, __NumberOfFeaturedArtists.set, None, 'The number of FeaturedArtists associated with the Video.')

    
    # Element NumberOfNonFeaturedArtists uses Python identifier NumberOfNonFeaturedArtists
    __NumberOfNonFeaturedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists'), 'NumberOfNonFeaturedArtists', '__httpddex_netxmlern36_Video_NumberOfNonFeaturedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4722, 9), )

    
    NumberOfNonFeaturedArtists = property(__NumberOfNonFeaturedArtists.value, __NumberOfNonFeaturedArtists.set, None, 'The number of NonFeaturedArtists associated with the Video.')

    
    # Element NumberOfContractedArtists uses Python identifier NumberOfContractedArtists
    __NumberOfContractedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists'), 'NumberOfContractedArtists', '__httpddex_netxmlern36_Video_NumberOfContractedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4727, 9), )

    
    NumberOfContractedArtists = property(__NumberOfContractedArtists.value, __NumberOfContractedArtists.set, None, 'The number of ContractedArtists associated with the Video.')

    
    # Element NumberOfNonContractedArtists uses Python identifier NumberOfNonContractedArtists
    __NumberOfNonContractedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists'), 'NumberOfNonContractedArtists', '__httpddex_netxmlern36_Video_NumberOfNonContractedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4732, 9), )

    
    NumberOfNonContractedArtists = property(__NumberOfNonContractedArtists.value, __NumberOfNonContractedArtists.set, None, 'The number of NonContractedArtists associated with the Video.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern36_Video_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4738, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4738, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The Flag indicating whether the Video Element was updated (=True) or not (=False). The Flag may only be used when the UpdateIndicator is set to UpdateMessage. When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided Video data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Video_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4743, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4743, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the Video as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __VideoType.name() : __VideoType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __VideoId.name() : __VideoId,
        __IndirectVideoId.name() : __IndirectVideoId,
        __ResourceReference.name() : __ResourceReference,
        __VideoCueSheetReference.name() : __VideoCueSheetReference,
        __ReasonForCueSheetAbsence.name() : __ReasonForCueSheetAbsence,
        __ReferenceTitle.name() : __ReferenceTitle,
        __Title.name() : __Title,
        __InstrumentationDescription.name() : __InstrumentationDescription,
        __IsMedley.name() : __IsMedley,
        __IsPotpourri.name() : __IsPotpourri,
        __IsInstrumental.name() : __IsInstrumental,
        __IsBackground.name() : __IsBackground,
        __IsHiddenResource.name() : __IsHiddenResource,
        __IsBonusResource.name() : __IsBonusResource,
        __HasPreOrderFulfillment.name() : __HasPreOrderFulfillment,
        __IsRemastered.name() : __IsRemastered,
        __NoSilenceBefore.name() : __NoSilenceBefore,
        __NoSilenceAfter.name() : __NoSilenceAfter,
        __PerformerInformationRequired.name() : __PerformerInformationRequired,
        __LanguageOfPerformance.name() : __LanguageOfPerformance,
        __LanguageOfDubbing.name() : __LanguageOfDubbing,
        __SubTitleLanguage.name() : __SubTitleLanguage,
        __Duration.name() : __Duration,
        __RightsAgreementId.name() : __RightsAgreementId,
        __VideoCollectionReferenceList.name() : __VideoCollectionReferenceList,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __CreationDate.name() : __CreationDate,
        __MasteredDate.name() : __MasteredDate,
        __VideoDetailsByTerritory.name() : __VideoDetailsByTerritory,
        __TerritoryOfCommissioning.name() : __TerritoryOfCommissioning,
        __NumberOfFeaturedArtists.name() : __NumberOfFeaturedArtists,
        __NumberOfNonFeaturedArtists.name() : __NumberOfNonFeaturedArtists,
        __NumberOfContractedArtists.name() : __NumberOfContractedArtists,
        __NumberOfNonContractedArtists.name() : __NumberOfNonContractedArtists
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Video', Video)


# Complex type {http://ddex.net/xml/ern/36}VideoDetailsByTerritory with content type ELEMENT_ONLY
class VideoDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Descriptors and other attributes of a Video which may vary according to Territory of release. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VideoDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4749, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_VideoDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4755, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the SoundRecording details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_VideoDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4760, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the SoundRecording details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_VideoDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4768, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the SoundRecording.')

    
    # Element DisplayArtist uses Python identifier DisplayArtist
    __DisplayArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), 'DisplayArtist', '__httpddex_netxmlern36_VideoDetailsByTerritory_DisplayArtist', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4776, 9), )

    
    DisplayArtist = property(__DisplayArtist.value, __DisplayArtist.set, None, 'A Composite containing details of the DisplayArtist for the SoundRecording. The DisplayArtist may be described through Name, Identifier and Roles.')

    
    # Element DisplayConductor uses Python identifier DisplayConductor
    __DisplayConductor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), 'DisplayConductor', '__httpddex_netxmlern36_VideoDetailsByTerritory_DisplayConductor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4784, 9), )

    
    DisplayConductor = property(__DisplayConductor.value, __DisplayConductor.set, None, 'A Composite containing details of a DisplayConductor for the Video. A DisplayConductor may be described through Name, Identifier and Roles.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern36_VideoDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4792, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A Composite containing details of a Contributor to the Video.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern36_VideoDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4800, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A Composite containing details of an indirect Contributor to the SoundRecording.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_VideoDetailsByTerritory_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4808, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the SoundRecording.')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpddex_netxmlern36_VideoDetailsByTerritory_LabelName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4813, 9), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'A Composite containing the Name of the Label under which the Release is to be marketed.')

    
    # Element RightsController uses Python identifier RightsController
    __RightsController = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsController'), 'RightsController', '__httpddex_netxmlern36_VideoDetailsByTerritory_RightsController', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4821, 9), )

    
    RightsController = property(__RightsController.value, __RightsController.set, None, 'A Composite containing details of RightsController of Rights in the Video.')

    
    # Element RemasteredDate uses Python identifier RemasteredDate
    __RemasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), 'RemasteredDate', '__httpddex_netxmlern36_VideoDetailsByTerritory_RemasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4829, 9), )

    
    RemasteredDate = property(__RemasteredDate.value, __RemasteredDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the SoundRecording was re-mastered (usually digitally).')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern36_VideoDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4834, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the SoundRecording was originally published, whether for physical or electronic/online distribution.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern36_VideoDetailsByTerritory_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4841, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A Composite containing details of the PLine for the SoundRecording.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern36_VideoDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4849, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A Composite containing an Annotation Annotation which acknowledges record companies and/or other Parties giving permission for guests Artists or others featured on the Video.')

    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_VideoDetailsByTerritory_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4854, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the Video in a group of Videos in a Release.')

    
    # Element HostSoundCarrier uses Python identifier HostSoundCarrier
    __HostSoundCarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), 'HostSoundCarrier', '__httpddex_netxmlern36_VideoDetailsByTerritory_HostSoundCarrier', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4859, 9), )

    
    HostSoundCarrier = property(__HostSoundCarrier.value, __HostSoundCarrier.set, None, 'A Composite containing details of a HostSoundCarrier on which the Video appears (e.g., the CD on which it was originally released). This Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of Video information.')

    
    # Element MarketingComment uses Python identifier MarketingComment
    __MarketingComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MarketingComment'), 'MarketingComment', '__httpddex_netxmlern36_VideoDetailsByTerritory_MarketingComment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4867, 9), )

    
    MarketingComment = property(__MarketingComment.value, __MarketingComment.set, None, 'A Composite containing a Comment about the promotion and marketing of the Video.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern36_VideoDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4872, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A Composite containing details of a Genre to which the Video belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern36_VideoDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4880, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A Composite containing details of the classification of the Video according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element AvRating uses Python identifier AvRating
    __AvRating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AvRating'), 'AvRating', '__httpddex_netxmlern36_VideoDetailsByTerritory_AvRating', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4888, 9), )

    
    AvRating = property(__AvRating.value, __AvRating.set, None, 'A Composite containing details of a rating for the Video.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_VideoDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4896, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Composite containing details of a FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern36_VideoDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4901, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A Composite containing details of a Description of the Video containing Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern36_VideoDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4909, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A Composite containing details of a Synopsis of the Video.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern36_VideoDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4914, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A Composite containing details of the CLine for the Video.')

    
    # Element TechnicalVideoDetails uses Python identifier TechnicalVideoDetails
    __TechnicalVideoDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalVideoDetails'), 'TechnicalVideoDetails', '__httpddex_netxmlern36_VideoDetailsByTerritory_TechnicalVideoDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4922, 9), )

    
    TechnicalVideoDetails = property(__TechnicalVideoDetails.value, __TechnicalVideoDetails.set, None, 'A Composite containing technical details of the Video.')

    
    # Element Character uses Python identifier Character
    __Character = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Character'), 'Character', '__httpddex_netxmlern36_VideoDetailsByTerritory_Character', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4930, 9), )

    
    Character = property(__Character.value, __Character.set, None, 'A Composite containing details of a Character in the Video. A Character may be described through Name, Identifier and Roles.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_VideoDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4939, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4939, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the SoundRecordingDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __Title.name() : __Title,
        __DisplayArtist.name() : __DisplayArtist,
        __DisplayConductor.name() : __DisplayConductor,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __RightsAgreementId.name() : __RightsAgreementId,
        __LabelName.name() : __LabelName,
        __RightsController.name() : __RightsController,
        __RemasteredDate.name() : __RemasteredDate,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __PLine.name() : __PLine,
        __CourtesyLine.name() : __CourtesyLine,
        __SequenceNumber.name() : __SequenceNumber,
        __HostSoundCarrier.name() : __HostSoundCarrier,
        __MarketingComment.name() : __MarketingComment,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __AvRating.name() : __AvRating,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __CLine.name() : __CLine,
        __TechnicalVideoDetails.name() : __TechnicalVideoDetails,
        __Character.name() : __Character
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'VideoDetailsByTerritory', VideoDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}WebPolicy with content type ELEMENT_ONLY
class WebPolicy (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Web policy."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WebPolicy')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4945, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Condition uses Python identifier Condition
    __Condition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Condition'), 'Condition', '__httpddex_netxmlern36_WebPolicy_Condition', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4950, 9), )

    
    Condition = property(__Condition.value, __Condition.set, None, 'A Composite containing details of conditions.')

    
    # Element AccessBlockingRequested uses Python identifier AccessBlockingRequested
    __AccessBlockingRequested = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AccessBlockingRequested'), 'AccessBlockingRequested', '__httpddex_netxmlern36_WebPolicy_AccessBlockingRequested', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4956, 12), )

    
    AccessBlockingRequested = property(__AccessBlockingRequested.value, __AccessBlockingRequested.set, None, 'A Flag indicating whether a MessageRecipient shall block all access to the Release (=True) or not (=False).')

    
    # Element AccessLimitation uses Python identifier AccessLimitation
    __AccessLimitation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AccessLimitation'), 'AccessLimitation', '__httpddex_netxmlern36_WebPolicy_AccessLimitation', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4962, 15), )

    
    AccessLimitation = property(__AccessLimitation.value, __AccessLimitation.set, None, 'A Type of limitation on the access of the UgcSite. This governs whether the content of UgcSites is only accessible to members/friends of the site or not.')

    
    # Element EmbeddingAllowed uses Python identifier EmbeddingAllowed
    __EmbeddingAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EmbeddingAllowed'), 'EmbeddingAllowed', '__httpddex_netxmlern36_WebPolicy_EmbeddingAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4967, 15), )

    
    EmbeddingAllowed = property(__EmbeddingAllowed.value, __EmbeddingAllowed.set, None, 'A Flag indicating whether a user is allowed to embed a Release on his website outside the UgcSite (=True) or not (=False).')

    
    # Element UserRatingAllowed uses Python identifier UserRatingAllowed
    __UserRatingAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserRatingAllowed'), 'UserRatingAllowed', '__httpddex_netxmlern36_WebPolicy_UserRatingAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4972, 15), )

    
    UserRatingAllowed = property(__UserRatingAllowed.value, __UserRatingAllowed.set, None, 'A Flag indicating whether a user is allowed to provide a rating for the Release on the UgcSite (=True) or not (=False).')

    
    # Element UserCommentAllowed uses Python identifier UserCommentAllowed
    __UserCommentAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserCommentAllowed'), 'UserCommentAllowed', '__httpddex_netxmlern36_WebPolicy_UserCommentAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4977, 15), )

    
    UserCommentAllowed = property(__UserCommentAllowed.value, __UserCommentAllowed.set, None, 'A Flag indicating whether a user is allowed to provide a Comment for the Release on the UgcSite (=True) or not (=False).')

    
    # Element UserResponsesAllowed uses Python identifier UserResponsesAllowed
    __UserResponsesAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserResponsesAllowed'), 'UserResponsesAllowed', '__httpddex_netxmlern36_WebPolicy_UserResponsesAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4982, 15), )

    
    UserResponsesAllowed = property(__UserResponsesAllowed.value, __UserResponsesAllowed.set, None, 'A Flag indicating whether a user is allowed to provide a response to a Comment for the Release on the UgcSite (=True) or not (=False).')

    
    # Element SyndicationAllowed uses Python identifier SyndicationAllowed
    __SyndicationAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SyndicationAllowed'), 'SyndicationAllowed', '__httpddex_netxmlern36_WebPolicy_SyndicationAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4987, 15), )

    
    SyndicationAllowed = property(__SyndicationAllowed.value, __SyndicationAllowed.set, None, 'A Flag indicating whether syndication is allowed (=True) or not (=False).')

    _ElementMap.update({
        __Condition.name() : __Condition,
        __AccessBlockingRequested.name() : __AccessBlockingRequested,
        __AccessLimitation.name() : __AccessLimitation,
        __EmbeddingAllowed.name() : __EmbeddingAllowed,
        __UserRatingAllowed.name() : __UserRatingAllowed,
        __UserCommentAllowed.name() : __UserCommentAllowed,
        __UserResponsesAllowed.name() : __UserResponsesAllowed,
        __SyndicationAllowed.name() : __SyndicationAllowed
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'WebPolicy', WebPolicy)


# Complex type {http://ddex.net/xml/ern/36}Artist with content type ELEMENT_ONLY
class Artist (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an Artist. An Artist may be described through Name, Identifier and Roles."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Artist')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5040, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_Artist_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5046, 12), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern36_Artist_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5052, 15), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A Composite containing details of the PartyName(s).')

    
    # Element ArtistRole uses Python identifier ArtistRole
    __ArtistRole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ArtistRole'), 'ArtistRole', '__httpddex_netxmlern36_Artist_ArtistRole', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5067, 9), )

    
    ArtistRole = property(__ArtistRole.value, __ArtistRole.set, None, 'A Composite containing details of a role played by the Artist in relation to other Artists.')

    
    # Attribute SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_Artist_SequenceNumber', pyxb.binding.datatypes.integer)
    __SequenceNumber._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5073, 6)
    __SequenceNumber._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5073, 6)
    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the Artist in a group of Artists. This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __ArtistRole.name() : __ArtistRole
    })
    _AttributeMap.update({
        __SequenceNumber.name() : __SequenceNumber
    })
Namespace.addCategoryObject('typeBinding', 'Artist', Artist)


# Complex type {http://ddex.net/xml/ern/36}ArtistDelegatedUsageRights with content type ELEMENT_ONLY
class ArtistDelegatedUsageRights (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of the kinds of usage for which rights have been delegated by an Artist."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ArtistDelegatedUsageRights')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5079, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UseType uses Python identifier UseType
    __UseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UseType'), 'UseType', '__httpddex_netxmlern36_ArtistDelegatedUsageRights_UseType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5084, 9), )

    
    UseType = property(__UseType.value, __UseType.set, None, 'A Composite containing details of the use for which rights are delegated.')

    
    # Element UserInterfaceType uses Python identifier UserInterfaceType
    __UserInterfaceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserInterfaceType'), 'UserInterfaceType', '__httpddex_netxmlern36_ArtistDelegatedUsageRights_UserInterfaceType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5089, 9), )

    
    UserInterfaceType = property(__UserInterfaceType.value, __UserInterfaceType.set, None, 'A Composite containing details of a physical interface by which a Consumer uses a Service or Release.')

    
    # Element PeriodOfRightsDelegation uses Python identifier PeriodOfRightsDelegation
    __PeriodOfRightsDelegation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PeriodOfRightsDelegation'), 'PeriodOfRightsDelegation', '__httpddex_netxmlern36_ArtistDelegatedUsageRights_PeriodOfRightsDelegation', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5097, 9), )

    
    PeriodOfRightsDelegation = property(__PeriodOfRightsDelegation.value, __PeriodOfRightsDelegation.set, None, 'A Composite containing details about a Period of Time for which the delegation of usage rights applies. Periods are typically described by at least a StartDate or EndDate.')

    
    # Element TerritoryOfRightsDelegation uses Python identifier TerritoryOfRightsDelegation
    __TerritoryOfRightsDelegation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryOfRightsDelegation'), 'TerritoryOfRightsDelegation', '__httpddex_netxmlern36_ArtistDelegatedUsageRights_TerritoryOfRightsDelegation', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5102, 9), )

    
    TerritoryOfRightsDelegation = property(__TerritoryOfRightsDelegation.value, __TerritoryOfRightsDelegation.set, None, 'A Territory for which the delegation of usage rights applies (represented by an ISO 3166-1 TerritoryCode).')

    
    # Element MembershipType uses Python identifier MembershipType
    __MembershipType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MembershipType'), 'MembershipType', '__httpddex_netxmlern36_ArtistDelegatedUsageRights_MembershipType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5109, 9), )

    
    MembershipType = property(__MembershipType.value, __MembershipType.set, None, 'A Type of membership of the Artist.')

    _ElementMap.update({
        __UseType.name() : __UseType,
        __UserInterfaceType.name() : __UserInterfaceType,
        __PeriodOfRightsDelegation.name() : __PeriodOfRightsDelegation,
        __TerritoryOfRightsDelegation.name() : __TerritoryOfRightsDelegation,
        __MembershipType.name() : __MembershipType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ArtistDelegatedUsageRights', ArtistDelegatedUsageRights)


# Complex type {http://ddex.net/xml/ern/36}AvRating with content type ELEMENT_ONLY
class AvRating (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a rating for an audio-visual Creation."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AvRating')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5173, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element RatingText uses Python identifier RatingText
    __RatingText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RatingText'), 'RatingText', '__httpddex_netxmlern36_AvRating_RatingText', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5178, 9), )

    
    RatingText = property(__RatingText.value, __RatingText.set, None, 'The text of the AvRating.')

    
    # Element RatingAgency uses Python identifier RatingAgency
    __RatingAgency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RatingAgency'), 'RatingAgency', '__httpddex_netxmlern36_AvRating_RatingAgency', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5183, 9), )

    
    RatingAgency = property(__RatingAgency.value, __RatingAgency.set, None, 'A Composite containing details of an Organization that issues the AvRating.')

    
    # Element RatingSchemeDescription uses Python identifier RatingSchemeDescription
    __RatingSchemeDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RatingSchemeDescription'), 'RatingSchemeDescription', '__httpddex_netxmlern36_AvRating_RatingSchemeDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5188, 9), )

    
    RatingSchemeDescription = property(__RatingSchemeDescription.value, __RatingSchemeDescription.set, None, 'A Composite containing details of a Description of the RatingText.')

    _ElementMap.update({
        __RatingText.name() : __RatingText,
        __RatingAgency.name() : __RatingAgency,
        __RatingSchemeDescription.name() : __RatingSchemeDescription
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'AvRating', AvRating)


# Complex type {http://ddex.net/xml/ern/36}CLine with content type ELEMENT_ONLY
class CLine (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CLine."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CLine')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5212, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Year uses Python identifier Year
    __Year = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Year'), 'Year', '__httpddex_netxmlern36_CLine_Year', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5217, 9), )

    
    Year = property(__Year.value, __Year.set, None, 'The Year of the CLine.')

    
    # Element CLineCompany uses Python identifier CLineCompany
    __CLineCompany = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLineCompany'), 'CLineCompany', '__httpddex_netxmlern36_CLine_CLineCompany', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5222, 9), )

    
    CLineCompany = property(__CLineCompany.value, __CLineCompany.set, None, 'The Name of the company releasing the Creation. This may be an owner or a licensee of the Creation.')

    
    # Element CLineText uses Python identifier CLineText
    __CLineText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLineText'), 'CLineText', '__httpddex_netxmlern36_CLine_CLineText', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5227, 9), )

    
    CLineText = property(__CLineText.value, __CLineText.set, None, 'The text of the CLine.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_CLine_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5233, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5233, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the CLineText as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __Year.name() : __Year,
        __CLineCompany.name() : __CLineCompany,
        __CLineText.name() : __CLineText
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'CLine', CLine)


# Complex type {http://ddex.net/xml/ern/36}CatalogNumber with content type SIMPLE
class CatalogNumber (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CatalogNumber."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CatalogNumber')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5258, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_CatalogNumber_Namespace', pyxb.binding.datatypes.string, required=True)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5264, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5264, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the CatalogNumber. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace
    })
Namespace.addCategoryObject('typeBinding', 'CatalogNumber', CatalogNumber)


# Complex type {http://ddex.net/xml/ern/36}CollectionCollectionReference with content type ELEMENT_ONLY
class CollectionCollectionReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a CollectionCollectionReference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionCollectionReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5272, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_CollectionCollectionReference_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5277, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the Collection in a group of Collections within a Medley, SoundRecording or other Collection.')

    
    # Element CollectionCollectionReference uses Python identifier CollectionCollectionReference
    __CollectionCollectionReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReference'), 'CollectionCollectionReference', '__httpddex_netxmlern36_CollectionCollectionReference_CollectionCollectionReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5282, 9), )

    
    CollectionCollectionReference = property(__CollectionCollectionReference.value, __CollectionCollectionReference.set, None, 'A Reference for a Collection (specific to this Message). This is a LocalCollectionAnchorReference starting with the letter X. The referenced Collection has to be of CollectionType Series, Season or Episode.')

    
    # Element StartTime uses Python identifier StartTime
    __StartTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartTime'), 'StartTime', '__httpddex_netxmlern36_CollectionCollectionReference_StartTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5292, 9), )

    
    StartTime = property(__StartTime.value, __StartTime.set, None, 'The start time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_CollectionCollectionReference_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5297, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the use of the Creation that is referenced in the CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element EndTime uses Python identifier EndTime
    __EndTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EndTime'), 'EndTime', '__httpddex_netxmlern36_CollectionCollectionReference_EndTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5302, 9), )

    
    EndTime = property(__EndTime.value, __EndTime.set, None, 'The end time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element InclusionDate uses Python identifier InclusionDate
    __InclusionDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'InclusionDate'), 'InclusionDate', '__httpddex_netxmlern36_CollectionCollectionReference_InclusionDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5307, 9), )

    
    InclusionDate = property(__InclusionDate.value, __InclusionDate.set, None, 'A Date on which the Collection or Resource was included in the parent Collection.')

    _ElementMap.update({
        __SequenceNumber.name() : __SequenceNumber,
        __CollectionCollectionReference.name() : __CollectionCollectionReference,
        __StartTime.name() : __StartTime,
        __Duration.name() : __Duration,
        __EndTime.name() : __EndTime,
        __InclusionDate.name() : __InclusionDate
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionCollectionReference', CollectionCollectionReference)


# Complex type {http://ddex.net/xml/ern/36}CollectionCollectionReferenceList with content type ELEMENT_ONLY
class CollectionCollectionReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a list of CollectionCollectionReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionCollectionReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5314, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NumberOfCollections uses Python identifier NumberOfCollections
    __NumberOfCollections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfCollections'), 'NumberOfCollections', '__httpddex_netxmlern36_CollectionCollectionReferenceList_NumberOfCollections', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5319, 9), )

    
    NumberOfCollections = property(__NumberOfCollections.value, __NumberOfCollections.set, None, 'The number of referenced Collections (typically Chapters).')

    
    # Element CollectionCollectionReference uses Python identifier CollectionCollectionReference
    __CollectionCollectionReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReference'), 'CollectionCollectionReference', '__httpddex_netxmlern36_CollectionCollectionReferenceList_CollectionCollectionReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5324, 9), )

    
    CollectionCollectionReference = property(__CollectionCollectionReference.value, __CollectionCollectionReference.set, None, 'A Composite containing a CollectionCollectionReference for a Collection (specific to this Message).')

    _ElementMap.update({
        __NumberOfCollections.name() : __NumberOfCollections,
        __CollectionCollectionReference.name() : __CollectionCollectionReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionCollectionReferenceList', CollectionCollectionReferenceList)


# Complex type {http://ddex.net/xml/ern/36}CollectionId with content type ELEMENT_ONLY
class CollectionId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CollectionId."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5333, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element GRid uses Python identifier GRid
    __GRid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GRid'), 'GRid', '__httpddex_netxmlern36_CollectionId_GRid', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5338, 9), )

    
    GRid = property(__GRid.value, __GRid.set, None, "The GRid identifying the Collection. This is the preferred Element and is mandatory if a GRid is available. A GRid comprises four parts: the xs:string 'A1', followed by five alphanumeric characters, ten alphanumeric characters and and one alphanumeric character.")

    
    # Element ISRC uses Python identifier ISRC
    __ISRC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISRC'), 'ISRC', '__httpddex_netxmlern36_CollectionId_ISRC', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5343, 9), )

    
    ISRC = property(__ISRC.value, __ISRC.set, None, 'The ISRC (International Standard Recording Code as defined in  ISO 3901) for the Collection. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. ')

    
    # Element ISAN uses Python identifier ISAN
    __ISAN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISAN'), 'ISAN', '__httpddex_netxmlern36_CollectionId_ISAN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5348, 9), )

    
    ISAN = property(__ISAN.value, __ISAN.set, None, 'The ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the Collection. An ISAN comprises four blocks of four hexadecimal charaters followed by a check character.')

    
    # Element VISAN uses Python identifier VISAN
    __VISAN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VISAN'), 'VISAN', '__httpddex_netxmlern36_CollectionId_VISAN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5353, 9), )

    
    VISAN = property(__VISAN.value, __VISAN.set, None, 'The V-ISAN (Version Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the Collection. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character.')

    
    # Element ICPN uses Python identifier ICPN
    __ICPN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ICPN'), 'ICPN', '__httpddex_netxmlern36_CollectionId_ICPN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5358, 9), )

    
    ICPN = property(__ICPN.value, __ICPN.set, None, 'A Composite containing details of the ICPN used as proxy for identification of the Collection. Only applicable when the Collection is an abstraction of a complete PhysicalProduct. An ICPN comprises 12 or 13 digits, depending whether it is an EAN (13) or a UPC (12).')

    
    # Element CatalogNumber uses Python identifier CatalogNumber
    __CatalogNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogNumber'), 'CatalogNumber', '__httpddex_netxmlern36_CollectionId_CatalogNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5363, 9), )

    
    CatalogNumber = property(__CatalogNumber.value, __CatalogNumber.set, None, 'A Composite containing details of the CatalogNumber of the Collection.')

    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_CollectionId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5368, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the Collection (usually one per society involved in the messaging).')

    
    # Attribute IsReplaced uses Python identifier IsReplaced
    __IsReplaced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsReplaced'), 'IsReplaced', '__httpddex_netxmlern36_CollectionId_IsReplaced', pyxb.binding.datatypes.boolean)
    __IsReplaced._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5377, 6)
    __IsReplaced._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5377, 6)
    
    IsReplaced = property(__IsReplaced.value, __IsReplaced.set, None, 'The Flag indicating whether this Identifier is old and has been replaced by a new one (=True) or not (=False). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one.')

    _ElementMap.update({
        __GRid.name() : __GRid,
        __ISRC.name() : __ISRC,
        __ISAN.name() : __ISAN,
        __VISAN.name() : __VISAN,
        __ICPN.name() : __ICPN,
        __CatalogNumber.name() : __CatalogNumber,
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        __IsReplaced.name() : __IsReplaced
    })
Namespace.addCategoryObject('typeBinding', 'CollectionId', CollectionId)


# Complex type {http://ddex.net/xml/ern/36}Comment with content type SIMPLE
class Comment (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an Comment."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Comment')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5402, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Comment_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5408, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5408, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the Comment as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Comment', Comment)


# Complex type {http://ddex.net/xml/ern/36}ConsumerRentalPeriod with content type SIMPLE
class ConsumerRentalPeriod (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Period a DSP may rent something to a Customer."""
    _TypeDefinition = pyxb.binding.datatypes.duration
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConsumerRentalPeriod')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5435, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.duration
    
    # Attribute IsExtensible uses Python identifier IsExtensible
    __IsExtensible = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsExtensible'), 'IsExtensible', '__httpddex_netxmlern36_ConsumerRentalPeriod_IsExtensible', pyxb.binding.datatypes.boolean)
    __IsExtensible._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5441, 12)
    __IsExtensible._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5441, 12)
    
    IsExtensible = property(__IsExtensible.value, __IsExtensible.set, None, 'A Flag indicating whether a Period can be extended after the end of a Deal (=True) or not (=False). This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __IsExtensible.name() : __IsExtensible
    })
Namespace.addCategoryObject('typeBinding', 'ConsumerRentalPeriod', ConsumerRentalPeriod)


# Complex type {http://ddex.net/xml/ern/36}ContactId with content type ELEMENT_ONLY
class ContactId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of contact Identifiers of a Party."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContactId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5449, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element EmailAddress uses Python identifier EmailAddress
    __EmailAddress = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EmailAddress'), 'EmailAddress', '__httpddex_netxmlern36_ContactId_EmailAddress', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5454, 9), )

    
    EmailAddress = property(__EmailAddress.value, __EmailAddress.set, None, 'An EmailAddress of the Party.')

    
    # Element PhoneNumber uses Python identifier PhoneNumber
    __PhoneNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PhoneNumber'), 'PhoneNumber', '__httpddex_netxmlern36_ContactId_PhoneNumber', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5462, 9), )

    
    PhoneNumber = property(__PhoneNumber.value, __PhoneNumber.set, None, 'A PhoneNumber of the Party.')

    
    # Element FaxNumber uses Python identifier FaxNumber
    __FaxNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FaxNumber'), 'FaxNumber', '__httpddex_netxmlern36_ContactId_FaxNumber', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5470, 9), )

    
    FaxNumber = property(__FaxNumber.value, __FaxNumber.set, None, 'A FaxNumber of the Party.')

    _ElementMap.update({
        __EmailAddress.name() : __EmailAddress,
        __PhoneNumber.name() : __PhoneNumber,
        __FaxNumber.name() : __FaxNumber
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ContactId', ContactId)


# Complex type {http://ddex.net/xml/ern/36}CourtesyLine with content type SIMPLE
class CourtesyLine (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an CourtesyLine."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CourtesyLine')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5499, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_CourtesyLine_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5505, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5505, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the CourtesyLine as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'CourtesyLine', CourtesyLine)


# Complex type {http://ddex.net/xml/ern/36}CreationId with content type ELEMENT_ONLY
class CreationId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CreationIds."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CreationId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5513, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ISWC uses Python identifier ISWC
    __ISWC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISWC'), 'ISWC', '__httpddex_netxmlern36_CreationId_ISWC', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5518, 9), )

    
    ISWC = property(__ISWC.value, __ISWC.set, None, "The ISWC (International Standard Musical Work Code defined in ISO 15707) identifying the MusicalWork. An ISWC comprises three parts: the letter 'T', followed by nine digits and then one check digit.")

    
    # Element OpusNumber uses Python identifier OpusNumber
    __OpusNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OpusNumber'), 'OpusNumber', '__httpddex_netxmlern36_CreationId_OpusNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5523, 9), )

    
    OpusNumber = property(__OpusNumber.value, __OpusNumber.set, None, 'The MusicalWorkId identifying the MusicalWork within the catalog of its Composer (typically of classical music) as an opus number.')

    
    # Element ComposerCatalogNumber uses Python identifier ComposerCatalogNumber
    __ComposerCatalogNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ComposerCatalogNumber'), 'ComposerCatalogNumber', '__httpddex_netxmlern36_CreationId_ComposerCatalogNumber', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5528, 9), )

    
    ComposerCatalogNumber = property(__ComposerCatalogNumber.value, __ComposerCatalogNumber.set, None, "A MusicalWorkId identifying a MusicalWork within the catalog of its Composer (typically of classical music) according to a standardized numbering (e.g. 'K' numbers for Koechel's catalog of Mozart).")

    
    # Element ISRC uses Python identifier ISRC
    __ISRC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISRC'), 'ISRC', '__httpddex_netxmlern36_CreationId_ISRC', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5536, 9), )

    
    ISRC = property(__ISRC.value, __ISRC.set, None, 'The ISRC (International Standard Recording Code as defined in  ISO 3901) for the Resource. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. ')

    
    # Element ISMN uses Python identifier ISMN
    __ISMN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISMN'), 'ISMN', '__httpddex_netxmlern36_CreationId_ISMN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5541, 9), )

    
    ISMN = property(__ISMN.value, __ISMN.set, None, "The ISMN (International Standard Music Number defined in ISO 10957) for the Resource. An ISMN is a thirteen-digit number. Pre-2008 ISMNs, which had 10 characters and are now deprecated, are converted by replacing the initial letter ('M') with '979-0'.")

    
    # Element ISAN uses Python identifier ISAN
    __ISAN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISAN'), 'ISAN', '__httpddex_netxmlern36_CreationId_ISAN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5546, 9), )

    
    ISAN = property(__ISAN.value, __ISAN.set, None, 'The ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the Resource. An ISAN comprises four blocks of four hexadecimal charaters followed by a check character.')

    
    # Element VISAN uses Python identifier VISAN
    __VISAN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VISAN'), 'VISAN', '__httpddex_netxmlern36_CreationId_VISAN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5551, 9), )

    
    VISAN = property(__VISAN.value, __VISAN.set, None, 'The V-ISAN (Version Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the Resource. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character.')

    
    # Element ISBN uses Python identifier ISBN
    __ISBN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISBN'), 'ISBN', '__httpddex_netxmlern36_CreationId_ISBN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5556, 9), )

    
    ISBN = property(__ISBN.value, __ISBN.set, None, "The ISBN (International Standard Book Number defined in ISO 2108) for the Resource. An ISBN is a 13-digit number. Pre-2007, ISBNs, which had 10-digits and are now deprecated, are converted by adding the prefix '978' and re-calculating the check character.")

    
    # Element ISSN uses Python identifier ISSN
    __ISSN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISSN'), 'ISSN', '__httpddex_netxmlern36_CreationId_ISSN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5561, 9), )

    
    ISSN = property(__ISSN.value, __ISSN.set, None, 'The ISSN (International Standard Serial Number defined in ISO 3297) for the Resource. An ISSN comprises two groups of four digits, separated by a hyphen and a control digit.')

    
    # Element SICI uses Python identifier SICI
    __SICI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SICI'), 'SICI', '__httpddex_netxmlern36_CreationId_SICI', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5566, 9), )

    
    SICI = property(__SICI.value, __SICI.set, None, 'The SICI (Serial Item and Contribution Identifier defined in ANSI/NISO Z39.56-199)  for the Resource.')

    
    # Element CatalogNumber uses Python identifier CatalogNumber
    __CatalogNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogNumber'), 'CatalogNumber', '__httpddex_netxmlern36_CreationId_CatalogNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5571, 9), )

    
    CatalogNumber = property(__CatalogNumber.value, __CatalogNumber.set, None, 'A Composite containing details of the CatalogNumber of the Resource.')

    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_CreationId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5576, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the Creation.')

    _ElementMap.update({
        __ISWC.name() : __ISWC,
        __OpusNumber.name() : __OpusNumber,
        __ComposerCatalogNumber.name() : __ComposerCatalogNumber,
        __ISRC.name() : __ISRC,
        __ISMN.name() : __ISMN,
        __ISAN.name() : __ISAN,
        __VISAN.name() : __VISAN,
        __ISBN.name() : __ISBN,
        __ISSN.name() : __ISSN,
        __SICI.name() : __SICI,
        __CatalogNumber.name() : __CatalogNumber,
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CreationId', CreationId)


# Complex type {http://ddex.net/xml/ern/36}CueCreationReference with content type ELEMENT_ONLY
class CueCreationReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a CueCreationReference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CueCreationReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5586, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CueWorkReference uses Python identifier CueWorkReference
    __CueWorkReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueWorkReference'), 'CueWorkReference', '__httpddex_netxmlern36_CueCreationReference_CueWorkReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5592, 12), )

    
    CueWorkReference = property(__CueWorkReference.value, __CueWorkReference.set, None, 'A Reference for a Work (specific to this Message). This is a LocalMusicalWorkAnchorReference starting with the letter W.')

    
    # Element CueResourceReference uses Python identifier CueResourceReference
    __CueResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueResourceReference'), 'CueResourceReference', '__httpddex_netxmlern36_CueCreationReference_CueResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5602, 12), )

    
    CueResourceReference = property(__CueResourceReference.value, __CueResourceReference.set, None, 'A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.')

    _ElementMap.update({
        __CueWorkReference.name() : __CueWorkReference,
        __CueResourceReference.name() : __CueResourceReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CueCreationReference', CueCreationReference)


# Complex type {http://ddex.net/xml/ern/36}DSP with content type ELEMENT_ONLY
class DSP (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a DSP acting as a Licensee in a commercial relationship."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DSP')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5729, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_DSP_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5735, 12), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern36_DSP_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5741, 15), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A Composite containing details of the PartyName(s).')

    
    # Element TradingName uses Python identifier TradingName
    __TradingName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TradingName'), 'TradingName', '__httpddex_netxmlern36_DSP_TradingName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5756, 9), )

    
    TradingName = property(__TradingName.value, __TradingName.set, None, 'A Composite containing a TradingName of the DSP.')

    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'URL'), 'URL', '__httpddex_netxmlern36_DSP_URL', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5761, 9), )

    
    URL = property(__URL.value, __URL.set, None, "A URL for the DSP's web site.")

    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_DSP_TerritoryCode', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5766, 9), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'The Territory from which the DSP operates (represented by an ISO 3166-1 TerritoryCode). This Territory may differ from the one in which SalesTransactions occur.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_DSP_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5772, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5772, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the DSP as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __TradingName.name() : __TradingName,
        __URL.name() : __URL,
        __TerritoryCode.name() : __TerritoryCode
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'DSP', DSP)


# Complex type {http://ddex.net/xml/ern/36}DealReference with content type SIMPLE
class DealReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a DealReference."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DealReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5778, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_DealReference_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5784, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5784, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the DealReference as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'DealReference', DealReference)


# Complex type {http://ddex.net/xml/ern/36}Description with content type SIMPLE
class Description (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an Description."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Description')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5792, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Description_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5798, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5798, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the Description as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Description', Description)


# Complex type {http://ddex.net/xml/ern/36}ExternalResourceLink with content type ELEMENT_ONLY
class ExternalResourceLink (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of promotional or other material in digital form related to a Release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExternalResourceLink')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5941, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'URL'), 'URL', '__httpddex_netxmlern36_ExternalResourceLink_URL', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5946, 9), )

    
    URL = property(__URL.value, __URL.set, None, 'A URL of the linked external Resource.')

    
    # Element ValidityPeriod uses Python identifier ValidityPeriod
    __ValidityPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ValidityPeriod'), 'ValidityPeriod', '__httpddex_netxmlern36_ExternalResourceLink_ValidityPeriod', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5951, 9), )

    
    ValidityPeriod = property(__ValidityPeriod.value, __ValidityPeriod.set, None, 'A Composite containing details about the Period of Time during which the ExternalResourceLink is active.')

    
    # Element ExternalLink uses Python identifier ExternalLink
    __ExternalLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalLink'), 'ExternalLink', '__httpddex_netxmlern36_ExternalResourceLink_ExternalLink', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5956, 9), )

    
    ExternalLink = property(__ExternalLink.value, __ExternalLink.set, None, 'The Identifier which provides a communication link to the related external Resource.')

    
    # Element ExternallyLinkedResourceType uses Python identifier ExternallyLinkedResourceType
    __ExternallyLinkedResourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternallyLinkedResourceType'), 'ExternallyLinkedResourceType', '__httpddex_netxmlern36_ExternalResourceLink_ExternallyLinkedResourceType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5961, 9), )

    
    ExternallyLinkedResourceType = property(__ExternallyLinkedResourceType.value, __ExternallyLinkedResourceType.set, None, 'A Composite containing details of the Type of a Resource pointed to by the ExternalResourceLink.')

    
    # Element FileFormat uses Python identifier FileFormat
    __FileFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileFormat'), 'FileFormat', '__httpddex_netxmlern36_ExternalResourceLink_FileFormat', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5969, 9), )

    
    FileFormat = property(__FileFormat.value, __FileFormat.set, None, 'The FileFormat of the external Resource.')

    _ElementMap.update({
        __URL.name() : __URL,
        __ValidityPeriod.name() : __ValidityPeriod,
        __ExternalLink.name() : __ExternalLink,
        __ExternallyLinkedResourceType.name() : __ExternallyLinkedResourceType,
        __FileFormat.name() : __FileFormat
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ExternalResourceLink', ExternalResourceLink)


# Complex type {http://ddex.net/xml/ern/36}File with content type ELEMENT_ONLY
class File (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a File."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'File')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5995, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FileName uses Python identifier FileName
    __FileName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileName'), 'FileName', '__httpddex_netxmlern36_File_FileName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6002, 15), )

    
    FileName = property(__FileName.value, __FileName.set, None, 'A Name of the File.')

    
    # Element FilePath uses Python identifier FilePath
    __FilePath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FilePath'), 'FilePath', '__httpddex_netxmlern36_File_FilePath', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6007, 15), )

    
    FilePath = property(__FilePath.value, __FilePath.set, None, 'A location of the File.')

    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'URL'), 'URL', '__httpddex_netxmlern36_File_URL', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6013, 12), )

    
    URL = property(__URL.value, __URL.set, None, 'A URL of the File.')

    
    # Element HashSum uses Python identifier HashSum
    __HashSum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HashSum'), 'HashSum', '__httpddex_netxmlern36_File_HashSum', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6019, 9), )

    
    HashSum = property(__HashSum.value, __HashSum.set, None, 'A Composite containing a HashSum of the File and information about the algorithm with which it has been generated.')

    _ElementMap.update({
        __FileName.name() : __FileName,
        __FilePath.name() : __FilePath,
        __URL.name() : __URL,
        __HashSum.name() : __HashSum
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'File', File)


# Complex type {http://ddex.net/xml/ern/36}Fingerprint with content type ELEMENT_ONLY
class Fingerprint (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Fingerprint and its governing algorithm."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Fingerprint')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6026, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern36_Fingerprint_Fingerprint', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6031, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'The value of the Fingerprint.')

    
    # Element FingerprintAlgorithmType uses Python identifier FingerprintAlgorithmType
    __FingerprintAlgorithmType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FingerprintAlgorithmType'), 'FingerprintAlgorithmType', '__httpddex_netxmlern36_Fingerprint_FingerprintAlgorithmType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6036, 9), )

    
    FingerprintAlgorithmType = property(__FingerprintAlgorithmType.value, __FingerprintAlgorithmType.set, None, 'A Composite containing details of the Type of FingerprintAlgorithm governing the Fingerprint.')

    
    # Element FingerprintAlgorithmVersion uses Python identifier FingerprintAlgorithmVersion
    __FingerprintAlgorithmVersion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FingerprintAlgorithmVersion'), 'FingerprintAlgorithmVersion', '__httpddex_netxmlern36_Fingerprint_FingerprintAlgorithmVersion', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6041, 9), )

    
    FingerprintAlgorithmVersion = property(__FingerprintAlgorithmVersion.value, __FingerprintAlgorithmVersion.set, None, 'The Identifier of the Version of the FingerprintAlgorithm.')

    
    # Element FingerprintAlgorithmParameter uses Python identifier FingerprintAlgorithmParameter
    __FingerprintAlgorithmParameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FingerprintAlgorithmParameter'), 'FingerprintAlgorithmParameter', '__httpddex_netxmlern36_Fingerprint_FingerprintAlgorithmParameter', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6046, 9), )

    
    FingerprintAlgorithmParameter = property(__FingerprintAlgorithmParameter.value, __FingerprintAlgorithmParameter.set, None, 'A parameter of the FingerprintAlgorithm.')

    _ElementMap.update({
        __Fingerprint.name() : __Fingerprint,
        __FingerprintAlgorithmType.name() : __FingerprintAlgorithmType,
        __FingerprintAlgorithmVersion.name() : __FingerprintAlgorithmVersion,
        __FingerprintAlgorithmParameter.name() : __FingerprintAlgorithmParameter
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Fingerprint', Fingerprint)


# Complex type {http://ddex.net/xml/ern/36}FulfillmentDate with content type ELEMENT_ONLY
class FulfillmentDate (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a FulfillmentDate."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FulfillmentDate')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6086, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern36_FulfillmentDate_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6091, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A Date after which an end user can receive the Resource (in ISO 8601:2004 format: YYYY-MM-DD). If no FulfillmentDate is provided the FulfillmentDate is the StartDate of the respective Deal. ')

    
    # Element ResourceReleaseReference uses Python identifier ResourceReleaseReference
    __ResourceReleaseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReleaseReference'), 'ResourceReleaseReference', '__httpddex_netxmlern36_FulfillmentDate_ResourceReleaseReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6096, 9), )

    
    ResourceReleaseReference = property(__ResourceReleaseReference.value, __ResourceReleaseReference.set, None, 'The Identifier (specific to the Message) of a Release for a Resource. This is a LocalReleaseAnchorReference starting with the letter R.')

    _ElementMap.update({
        __FulfillmentDate.name() : __FulfillmentDate,
        __ResourceReleaseReference.name() : __ResourceReleaseReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'FulfillmentDate', FulfillmentDate)


# Complex type {http://ddex.net/xml/ern/36}Genre with content type ELEMENT_ONLY
class Genre (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Genre."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Genre')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6108, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element GenreText uses Python identifier GenreText
    __GenreText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GenreText'), 'GenreText', '__httpddex_netxmlern36_Genre_GenreText', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6113, 9), )

    
    GenreText = property(__GenreText.value, __GenreText.set, None, 'A Composite containing a Description of a genre or style (such as Musical, literary or audio-visual) with which a Creation is associated.')

    
    # Element SubGenre uses Python identifier SubGenre
    __SubGenre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SubGenre'), 'SubGenre', '__httpddex_netxmlern36_Genre_SubGenre', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6118, 9), )

    
    SubGenre = property(__SubGenre.value, __SubGenre.set, None, 'A Composite containing a Description of a secondary genre or style with which a Creation is associated.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Genre_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6124, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6124, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the Genre as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __GenreText.name() : __GenreText,
        __SubGenre.name() : __SubGenre
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Genre', Genre)


# Complex type {http://ddex.net/xml/ern/36}HashSum with content type ELEMENT_ONLY
class HashSum (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a HashSum and its governing algorithm."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HashSum')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6149, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element HashSum uses Python identifier HashSum
    __HashSum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HashSum'), 'HashSum', '__httpddex_netxmlern36_HashSum_HashSum', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6154, 9), )

    
    HashSum = property(__HashSum.value, __HashSum.set, None, 'The value of the HashSum.')

    
    # Element HashSumAlgorithmType uses Python identifier HashSumAlgorithmType
    __HashSumAlgorithmType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HashSumAlgorithmType'), 'HashSumAlgorithmType', '__httpddex_netxmlern36_HashSum_HashSumAlgorithmType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6159, 9), )

    
    HashSumAlgorithmType = property(__HashSumAlgorithmType.value, __HashSumAlgorithmType.set, None, 'A Composite containing details of the Type of HashSumAlgorithm governing the HashSum.')

    _ElementMap.update({
        __HashSum.name() : __HashSum,
        __HashSumAlgorithmType.name() : __HashSumAlgorithmType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'HashSum', HashSum)


# Complex type {http://ddex.net/xml/ern/36}HostSoundCarrier with content type ELEMENT_ONLY
class HostSoundCarrier (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a HostSoundCarrier of a SoundRecording. This Composite exists in the Release Notification Message Suite Standard to support the identification and matching of SoundRecording information."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HostSoundCarrier')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6185, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern36_HostSoundCarrier_ReleaseId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6190, 9), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A Composite containing details of ReleaseIds of the HostSoundCarrier. If available, a GRid has to be used. If the HostSoundCarrier contains only one SoundRecording, the ISRC of the SoundRecording may be used instead.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_HostSoundCarrier_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6198, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the HostSoundCarrier.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern36_HostSoundCarrier_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6203, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A Composite containing details of a Title of the HostSoundCarrier.')

    
    # Element DisplayArtist uses Python identifier DisplayArtist
    __DisplayArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), 'DisplayArtist', '__httpddex_netxmlern36_HostSoundCarrier_DisplayArtist', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6211, 9), )

    
    DisplayArtist = property(__DisplayArtist.value, __DisplayArtist.set, None, 'A Composite containing details of the DisplayArtist for the HostSoundCarrier. The DisplayArtist may be described through Name, Identifier and Roles.')

    
    # Element AdministratingRecordCompany uses Python identifier AdministratingRecordCompany
    __AdministratingRecordCompany = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdministratingRecordCompany'), 'AdministratingRecordCompany', '__httpddex_netxmlern36_HostSoundCarrier_AdministratingRecordCompany', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6219, 9), )

    
    AdministratingRecordCompany = property(__AdministratingRecordCompany.value, __AdministratingRecordCompany.set, None, 'A Composite containing details of the AdministratingRecordCompany for the Rights in the HostSoundCarrier.')

    
    # Element TrackNumber uses Python identifier TrackNumber
    __TrackNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TrackNumber'), 'TrackNumber', '__httpddex_netxmlern36_HostSoundCarrier_TrackNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6227, 9), )

    
    TrackNumber = property(__TrackNumber.value, __TrackNumber.set, None, 'The TrackNumber of the SoundRecording within the HostSoundCarrier.')

    
    # Element VolumeNumberInSet uses Python identifier VolumeNumberInSet
    __VolumeNumberInSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VolumeNumberInSet'), 'VolumeNumberInSet', '__httpddex_netxmlern36_HostSoundCarrier_VolumeNumberInSet', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6232, 9), )

    
    VolumeNumberInSet = property(__VolumeNumberInSet.value, __VolumeNumberInSet.set, None, "The SequenceNumber within the Set of the volume containing the SoundRecording, where the HostSoundCarrier is a Set (such as a 'box set' of CDs).")

    _ElementMap.update({
        __ReleaseId.name() : __ReleaseId,
        __RightsAgreementId.name() : __RightsAgreementId,
        __Title.name() : __Title,
        __DisplayArtist.name() : __DisplayArtist,
        __AdministratingRecordCompany.name() : __AdministratingRecordCompany,
        __TrackNumber.name() : __TrackNumber,
        __VolumeNumberInSet.name() : __VolumeNumberInSet
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'HostSoundCarrier', HostSoundCarrier)


# Complex type {http://ddex.net/xml/ern/36}ICPN with content type SIMPLE
class ICPN (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an ICPN."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ICPN')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6239, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute IsEan uses Python identifier IsEan
    __IsEan = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsEan'), 'IsEan', '__httpddex_netxmlern36_ICPN_IsEan', pyxb.binding.datatypes.boolean, required=True)
    __IsEan._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6245, 12)
    __IsEan._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6245, 12)
    
    IsEan = property(__IsEan.value, __IsEan.set, None, 'The Flag indicating whether the ICPN is specifically an EAN (=True) or a UPC (=False). This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __IsEan.name() : __IsEan
    })
Namespace.addCategoryObject('typeBinding', 'ICPN', ICPN)


# Complex type {http://ddex.net/xml/ern/36}ImageId with content type ELEMENT_ONLY
class ImageId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Identifiers of an Image."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImageId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6277, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_ImageId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6282, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the Image.')

    
    # Attribute IsReplaced uses Python identifier IsReplaced
    __IsReplaced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsReplaced'), 'IsReplaced', '__httpddex_netxmlern36_ImageId_IsReplaced', pyxb.binding.datatypes.boolean)
    __IsReplaced._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6288, 6)
    __IsReplaced._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6288, 6)
    
    IsReplaced = property(__IsReplaced.value, __IsReplaced.set, None, 'The Flag indicating whether this Identifier is old and has been replaced by a new one (=True) or not (=False). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one.')

    _ElementMap.update({
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        __IsReplaced.name() : __IsReplaced
    })
Namespace.addCategoryObject('typeBinding', 'ImageId', ImageId)


# Complex type {http://ddex.net/xml/ern/36}IndirectResourceContributor with content type ELEMENT_ONLY
class IndirectResourceContributor (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of the Name, Identifier and role(s) of an indirect Contributor to a Resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'IndirectResourceContributor')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6313, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_IndirectResourceContributor_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6319, 12), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern36_IndirectResourceContributor_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6325, 15), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A Composite containing details of the PartyName(s).')

    
    # Element IndirectResourceContributorRole uses Python identifier IndirectResourceContributorRole
    __IndirectResourceContributorRole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributorRole'), 'IndirectResourceContributorRole', '__httpddex_netxmlern36_IndirectResourceContributor_IndirectResourceContributorRole', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6340, 9), )

    
    IndirectResourceContributorRole = property(__IndirectResourceContributorRole.value, __IndirectResourceContributorRole.set, None, 'A Composite containing details of a role played by the indirect Contributor.')

    
    # Attribute SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_IndirectResourceContributor_SequenceNumber', pyxb.binding.datatypes.integer)
    __SequenceNumber._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6349, 6)
    __SequenceNumber._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6349, 6)
    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the indirect ResourceContributor in a group of ResourceContributors that have contributed to a Resource. This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __IndirectResourceContributorRole.name() : __IndirectResourceContributorRole
    })
    _AttributeMap.update({
        __SequenceNumber.name() : __SequenceNumber
    })
Namespace.addCategoryObject('typeBinding', 'IndirectResourceContributor', IndirectResourceContributor)


# Complex type {http://ddex.net/xml/ern/36}Keywords with content type SIMPLE
class Keywords (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Description containing Keywords."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Keywords')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6355, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Keywords_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6361, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6361, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the Keywords as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Keywords', Keywords)


# Complex type {http://ddex.net/xml/ern/36}LabelName with content type SIMPLE
class LabelName (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a LabelName."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LabelName')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6369, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_LabelName_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6375, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6375, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the LabelName as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute LabelNameType uses Python identifier LabelNameType
    __LabelNameType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LabelNameType'), 'LabelNameType', '__httpddex_netxmlern36_LabelName_LabelNameType', pyxb.binding.datatypes.string)
    __LabelNameType._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6380, 12)
    __LabelNameType._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6380, 12)
    
    LabelNameType = property(__LabelNameType.value, __LabelNameType.set, None, 'A Type of LabelName. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode,
        __LabelNameType.name() : __LabelNameType
    })
Namespace.addCategoryObject('typeBinding', 'LabelName', LabelName)


# Complex type {http://ddex.net/xml/ern/36}Membership with content type ELEMENT_ONLY
class Membership (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a membership in a collective rights management organization."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Membership')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6407, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Organization uses Python identifier Organization
    __Organization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Organization'), 'Organization', '__httpddex_netxmlern36_Membership_Organization', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6412, 9), )

    
    Organization = property(__Organization.value, __Organization.set, None, 'A Composite containing details of the collective rights management organization.')

    
    # Element MembershipType uses Python identifier MembershipType
    __MembershipType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MembershipType'), 'MembershipType', '__httpddex_netxmlern36_Membership_MembershipType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6417, 9), )

    
    MembershipType = property(__MembershipType.value, __MembershipType.set, None, 'A Type of membership.')

    
    # Element StartDate uses Python identifier StartDate
    __StartDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartDate'), 'StartDate', '__httpddex_netxmlern36_Membership_StartDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6422, 9), )

    
    StartDate = property(__StartDate.value, __StartDate.set, None, 'The StartDate of the membership.')

    
    # Element EndDate uses Python identifier EndDate
    __EndDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EndDate'), 'EndDate', '__httpddex_netxmlern36_Membership_EndDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6427, 9), )

    
    EndDate = property(__EndDate.value, __EndDate.set, None, 'The EndDate of the membership.')

    _ElementMap.update({
        __Organization.name() : __Organization,
        __MembershipType.name() : __MembershipType,
        __StartDate.name() : __StartDate,
        __EndDate.name() : __EndDate
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Membership', Membership)


# Complex type {http://ddex.net/xml/ern/36}MessageAuditTrail with content type ELEMENT_ONLY
class MessageAuditTrail (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing information about Parties in between the original MessageSender and ultimate MessageRecipient."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageAuditTrail')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6434, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MessageAuditTrailEvent uses Python identifier MessageAuditTrailEvent
    __MessageAuditTrailEvent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageAuditTrailEvent'), 'MessageAuditTrailEvent', '__httpddex_netxmlern36_MessageAuditTrail_MessageAuditTrailEvent', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6439, 9), )

    
    MessageAuditTrailEvent = property(__MessageAuditTrailEvent.value, __MessageAuditTrailEvent.set, None, 'A Composite containing details of a Party handling the Message and the Time at which the handling took place.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_MessageAuditTrail_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6447, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6447, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the MessageAuditTrail as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __MessageAuditTrailEvent.name() : __MessageAuditTrailEvent
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'MessageAuditTrail', MessageAuditTrail)


# Complex type {http://ddex.net/xml/ern/36}MessageAuditTrailEvent with content type ELEMENT_ONLY
class MessageAuditTrailEvent (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Party handling a Message and the Time at which the handling took place."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageAuditTrailEvent')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6453, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MessagingPartyDescriptor uses Python identifier MessagingPartyDescriptor
    __MessagingPartyDescriptor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessagingPartyDescriptor'), 'MessagingPartyDescriptor', '__httpddex_netxmlern36_MessageAuditTrailEvent_MessagingPartyDescriptor', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6458, 9), )

    
    MessagingPartyDescriptor = property(__MessagingPartyDescriptor.value, __MessagingPartyDescriptor.set, None, 'A Composite containing details of a MessagingParty.')

    
    # Element DateTime uses Python identifier DateTime
    __DateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DateTime'), 'DateTime', '__httpddex_netxmlern36_MessageAuditTrailEvent_DateTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6463, 9), )

    
    DateTime = property(__DateTime.value, __DateTime.set, None, 'The DateTime at which the Message was handled by the MessagingParty (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD).')

    _ElementMap.update({
        __MessagingPartyDescriptor.name() : __MessagingPartyDescriptor,
        __DateTime.name() : __DateTime
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'MessageAuditTrailEvent', MessageAuditTrailEvent)


# Complex type {http://ddex.net/xml/ern/36}MessageHeader with content type ELEMENT_ONLY
class MessageHeader (pyxb.binding.basis.complexTypeDefinition):
    """A Composite placed at the beginning of each DdexMessage providing information about the Message, such as MessageSender, MessageRecipient and a Message creation time stamp."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessageHeader')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6470, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MessageThreadId uses Python identifier MessageThreadId
    __MessageThreadId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageThreadId'), 'MessageThreadId', '__httpddex_netxmlern36_MessageHeader_MessageThreadId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6475, 9), )

    
    MessageThreadId = property(__MessageThreadId.value, __MessageThreadId.set, None, "A xs:string used to uniquely identify the thread of Messages of which the current Message is a part. One example of such a 'thread' is the chain of NewReleaseMessages being sent from ReleaseCreator to wholesale ReleaseDistributor 1 to retail DSP when communicating information about the same Release(s). A common MessageThreadId will allow all these messages to be tied together.")

    
    # Element MessageId uses Python identifier MessageId
    __MessageId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageId'), 'MessageId', '__httpddex_netxmlern36_MessageHeader_MessageId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6480, 9), )

    
    MessageId = property(__MessageId.value, __MessageId.set, None, 'A xs:string used to uniquely identify the current Message.')

    
    # Element MessageFileName uses Python identifier MessageFileName
    __MessageFileName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageFileName'), 'MessageFileName', '__httpddex_netxmlern36_MessageHeader_MessageFileName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6485, 9), )

    
    MessageFileName = property(__MessageFileName.value, __MessageFileName.set, None, 'The FileName, possibly including the FilePath, of the XML File containing the current Message.')

    
    # Element MessageSender uses Python identifier MessageSender
    __MessageSender = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageSender'), 'MessageSender', '__httpddex_netxmlern36_MessageHeader_MessageSender', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6490, 9), )

    
    MessageSender = property(__MessageSender.value, __MessageSender.set, None, 'A Composite containing details of the MessageSender.')

    
    # Element SentOnBehalfOf uses Python identifier SentOnBehalfOf
    __SentOnBehalfOf = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SentOnBehalfOf'), 'SentOnBehalfOf', '__httpddex_netxmlern36_MessageHeader_SentOnBehalfOf', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6495, 9), )

    
    SentOnBehalfOf = property(__SentOnBehalfOf.value, __SentOnBehalfOf.set, None, 'A Composite containing details of the Party on whose behalf the Message is sent.')

    
    # Element MessageRecipient uses Python identifier MessageRecipient
    __MessageRecipient = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageRecipient'), 'MessageRecipient', '__httpddex_netxmlern36_MessageHeader_MessageRecipient', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6500, 9), )

    
    MessageRecipient = property(__MessageRecipient.value, __MessageRecipient.set, None, 'A Composite containing details of the MessageRecipient.')

    
    # Element MessageCreatedDateTime uses Python identifier MessageCreatedDateTime
    __MessageCreatedDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageCreatedDateTime'), 'MessageCreatedDateTime', '__httpddex_netxmlern36_MessageHeader_MessageCreatedDateTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6505, 9), )

    
    MessageCreatedDateTime = property(__MessageCreatedDateTime.value, __MessageCreatedDateTime.set, None, 'The DateTime on which the Message was created (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD).')

    
    # Element MessageAuditTrail uses Python identifier MessageAuditTrail
    __MessageAuditTrail = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageAuditTrail'), 'MessageAuditTrail', '__httpddex_netxmlern36_MessageHeader_MessageAuditTrail', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6510, 9), )

    
    MessageAuditTrail = property(__MessageAuditTrail.value, __MessageAuditTrail.set, None, 'A Composite containing information about Parties in between the original MessageSender and ultimate MessageRecipient.')

    
    # Element Comment uses Python identifier Comment
    __Comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Comment'), 'Comment', '__httpddex_netxmlern36_MessageHeader_Comment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6515, 9), )

    
    Comment = property(__Comment.value, __Comment.set, None, 'A Composite containing a human-readable Comment about the Message.')

    
    # Element MessageControlType uses Python identifier MessageControlType
    __MessageControlType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageControlType'), 'MessageControlType', '__httpddex_netxmlern36_MessageHeader_MessageControlType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6520, 9), )

    
    MessageControlType = property(__MessageControlType.value, __MessageControlType.set, None, 'The indicator used to distinguish a live Message from a test Message.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_MessageHeader_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6528, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6528, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the MessageHeader as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __MessageThreadId.name() : __MessageThreadId,
        __MessageId.name() : __MessageId,
        __MessageFileName.name() : __MessageFileName,
        __MessageSender.name() : __MessageSender,
        __SentOnBehalfOf.name() : __SentOnBehalfOf,
        __MessageRecipient.name() : __MessageRecipient,
        __MessageCreatedDateTime.name() : __MessageCreatedDateTime,
        __MessageAuditTrail.name() : __MessageAuditTrail,
        __Comment.name() : __Comment,
        __MessageControlType.name() : __MessageControlType
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'MessageHeader', MessageHeader)


# Complex type {http://ddex.net/xml/ern/36}MessagingParty with content type ELEMENT_ONLY
class MessagingParty (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a MessagingParty."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MessagingParty')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6534, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_MessagingParty_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6539, 9), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for the Party handling the Message. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern36_MessagingParty_PartyName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6544, 9), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A Composite containing details of the PartyNames for the Party handling the Message.')

    
    # Element TradingName uses Python identifier TradingName
    __TradingName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TradingName'), 'TradingName', '__httpddex_netxmlern36_MessagingParty_TradingName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6549, 9), )

    
    TradingName = property(__TradingName.value, __TradingName.set, None, 'A Composite containing a TradingName for the Party handling the Message.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_MessagingParty_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6555, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6555, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the MessagingParty as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __TradingName.name() : __TradingName
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'MessagingParty', MessagingParty)


# Complex type {http://ddex.net/xml/ern/36}MidiId with content type ELEMENT_ONLY
class MidiId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Identifiers of a Midi."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MidiId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6561, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_MidiId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6566, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the Midi.')

    
    # Attribute IsReplaced uses Python identifier IsReplaced
    __IsReplaced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsReplaced'), 'IsReplaced', '__httpddex_netxmlern36_MidiId_IsReplaced', pyxb.binding.datatypes.boolean)
    __IsReplaced._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6572, 6)
    __IsReplaced._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6572, 6)
    
    IsReplaced = property(__IsReplaced.value, __IsReplaced.set, None, 'The Flag indicating whether this Identifier is old and has been replaced by a new one (=True) or not (=False). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one.')

    _ElementMap.update({
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        __IsReplaced.name() : __IsReplaced
    })
Namespace.addCategoryObject('typeBinding', 'MidiId', MidiId)


# Complex type {http://ddex.net/xml/ern/36}MusicalWork with content type ELEMENT_ONLY
class MusicalWork (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a MusicalWork."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MusicalWork')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6597, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MusicalWorkId uses Python identifier MusicalWorkId
    __MusicalWorkId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MusicalWorkId'), 'MusicalWorkId', '__httpddex_netxmlern36_MusicalWork_MusicalWorkId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6602, 9), )

    
    MusicalWorkId = property(__MusicalWorkId.value, __MusicalWorkId.set, None, 'A Composite containing details of a MusicalWorkId of the MusicalWork.')

    
    # Element MusicalWorkReference uses Python identifier MusicalWorkReference
    __MusicalWorkReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MusicalWorkReference'), 'MusicalWorkReference', '__httpddex_netxmlern36_MusicalWork_MusicalWorkReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6607, 9), )

    
    MusicalWorkReference = property(__MusicalWorkReference.value, __MusicalWorkReference.set, None, 'The Identifier (specific to the Message) of the MusicalWork within the Release which contains it. This is a LocalMusicalWorkAnchor starting with the letter W.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern36_MusicalWork_ReferenceTitle', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6617, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A Composite containing details of a ReferenceTitle of the MusicalWork.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_MusicalWork_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6624, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork.')

    
    # Element MusicalWorkContributor uses Python identifier MusicalWorkContributor
    __MusicalWorkContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MusicalWorkContributor'), 'MusicalWorkContributor', '__httpddex_netxmlern36_MusicalWork_MusicalWorkContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6629, 9), )

    
    MusicalWorkContributor = property(__MusicalWorkContributor.value, __MusicalWorkContributor.set, None, 'A Composite containing details a MusicalWorkContributor to the MusicalWork.')

    
    # Element MusicalWorkType uses Python identifier MusicalWorkType
    __MusicalWorkType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MusicalWorkType'), 'MusicalWorkType', '__httpddex_netxmlern36_MusicalWork_MusicalWorkType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6636, 9), )

    
    MusicalWorkType = property(__MusicalWorkType.value, __MusicalWorkType.set, None, 'A Composite containing details of the Type of the MusicalWork.')

    
    # Element RightShare uses Python identifier RightShare
    __RightShare = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightShare'), 'RightShare', '__httpddex_netxmlern36_MusicalWork_RightShare', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6644, 9), )

    
    RightShare = property(__RightShare.value, __RightShare.set, None, 'A Composite containing details of a RightShare for the MusicalWork.')

    
    # Element MusicalWorkDetailsByTerritory uses Python identifier MusicalWorkDetailsByTerritory
    __MusicalWorkDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MusicalWorkDetailsByTerritory'), 'MusicalWorkDetailsByTerritory', '__httpddex_netxmlern36_MusicalWork_MusicalWorkDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6652, 9), )

    
    MusicalWorkDetailsByTerritory = property(__MusicalWorkDetailsByTerritory.value, __MusicalWorkDetailsByTerritory.set, None, 'A Composite containing details of Descriptors and other attributes of the MusicalWork which may vary according to Territory of release. ')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern36_MusicalWork_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6661, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6661, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The Flag indicating whether the MusicalWork Element was updated (=True) or not (=False). The Flag may only be used when the UpdateIndicator is set to UpdateMessage. When this Boolean Flag is set to true, the MessageRecipient is expected to replace any previously provided MusicalWork data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_MusicalWork_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6666, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6666, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the MusicalWork as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __MusicalWorkId.name() : __MusicalWorkId,
        __MusicalWorkReference.name() : __MusicalWorkReference,
        __ReferenceTitle.name() : __ReferenceTitle,
        __RightsAgreementId.name() : __RightsAgreementId,
        __MusicalWorkContributor.name() : __MusicalWorkContributor,
        __MusicalWorkType.name() : __MusicalWorkType,
        __RightShare.name() : __RightShare,
        __MusicalWorkDetailsByTerritory.name() : __MusicalWorkDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'MusicalWork', MusicalWork)


# Complex type {http://ddex.net/xml/ern/36}MusicalWorkContributor with content type ELEMENT_ONLY
class MusicalWorkContributor (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details a MusicalWorkContributor."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MusicalWorkContributor')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6672, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_MusicalWorkContributor_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6678, 12), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern36_MusicalWorkContributor_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6684, 15), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A Composite containing details of the PartyName(s).')

    
    # Element MusicalWorkContributorRole uses Python identifier MusicalWorkContributorRole
    __MusicalWorkContributorRole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MusicalWorkContributorRole'), 'MusicalWorkContributorRole', '__httpddex_netxmlern36_MusicalWorkContributor_MusicalWorkContributorRole', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6699, 9), )

    
    MusicalWorkContributorRole = property(__MusicalWorkContributorRole.value, __MusicalWorkContributorRole.set, None, "A Composite containing details of a role played by the Contributor in relation to the MusicalWork. Note: This can be used in a DdexMessage in relation to any Work, Performance or Fixation any of which may form the whole or part of the Resource itself. Example: if an 'AssociatedPerformer' is shown as a Contributor to a MusicalWork it refers to a performer of a Resource (e.g. a SoundRecording) expressing the MusicalWork.")

    
    # Element SocietyAffiliation uses Python identifier SocietyAffiliation
    __SocietyAffiliation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SocietyAffiliation'), 'SocietyAffiliation', '__httpddex_netxmlern36_MusicalWorkContributor_SocietyAffiliation', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6707, 9), )

    
    SocietyAffiliation = property(__SocietyAffiliation.value, __SocietyAffiliation.set, None, 'A Composite containing details of a society affiliation for the MusicalWorkContributor.')

    
    # Attribute SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_MusicalWorkContributor_SequenceNumber', pyxb.binding.datatypes.integer)
    __SequenceNumber._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6716, 6)
    __SequenceNumber._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6716, 6)
    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the MusicalWorkContributor in a group of MusicalWorkContributors that have contributed to a MusicalWork. This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __MusicalWorkContributorRole.name() : __MusicalWorkContributorRole,
        __SocietyAffiliation.name() : __SocietyAffiliation
    })
    _AttributeMap.update({
        __SequenceNumber.name() : __SequenceNumber
    })
Namespace.addCategoryObject('typeBinding', 'MusicalWorkContributor', MusicalWorkContributor)


# Complex type {http://ddex.net/xml/ern/36}MusicalWorkDetailsByTerritory with content type ELEMENT_ONLY
class MusicalWorkDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Descriptors and other attributes of a MusicalWork which may vary according to Territory of release. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MusicalWorkDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6741, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_MusicalWorkDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6747, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the MusicalWork details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_MusicalWorkDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6752, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the MusicalWork details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element MusicalWorkContributor uses Python identifier MusicalWorkContributor
    __MusicalWorkContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MusicalWorkContributor'), 'MusicalWorkContributor', '__httpddex_netxmlern36_MusicalWorkDetailsByTerritory_MusicalWorkContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6760, 9), )

    
    MusicalWorkContributor = property(__MusicalWorkContributor.value, __MusicalWorkContributor.set, None, 'A Composite containing details a MusicalWorkContributor to the MusicalWork.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_MusicalWorkDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6768, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6768, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the MusicalWorkDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __MusicalWorkContributor.name() : __MusicalWorkContributor
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'MusicalWorkDetailsByTerritory', MusicalWorkDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}MusicalWorkId with content type ELEMENT_ONLY
class MusicalWorkId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a MusicalWorkId."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MusicalWorkId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6774, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ISWC uses Python identifier ISWC
    __ISWC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISWC'), 'ISWC', '__httpddex_netxmlern36_MusicalWorkId_ISWC', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6779, 9), )

    
    ISWC = property(__ISWC.value, __ISWC.set, None, "The ISWC (International Standard Musical Work Code defined in ISO 15707) identifying the MusicalWork. An ISWC comprises three parts: the letter 'T', followed by nine digits and then one check digit.")

    
    # Element OpusNumber uses Python identifier OpusNumber
    __OpusNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OpusNumber'), 'OpusNumber', '__httpddex_netxmlern36_MusicalWorkId_OpusNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6784, 9), )

    
    OpusNumber = property(__OpusNumber.value, __OpusNumber.set, None, 'The MusicalWorkId identifying the MusicalWork within the catalog of its Composer (typically of classical music) as an opus number.')

    
    # Element ComposerCatalogNumber uses Python identifier ComposerCatalogNumber
    __ComposerCatalogNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ComposerCatalogNumber'), 'ComposerCatalogNumber', '__httpddex_netxmlern36_MusicalWorkId_ComposerCatalogNumber', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6789, 9), )

    
    ComposerCatalogNumber = property(__ComposerCatalogNumber.value, __ComposerCatalogNumber.set, None, "A MusicalWorkId identifying a MusicalWork within the catalog of its Composer (typically of classical music) according to a standardized numbering (e.g. 'K' numbers for Koechel's catalog of Mozart).")

    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_MusicalWorkId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6797, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the MusicalWork.')

    
    # Attribute IsReplaced uses Python identifier IsReplaced
    __IsReplaced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsReplaced'), 'IsReplaced', '__httpddex_netxmlern36_MusicalWorkId_IsReplaced', pyxb.binding.datatypes.boolean)
    __IsReplaced._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6806, 6)
    __IsReplaced._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6806, 6)
    
    IsReplaced = property(__IsReplaced.value, __IsReplaced.set, None, 'The Flag indicating whether this Identifier is old and has been replaced by a new one (=True) or not (=False). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one.')

    _ElementMap.update({
        __ISWC.name() : __ISWC,
        __OpusNumber.name() : __OpusNumber,
        __ComposerCatalogNumber.name() : __ComposerCatalogNumber,
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        __IsReplaced.name() : __IsReplaced
    })
Namespace.addCategoryObject('typeBinding', 'MusicalWorkId', MusicalWorkId)


# Complex type {http://ddex.net/xml/ern/36}Name with content type SIMPLE
class Name (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Name."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Name')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6831, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Name_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6837, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6837, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the Name as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Name', Name)


# Complex type {http://ddex.net/xml/ern/36}PartyDescriptor with content type ELEMENT_ONLY
class PartyDescriptor (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Party. Parties are typically described through Names and/or Identifiers."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PartyDescriptor')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6920, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_PartyDescriptor_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6925, 9), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern36_PartyDescriptor_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6931, 12), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A Composite containing details of the PartyName(s).')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PartyDescriptor', PartyDescriptor)


# Complex type {http://ddex.net/xml/ern/36}PartyId with content type SIMPLE
class PartyId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a PartyId. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PartyId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6947, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_PartyId_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6953, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6953, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the PartyId if it belongs to a proprietary Party xs:ID scheme. If the PartyId is a DPID, the Namespace Element must not be used. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute IsDPID uses Python identifier IsDPID
    __IsDPID = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsDPID'), 'IsDPID', '__httpddex_netxmlern36_PartyId_IsDPID', pyxb.binding.datatypes.boolean)
    __IsDPID._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6958, 12)
    __IsDPID._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6958, 12)
    
    IsDPID = property(__IsDPID.value, __IsDPID.set, None, 'The Flag indicating whether the PartyId is a DPID (=True) or not (=False). This is represented in an XML schema as an XML Attribute.')

    
    # Attribute IsISNI uses Python identifier IsISNI
    __IsISNI = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsISNI'), 'IsISNI', '__httpddex_netxmlern36_PartyId_IsISNI', pyxb.binding.datatypes.boolean)
    __IsISNI._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6963, 12)
    __IsISNI._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6963, 12)
    
    IsISNI = property(__IsISNI.value, __IsISNI.set, None, 'The Flag indicating whether the PartyId is an ISNI (=True) or not (=False). This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __IsDPID.name() : __IsDPID,
        __IsISNI.name() : __IsISNI
    })
Namespace.addCategoryObject('typeBinding', 'PartyId', PartyId)


# Complex type {http://ddex.net/xml/ern/36}PartyName with content type ELEMENT_ONLY
class PartyName (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a PartyName. Name details for a Party typically either contain a FullName or a KeyName."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PartyName')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6971, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FullName uses Python identifier FullName
    __FullName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FullName'), 'FullName', '__httpddex_netxmlern36_PartyName_FullName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6976, 9), )

    
    FullName = property(__FullName.value, __FullName.set, None, 'A Composite containing the complete Name of the Party, in its normal form of presentation (e.g. John H. Smith, Acme Music Inc, A Composite containing the Beatles).')

    
    # Element FullNameAsciiTranscribed uses Python identifier FullNameAsciiTranscribed
    __FullNameAsciiTranscribed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FullNameAsciiTranscribed'), 'FullNameAsciiTranscribed', '__httpddex_netxmlern36_PartyName_FullNameAsciiTranscribed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6981, 9), )

    
    FullNameAsciiTranscribed = property(__FullNameAsciiTranscribed.value, __FullNameAsciiTranscribed.set, None, 'The FullName transcribed using 7-bit ASCII code.')

    
    # Element FullNameIndexed uses Python identifier FullNameIndexed
    __FullNameIndexed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FullNameIndexed'), 'FullNameIndexed', '__httpddex_netxmlern36_PartyName_FullNameIndexed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6986, 9), )

    
    FullNameIndexed = property(__FullNameIndexed.value, __FullNameIndexed.set, None, 'A Composite containing the complete Name of the Party in the form in which it normally appears in an alphabetic index, with the KeyName first (e.g. Smith, John H.; Beatles, A Composite containing the).')

    
    # Element NamesBeforeKeyName uses Python identifier NamesBeforeKeyName
    __NamesBeforeKeyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NamesBeforeKeyName'), 'NamesBeforeKeyName', '__httpddex_netxmlern36_PartyName_NamesBeforeKeyName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6991, 9), )

    
    NamesBeforeKeyName = property(__NamesBeforeKeyName.value, __NamesBeforeKeyName.set, None, "A Composite containing the Name(s) preceding the KeyName in the FullName (and that is placed after it in a FullNameIndexed). Examples: 'George' in 'George Michael'; 'John Fitzgerald' in 'John Fitzgerald Kennedy'. Not all PartyNames have a NamesBeforeKeyName (e.g. Madonna, EMI Music Inc).")

    
    # Element KeyName uses Python identifier KeyName
    __KeyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'KeyName'), 'KeyName', '__httpddex_netxmlern36_PartyName_KeyName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6996, 9), )

    
    KeyName = property(__KeyName.value, __KeyName.set, None, "A Composite containing the Part of a Name of the Party normally used to index an entry in an alphabetical list, such as 'Smith' (in John Smith) or 'Garcia Marquez' or 'Madonna' or 'Francis de Sales' (in Saint Francis de Sales). For persons, this normally corresponds to the 'family name' or names, which in Western name forms usually comes as a surname at the end of a FullName, and in Asian name forms often at the beginning of a FullName. ")

    
    # Element NamesAfterKeyName uses Python identifier NamesAfterKeyName
    __NamesAfterKeyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NamesAfterKeyName'), 'NamesAfterKeyName', '__httpddex_netxmlern36_PartyName_NamesAfterKeyName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7001, 9), )

    
    NamesAfterKeyName = property(__NamesAfterKeyName.value, __NamesAfterKeyName.set, None, "A Composite containing the Name(s) following the KeyName. Example:'Ibrahim' (in Anwar Ibrahim). This is common, e.g., in many Asian personal name forms where a FullName begins with the KeyName, which is followed by other names.")

    
    # Element AbbreviatedName uses Python identifier AbbreviatedName
    __AbbreviatedName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AbbreviatedName'), 'AbbreviatedName', '__httpddex_netxmlern36_PartyName_AbbreviatedName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7006, 9), )

    
    AbbreviatedName = property(__AbbreviatedName.value, __AbbreviatedName.set, None, 'A Composite containing a short version of the PartyName (e.g. for use on devices with a small display).')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_PartyName_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7012, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7012, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the PartyName as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __FullName.name() : __FullName,
        __FullNameAsciiTranscribed.name() : __FullNameAsciiTranscribed,
        __FullNameIndexed.name() : __FullNameIndexed,
        __NamesBeforeKeyName.name() : __NamesBeforeKeyName,
        __KeyName.name() : __KeyName,
        __NamesAfterKeyName.name() : __NamesAfterKeyName,
        __AbbreviatedName.name() : __AbbreviatedName
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'PartyName', PartyName)


# Complex type {http://ddex.net/xml/ern/36}Period with content type ELEMENT_ONLY
class Period (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details about a Period of Time. Periods are typically describedby at least a StartDate or EndDate (or StartDateTime or EndDateTime) where the StartDate(Time) and EndDate(Time) are included in the Period. Thus a one-day period can be described by using the same date in the StartDate and EndDate."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Period')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7018, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element StartDate uses Python identifier StartDate
    __StartDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartDate'), 'StartDate', '__httpddex_netxmlern36_Period_StartDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7024, 12), )

    
    StartDate = property(__StartDate.value, __StartDate.set, None, 'A Composite containing details of the Date and Place of an Event that marks the beginning of the Period (in ISO 8601:2004 format: YYYY-MM-DD). The StartDate must be earlier than the EndDate if both are provided.')

    
    # Element EndDate uses Python identifier EndDate
    __EndDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EndDate'), 'EndDate', '__httpddex_netxmlern36_Period_EndDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7029, 12), )

    
    EndDate = property(__EndDate.value, __EndDate.set, None, 'A Composite containing details of the Date and Place of an Event that marks the end of the Period (in ISO 8601:2004 format: YYYY-MM-DD). The EndDate must not be earlier than the StartDate if both are provided.')

    
    # Element StartDateTime uses Python identifier StartDateTime
    __StartDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartDateTime'), 'StartDateTime', '__httpddex_netxmlern36_Period_StartDateTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7036, 12), )

    
    StartDateTime = property(__StartDateTime.value, __StartDateTime.set, None, 'A Composite containing details of the DateTime and Place of an Event that marks the beginning of the Period (in ISO 8601:2004 format: YYYY-DD-MMThh:mm:ss). The StartDateTime must be earlier than the EndDateTime if both are provided.')

    
    # Element EndDateTime uses Python identifier EndDateTime
    __EndDateTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EndDateTime'), 'EndDateTime', '__httpddex_netxmlern36_Period_EndDateTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7041, 12), )

    
    EndDateTime = property(__EndDateTime.value, __EndDateTime.set, None, 'A Composite containing details of the DateTime and Place of an Event that marks the end of the Period (in ISO 8601:2004 format: YYYY-DD-MMThh:mm:ss). The EndDateTime must not be earlier than the StartDateTime if both are provided.')

    _ElementMap.update({
        __StartDate.name() : __StartDate,
        __EndDate.name() : __EndDate,
        __StartDateTime.name() : __StartDateTime,
        __EndDateTime.name() : __EndDateTime
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Period', Period)


# Complex type {http://ddex.net/xml/ern/36}PromotionalCode with content type SIMPLE
class PromotionalCode (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a PromotionalCode."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PromotionalCode')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7091, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_PromotionalCode_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7097, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7097, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the PromotionalCode. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace
    })
Namespace.addCategoryObject('typeBinding', 'PromotionalCode', PromotionalCode)


# Complex type {http://ddex.net/xml/ern/36}ProprietaryId with content type SIMPLE
class ProprietaryId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ProprietaryIdentifier."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProprietaryId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7105, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ProprietaryId_Namespace', pyxb.binding.datatypes.string, required=True)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7111, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7111, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ProprietaryId. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace
    })
Namespace.addCategoryObject('typeBinding', 'ProprietaryId', ProprietaryId)


# Complex type {http://ddex.net/xml/ern/36}Reason with content type SIMPLE
class Reason (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Reason."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Reason')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7157, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Reason_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7163, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7163, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the Reason as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Reason', Reason)


# Complex type {http://ddex.net/xml/ern/36}ReferenceTitle with content type ELEMENT_ONLY
class ReferenceTitle (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ReferenceTitle."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReferenceTitle')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7190, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TitleText uses Python identifier TitleText
    __TitleText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TitleText'), 'TitleText', '__httpddex_netxmlern36_ReferenceTitle_TitleText', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7195, 9), )

    
    TitleText = property(__TitleText.value, __TitleText.set, None, 'A Composite containing the text of the ReferenceTitle.')

    
    # Element SubTitle uses Python identifier SubTitle
    __SubTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SubTitle'), 'SubTitle', '__httpddex_netxmlern36_ReferenceTitle_SubTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7200, 9), )

    
    SubTitle = property(__SubTitle.value, __SubTitle.set, None, 'A Composite containing details of a SubTitle of the ReferenceTitle, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets (where the SubTitle is called Version Title).')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_ReferenceTitle_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7206, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7206, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the ReferenceTitle as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TitleText.name() : __TitleText,
        __SubTitle.name() : __SubTitle
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ReferenceTitle', ReferenceTitle)


# Complex type {http://ddex.net/xml/ern/36}RelatedRelease with content type ELEMENT_ONLY
class RelatedRelease (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Release (or a PhysicalProduct or a DigitalProduct derived from such a Release) which is related to a Resource, Release or Product."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RelatedRelease')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7212, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern36_RelatedRelease_ReleaseId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7217, 9), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A Composite containing details of ReleaseIds. If available, a GRid shall always to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead. More than one of these identifiers may be provided.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern36_RelatedRelease_ReferenceTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7222, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A Composite containing details of the ReferenceTitle of the Release.')

    
    # Element ReleaseSummaryDetailsByTerritory uses Python identifier ReleaseSummaryDetailsByTerritory
    __ReleaseSummaryDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseSummaryDetailsByTerritory'), 'ReleaseSummaryDetailsByTerritory', '__httpddex_netxmlern36_RelatedRelease_ReleaseSummaryDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7227, 9), )

    
    ReleaseSummaryDetailsByTerritory = property(__ReleaseSummaryDetailsByTerritory.value, __ReleaseSummaryDetailsByTerritory.set, None, 'A Composite containing summary details of Descriptors and other attributes of the Release which may vary according to Territory of Release. Territory of Release may be the world.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_RelatedRelease_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7235, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release.')

    
    # Element ReleaseRelationshipType uses Python identifier ReleaseRelationshipType
    __ReleaseRelationshipType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseRelationshipType'), 'ReleaseRelationshipType', '__httpddex_netxmlern36_RelatedRelease_ReleaseRelationshipType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7240, 9), )

    
    ReleaseRelationshipType = property(__ReleaseRelationshipType.value, __ReleaseRelationshipType.set, None, 'A Composite containing details of the Type of the relationship between the two Releases.')

    
    # Element ReleaseDate uses Python identifier ReleaseDate
    __ReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDate'), 'ReleaseDate', '__httpddex_netxmlern36_RelatedRelease_ReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7245, 9), )

    
    ReleaseDate = property(__ReleaseDate.value, __ReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the related Release was or will be first made available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element OriginalReleaseDate uses Python identifier OriginalReleaseDate
    __OriginalReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate'), 'OriginalReleaseDate', '__httpddex_netxmlern36_RelatedRelease_OriginalReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7250, 9), )

    
    OriginalReleaseDate = property(__OriginalReleaseDate.value, __OriginalReleaseDate.set, None, 'A Composite containing details of the Date and Place of the Event in which the collection of tracks for the Release (e.g. the equivalent physical album on vinyl) was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_RelatedRelease_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7256, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7256, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the ReleatedRelease as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __ReleaseId.name() : __ReleaseId,
        __ReferenceTitle.name() : __ReferenceTitle,
        __ReleaseSummaryDetailsByTerritory.name() : __ReleaseSummaryDetailsByTerritory,
        __RightsAgreementId.name() : __RightsAgreementId,
        __ReleaseRelationshipType.name() : __ReleaseRelationshipType,
        __ReleaseDate.name() : __ReleaseDate,
        __OriginalReleaseDate.name() : __OriginalReleaseDate
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'RelatedRelease', RelatedRelease)


# Complex type {http://ddex.net/xml/ern/36}ReleaseCollectionReferenceList with content type ELEMENT_ONLY
class ReleaseCollectionReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a list of ReleaseCollectionReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseCollectionReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7276, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NumberOfCollections uses Python identifier NumberOfCollections
    __NumberOfCollections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfCollections'), 'NumberOfCollections', '__httpddex_netxmlern36_ReleaseCollectionReferenceList_NumberOfCollections', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7281, 9), )

    
    NumberOfCollections = property(__NumberOfCollections.value, __NumberOfCollections.set, None, 'The number of referenced Collections (typically Chapters).')

    
    # Element ReleaseCollectionReference uses Python identifier ReleaseCollectionReference
    __ReleaseCollectionReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseCollectionReference'), 'ReleaseCollectionReference', '__httpddex_netxmlern36_ReleaseCollectionReferenceList_ReleaseCollectionReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7286, 9), )

    
    ReleaseCollectionReference = property(__ReleaseCollectionReference.value, __ReleaseCollectionReference.set, None, 'A Composite containing a ReleaseCollectionReference for a Collection (specific to this Message). The referenced Collection has to be of CollectionType Series, Season or Episode.')

    _ElementMap.update({
        __NumberOfCollections.name() : __NumberOfCollections,
        __ReleaseCollectionReference.name() : __ReleaseCollectionReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseCollectionReferenceList', ReleaseCollectionReferenceList)


# Complex type {http://ddex.net/xml/ern/36}ReleaseId with content type ELEMENT_ONLY
class ReleaseId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ReleaseId. If available, a GRid should always to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7295, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element GRid uses Python identifier GRid
    __GRid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GRid'), 'GRid', '__httpddex_netxmlern36_ReleaseId_GRid', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7300, 9), )

    
    GRid = property(__GRid.value, __GRid.set, None, "The GRid identifying the Release. This is the preferred Element and is mandatory if a GRid is available. A GRid comprises four parts: the xs:string 'A1', followed by five alphanumeric characters, ten alphanumeric characters and and one alphanumeric character.")

    
    # Element ISRC uses Python identifier ISRC
    __ISRC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISRC'), 'ISRC', '__httpddex_netxmlern36_ReleaseId_ISRC', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7305, 9), )

    
    ISRC = property(__ISRC.value, __ISRC.set, None, 'The ISRC (International Standard Recording Code as defined in  ISO 3901) used as proxy for identification of the Release. Only applicable when the Release only contains one SoundRecording or one MusicalWorkVideo. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. ')

    
    # Element ICPN uses Python identifier ICPN
    __ICPN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ICPN'), 'ICPN', '__httpddex_netxmlern36_ReleaseId_ICPN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7310, 9), )

    
    ICPN = property(__ICPN.value, __ICPN.set, None, 'A Composite containing details of the ICPN used as proxy for identification of the Release. Only applicable when the Release is an abstraction of a complete PhysicalProduct. An ICPN comprises 12 or 13 digits, depending whether it is an EAN (13) or a UPC (12).')

    
    # Element CatalogNumber uses Python identifier CatalogNumber
    __CatalogNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogNumber'), 'CatalogNumber', '__httpddex_netxmlern36_ReleaseId_CatalogNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7315, 9), )

    
    CatalogNumber = property(__CatalogNumber.value, __CatalogNumber.set, None, 'A Composite containing details of the CatalogNumber of the Release.')

    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_ReleaseId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7320, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the Release.')

    
    # Attribute IsReplaced uses Python identifier IsReplaced
    __IsReplaced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsReplaced'), 'IsReplaced', '__httpddex_netxmlern36_ReleaseId_IsReplaced', pyxb.binding.datatypes.boolean)
    __IsReplaced._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7329, 6)
    __IsReplaced._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7329, 6)
    
    IsReplaced = property(__IsReplaced.value, __IsReplaced.set, None, 'The Flag indicating whether this Identifier is old and has been replaced by a new one (=True) or not (=False). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one.')

    _ElementMap.update({
        __GRid.name() : __GRid,
        __ISRC.name() : __ISRC,
        __ICPN.name() : __ICPN,
        __CatalogNumber.name() : __CatalogNumber,
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        __IsReplaced.name() : __IsReplaced
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseId', ReleaseId)


# Complex type {http://ddex.net/xml/ern/36}ReleaseResourceReferenceList with content type ELEMENT_ONLY
class ReleaseResourceReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a list of ReleaseResourceReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseResourceReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7368, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReleaseResourceReference uses Python identifier ReleaseResourceReference
    __ReleaseResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReference'), 'ReleaseResourceReference', '__httpddex_netxmlern36_ReleaseResourceReferenceList_ReleaseResourceReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7373, 9), )

    
    ReleaseResourceReference = property(__ReleaseResourceReference.value, __ReleaseResourceReference.set, None, 'A Composite containing a Reference for a Resource (specific to this Message). The LocalAnchorReference in this Composite is a xs:string starting with the letter A.')

    _ElementMap.update({
        __ReleaseResourceReference.name() : __ReleaseResourceReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseResourceReferenceList', ReleaseResourceReferenceList)


# Complex type {http://ddex.net/xml/ern/36}ReleaseSummaryDetailsByTerritory with content type ELEMENT_ONLY
class ReleaseSummaryDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing summary details of Descriptors and other attributes of a Release which may vary according to Territory of Release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseSummaryDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7382, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_ReleaseSummaryDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7388, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the ReleaseSummaryDetailsByTerritory apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_ReleaseSummaryDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7393, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the ReleaseSummaryDetailsByTerritory do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element DisplayArtistName uses Python identifier DisplayArtistName
    __DisplayArtistName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtistName'), 'DisplayArtistName', '__httpddex_netxmlern36_ReleaseSummaryDetailsByTerritory_DisplayArtistName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7401, 9), )

    
    DisplayArtistName = property(__DisplayArtistName.value, __DisplayArtistName.set, None, 'A Composite containing the Name to be used by a DSP when presenting Artist details of the Release to a Consumer.')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpddex_netxmlern36_ReleaseSummaryDetailsByTerritory_LabelName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7409, 9), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'A Composite containing the Name of the Label for the Release.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern36_ReleaseSummaryDetailsByTerritory_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7417, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_ReleaseSummaryDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7423, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7423, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the ReleaseSummaryDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __DisplayArtistName.name() : __DisplayArtistName,
        __LabelName.name() : __LabelName,
        __RightsAgreementId.name() : __RightsAgreementId
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseSummaryDetailsByTerritory', ReleaseSummaryDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/36}ResourceContainedResourceReference with content type ELEMENT_ONLY
class ResourceContainedResourceReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ResourceContainedResourceReference for the case where one Resource contains another one."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceContainedResourceReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7448, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ResourceContainedResourceReference uses Python identifier ResourceContainedResourceReference
    __ResourceContainedResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReference'), 'ResourceContainedResourceReference', '__httpddex_netxmlern36_ResourceContainedResourceReference_ResourceContainedResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7453, 9), )

    
    ResourceContainedResourceReference = property(__ResourceContainedResourceReference.value, __ResourceContainedResourceReference.set, None, 'A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.')

    
    # Element DurationUsed uses Python identifier DurationUsed
    __DurationUsed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DurationUsed'), 'DurationUsed', '__httpddex_netxmlern36_ResourceContainedResourceReference_DurationUsed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7463, 9), )

    
    DurationUsed = property(__DurationUsed.value, __DurationUsed.set, None, 'The total Duration of the Resource that has been used in a specified context (this may be less than the total Duration of the Resource) (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element StartPoint uses Python identifier StartPoint
    __StartPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartPoint'), 'StartPoint', '__httpddex_netxmlern36_ResourceContainedResourceReference_StartPoint', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7468, 9), )

    
    StartPoint = property(__StartPoint.value, __StartPoint.set, None, 'The start point of the preview given in seconds from the start of the referenced Resource.')

    
    # Element Purpose uses Python identifier Purpose
    __Purpose = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Purpose'), 'Purpose', '__httpddex_netxmlern36_ResourceContainedResourceReference_Purpose', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7473, 9), )

    
    Purpose = property(__Purpose.value, __Purpose.set, None, 'A Composite containing details of the Purpose of the usage.')

    _ElementMap.update({
        __ResourceContainedResourceReference.name() : __ResourceContainedResourceReference,
        __DurationUsed.name() : __DurationUsed,
        __StartPoint.name() : __StartPoint,
        __Purpose.name() : __Purpose
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ResourceContainedResourceReference', ResourceContainedResourceReference)


# Complex type {http://ddex.net/xml/ern/36}ResourceContainedResourceReferenceList with content type ELEMENT_ONLY
class ResourceContainedResourceReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of one or more ResourceContainedResourceReferences. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceContainedResourceReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7480, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ResourceContainedResourceReference uses Python identifier ResourceContainedResourceReference
    __ResourceContainedResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReference'), 'ResourceContainedResourceReference', '__httpddex_netxmlern36_ResourceContainedResourceReferenceList_ResourceContainedResourceReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7485, 9), )

    
    ResourceContainedResourceReference = property(__ResourceContainedResourceReference.value, __ResourceContainedResourceReference.set, None, 'A Composite containing details of a ResourceContainedResourceReference.')

    _ElementMap.update({
        __ResourceContainedResourceReference.name() : __ResourceContainedResourceReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ResourceContainedResourceReferenceList', ResourceContainedResourceReferenceList)


# Complex type {http://ddex.net/xml/ern/36}ResourceGroupContentItem with content type ELEMENT_ONLY
class ResourceGroupContentItem (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Resource which is a ContentItem of a ResourceGroup."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceGroupContentItem')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7513, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_ResourceGroupContentItem_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7518, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the ContentItem among all Resources within this ResourceGroup. This is analogous to the Track number on a SoundCarrier. Not all ResourceGroups necessarily have SequenceNumbers (it is most applicable to SoundRecordings and MusicalWorkVideos). The SequenceNumber is unique within its ResourceGroupLevelNumber.')

    
    # Element SequenceSubNumber uses Python identifier SequenceSubNumber
    __SequenceSubNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceSubNumber'), 'SequenceSubNumber', '__httpddex_netxmlern36_ResourceGroupContentItem_SequenceSubNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7523, 9), )

    
    SequenceSubNumber = property(__SequenceSubNumber.value, __SequenceSubNumber.set, None, 'The SequenceNumber within the SequenceNumber. Example: if a Track is subdivided into several numbered sections, these are numbered with a SequenceSubNumber. The SequenceSubNumber is unique within its SequenceNumber.')

    
    # Element ResourceType uses Python identifier ResourceType
    __ResourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceType'), 'ResourceType', '__httpddex_netxmlern36_ResourceGroupContentItem_ResourceType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7528, 9), )

    
    ResourceType = property(__ResourceType.value, __ResourceType.set, None, 'A Composite containing details of the Type of the ContentItem.')

    
    # Element ReleaseResourceReference uses Python identifier ReleaseResourceReference
    __ReleaseResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReference'), 'ReleaseResourceReference', '__httpddex_netxmlern36_ResourceGroupContentItem_ReleaseResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7536, 9), )

    
    ReleaseResourceReference = property(__ReleaseResourceReference.value, __ReleaseResourceReference.set, None, 'A Composite containing a ReleaseResourceReference for the ContentItem (specific to this Message). The LocalAnchorReference in this Composite is a xs:string starting with the letter A.')

    
    # Element LinkedReleaseResourceReference uses Python identifier LinkedReleaseResourceReference
    __LinkedReleaseResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LinkedReleaseResourceReference'), 'LinkedReleaseResourceReference', '__httpddex_netxmlern36_ResourceGroupContentItem_LinkedReleaseResourceReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7541, 9), )

    
    LinkedReleaseResourceReference = property(__LinkedReleaseResourceReference.value, __LinkedReleaseResourceReference.set, None, 'A Composite containing details of a ReleaseResourceReference (specific to this Message) for a Resource which is linked to this ContentItem. Example: an Image, Text or NonMusicalWorkVideo associated with a SoundRecording. This LocalAnchorReference is a xs:string starting with the letter A.')

    
    # Element ResourceGroupContentItemReleaseReference uses Python identifier ResourceGroupContentItemReleaseReference
    __ResourceGroupContentItemReleaseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroupContentItemReleaseReference'), 'ResourceGroupContentItemReleaseReference', '__httpddex_netxmlern36_ResourceGroupContentItem_ResourceGroupContentItemReleaseReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7550, 12), )

    
    ResourceGroupContentItemReleaseReference = property(__ResourceGroupContentItemReleaseReference.value, __ResourceGroupContentItemReleaseReference.set, None, 'The Identifier (specific to the Message) of a Release which has the same content as the ResourceGroupContentItem. This is a LocalReleaseAnchorReference starting with the letter R.')

    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern36_ResourceGroupContentItem_ReleaseId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7560, 12), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A Composite containing details of ReleaseIds of a Release which has the same content as the ResourceGroupContentItem. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_ResourceGroupContentItem_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7566, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the ContentItem featured, if it is a SoundRecording or Video (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This Duration may be less than the normal Duration of the ContentItem, if only a part of it is included.')

    
    # Element IsHiddenResource uses Python identifier IsHiddenResource
    __IsHiddenResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), 'IsHiddenResource', '__httpddex_netxmlern36_ResourceGroupContentItem_IsHiddenResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7571, 9), )

    
    IsHiddenResource = property(__IsHiddenResource.value, __IsHiddenResource.set, None, 'The Flag indicating whether a Resource in a Release is hidden in some way from the Consumer (=True) or not (=False). If this Element is not provided, it is assumed that this is False.')

    
    # Element IsBonusResource uses Python identifier IsBonusResource
    __IsBonusResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), 'IsBonusResource', '__httpddex_netxmlern36_ResourceGroupContentItem_IsBonusResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7576, 9), )

    
    IsBonusResource = property(__IsBonusResource.value, __IsBonusResource.set, None, 'The Flag indicating whether a Resource in a Release is additional to those on the original Release of which this is a Version (=True) or not (=False). If this Element is not provided, it is assumed that this is False.')

    
    # Element IsInstantGratificationResource uses Python identifier IsInstantGratificationResource
    __IsInstantGratificationResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsInstantGratificationResource'), 'IsInstantGratificationResource', '__httpddex_netxmlern36_ResourceGroupContentItem_IsInstantGratificationResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7581, 9), )

    
    IsInstantGratificationResource = property(__IsInstantGratificationResource.value, __IsInstantGratificationResource.set, None, 'The Flag indicating whether a Resource in a Release may be made available to consumers despite the distribution of the containing Release not having been permitted (=True) or not (=False). If this Element is not provided, it is assumed that this is False.')

    _ElementMap.update({
        __SequenceNumber.name() : __SequenceNumber,
        __SequenceSubNumber.name() : __SequenceSubNumber,
        __ResourceType.name() : __ResourceType,
        __ReleaseResourceReference.name() : __ReleaseResourceReference,
        __LinkedReleaseResourceReference.name() : __LinkedReleaseResourceReference,
        __ResourceGroupContentItemReleaseReference.name() : __ResourceGroupContentItemReleaseReference,
        __ReleaseId.name() : __ReleaseId,
        __Duration.name() : __Duration,
        __IsHiddenResource.name() : __IsHiddenResource,
        __IsBonusResource.name() : __IsBonusResource,
        __IsInstantGratificationResource.name() : __IsInstantGratificationResource
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ResourceGroupContentItem', ResourceGroupContentItem)


# Complex type {http://ddex.net/xml/ern/36}ResourceGroupResourceReferenceList with content type ELEMENT_ONLY
class ResourceGroupResourceReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a list of ResourceGroupResourceReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceGroupResourceReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7590, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ResourceGroupResourceReference uses Python identifier ResourceGroupResourceReference
    __ResourceGroupResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroupResourceReference'), 'ResourceGroupResourceReference', '__httpddex_netxmlern36_ResourceGroupResourceReferenceList_ResourceGroupResourceReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7595, 9), )

    
    ResourceGroupResourceReference = property(__ResourceGroupResourceReference.value, __ResourceGroupResourceReference.set, None, 'A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.')

    _ElementMap.update({
        __ResourceGroupResourceReference.name() : __ResourceGroupResourceReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ResourceGroupResourceReferenceList', ResourceGroupResourceReferenceList)


# Complex type {http://ddex.net/xml/ern/36}ResourceMusicalWorkReference with content type ELEMENT_ONLY
class ResourceMusicalWorkReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a ResourceMusicalWorkReference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceMusicalWorkReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7607, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_ResourceMusicalWorkReference_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7612, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the MusicalWork in a group of MusicalWorks within a Medley, SoundRecording or other Resource.')

    
    # Element DurationUsed uses Python identifier DurationUsed
    __DurationUsed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DurationUsed'), 'DurationUsed', '__httpddex_netxmlern36_ResourceMusicalWorkReference_DurationUsed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7617, 9), )

    
    DurationUsed = property(__DurationUsed.value, __DurationUsed.set, None, 'The total Duration of the MusicalWork that has been used in a specified context (this may be less than the total Duration of the MusicalWork) (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element IsFragment uses Python identifier IsFragment
    __IsFragment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsFragment'), 'IsFragment', '__httpddex_netxmlern36_ResourceMusicalWorkReference_IsFragment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7622, 9), )

    
    IsFragment = property(__IsFragment.value, __IsFragment.set, None, 'The Flag indicating whether the MusicalWork is a Fragment (=True) or not (=False).')

    
    # Element ResourceMusicalWorkReference uses Python identifier ResourceMusicalWorkReference
    __ResourceMusicalWorkReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReference'), 'ResourceMusicalWorkReference', '__httpddex_netxmlern36_ResourceMusicalWorkReference_ResourceMusicalWorkReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7627, 9), )

    
    ResourceMusicalWorkReference = property(__ResourceMusicalWorkReference.value, __ResourceMusicalWorkReference.set, None, 'A Reference for a MusicalWork (specific to this Message). This is a LocalMusicalWorkAnchorReference starting with the letter W.')

    _ElementMap.update({
        __SequenceNumber.name() : __SequenceNumber,
        __DurationUsed.name() : __DurationUsed,
        __IsFragment.name() : __IsFragment,
        __ResourceMusicalWorkReference.name() : __ResourceMusicalWorkReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ResourceMusicalWorkReference', ResourceMusicalWorkReference)


# Complex type {http://ddex.net/xml/ern/36}ResourceMusicalWorkReferenceList with content type ELEMENT_ONLY
class ResourceMusicalWorkReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a list of ResourceMusicalWorkReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceMusicalWorkReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7639, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ResourceMusicalWorkReference uses Python identifier ResourceMusicalWorkReference
    __ResourceMusicalWorkReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReference'), 'ResourceMusicalWorkReference', '__httpddex_netxmlern36_ResourceMusicalWorkReferenceList_ResourceMusicalWorkReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7644, 9), )

    
    ResourceMusicalWorkReference = property(__ResourceMusicalWorkReference.value, __ResourceMusicalWorkReference.set, None, 'A Composite containing a ResourceMusicalWorkReference for a MusicalWork (specific to this Message).')

    _ElementMap.update({
        __ResourceMusicalWorkReference.name() : __ResourceMusicalWorkReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ResourceMusicalWorkReferenceList', ResourceMusicalWorkReferenceList)


# Complex type {http://ddex.net/xml/ern/36}RightShare with content type ELEMENT_ONLY
class RightShare (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a RightShare."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RightShare')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7691, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element RightShareId uses Python identifier RightShareId
    __RightShareId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightShareId'), 'RightShareId', '__httpddex_netxmlern36_RightShare_RightShareId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7696, 9), )

    
    RightShareId = property(__RightShareId.value, __RightShareId.set, None, 'A Composite containing details of Identifiers for the RightShare.')

    
    # Element RightShareReference uses Python identifier RightShareReference
    __RightShareReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightShareReference'), 'RightShareReference', '__httpddex_netxmlern36_RightShare_RightShareReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7701, 9), )

    
    RightShareReference = property(__RightShareReference.value, __RightShareReference.set, None, 'The Identifier (specific to the Message) of the RightShare within the Release which contains it. This is a LocalRightShareAnchor starting with the letter S.')

    
    # Element RightShareCreationReferenceList uses Python identifier RightShareCreationReferenceList
    __RightShareCreationReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightShareCreationReferenceList'), 'RightShareCreationReferenceList', '__httpddex_netxmlern36_RightShare_RightShareCreationReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7711, 9), )

    
    RightShareCreationReferenceList = property(__RightShareCreationReferenceList.value, __RightShareCreationReferenceList.set, None, 'A Composite containing details of one or more Creations contained in the RightShare.')

    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_RightShare_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7719, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the RightShare applies (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_RightShare_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7724, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the RightShare does not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element RightsType uses Python identifier RightsType
    __RightsType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsType'), 'RightsType', '__httpddex_netxmlern36_RightShare_RightsType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7732, 9), )

    
    RightsType = property(__RightsType.value, __RightsType.set, None, 'A Type of Right covered by the RightShare. One of the Elements RightsType and UseType must be present. The RightsType is defined according to the jurisdiction of the Territory indicated in the TerritoryCode XmlAttribute.')

    
    # Element UseType uses Python identifier UseType
    __UseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UseType'), 'UseType', '__httpddex_netxmlern36_RightShare_UseType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7740, 9), )

    
    UseType = property(__UseType.value, __UseType.set, None, 'A Composite containing details of a nature of a Service, or a Release, as used by a Consumer. One of the Elements RightsType and UseType must be present.')

    
    # Element UserInterfaceType uses Python identifier UserInterfaceType
    __UserInterfaceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserInterfaceType'), 'UserInterfaceType', '__httpddex_netxmlern36_RightShare_UserInterfaceType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7748, 9), )

    
    UserInterfaceType = property(__UserInterfaceType.value, __UserInterfaceType.set, None, 'A Composite containing details of a physical interface by which a Consumer uses a Service or Release.')

    
    # Element DistributionChannelType uses Python identifier DistributionChannelType
    __DistributionChannelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DistributionChannelType'), 'DistributionChannelType', '__httpddex_netxmlern36_RightShare_DistributionChannelType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7756, 9), )

    
    DistributionChannelType = property(__DistributionChannelType.value, __DistributionChannelType.set, None, 'A Composite containing details of a distribution channel used to disseminate a Service or Release to a Consumer.')

    
    # Element CarrierType uses Python identifier CarrierType
    __CarrierType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CarrierType'), 'CarrierType', '__httpddex_netxmlern36_RightShare_CarrierType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7764, 9), )

    
    CarrierType = property(__CarrierType.value, __CarrierType.set, None, 'A Composite containing details of a Carrier.')

    
    # Element CommercialModelType uses Python identifier CommercialModelType
    __CommercialModelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CommercialModelType'), 'CommercialModelType', '__httpddex_netxmlern36_RightShare_CommercialModelType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7772, 9), )

    
    CommercialModelType = property(__CommercialModelType.value, __CommercialModelType.set, None, 'A Composite containing details of the fundamental business model which applies (e.g. SubscriptionModel and PayAsYouGoModel). The CommercialModelType indicates how the Consumer pays for the Service or Release.')

    
    # Element MusicalWorkRightsClaimType uses Python identifier MusicalWorkRightsClaimType
    __MusicalWorkRightsClaimType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MusicalWorkRightsClaimType'), 'MusicalWorkRightsClaimType', '__httpddex_netxmlern36_RightShare_MusicalWorkRightsClaimType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7780, 9), )

    
    MusicalWorkRightsClaimType = property(__MusicalWorkRightsClaimType.value, __MusicalWorkRightsClaimType.set, None, 'A Type of the RightsClaim related to a MusicalWork.')

    
    # Element RightsController uses Python identifier RightsController
    __RightsController = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsController'), 'RightsController', '__httpddex_netxmlern36_RightShare_RightsController', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7788, 9), )

    
    RightsController = property(__RightsController.value, __RightsController.set, None, 'A Composite containing details of a RightsController of Rights in a Creation.')

    
    # Element ValidityPeriod uses Python identifier ValidityPeriod
    __ValidityPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ValidityPeriod'), 'ValidityPeriod', '__httpddex_netxmlern36_RightShare_ValidityPeriod', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7796, 9), )

    
    ValidityPeriod = property(__ValidityPeriod.value, __ValidityPeriod.set, None, 'A Composite containing details about the Period of Time for which the RightShare is valid.')

    
    # Element RightShareUnknown uses Python identifier RightShareUnknown
    __RightShareUnknown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightShareUnknown'), 'RightShareUnknown', '__httpddex_netxmlern36_RightShare_RightShareUnknown', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7802, 12), )

    
    RightShareUnknown = property(__RightShareUnknown.value, __RightShareUnknown.set, None, 'The Flag indicating whether the RightSharePercentage is unknown (=True) or not (=False).')

    
    # Element RightSharePercentage uses Python identifier RightSharePercentage
    __RightSharePercentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightSharePercentage'), 'RightSharePercentage', '__httpddex_netxmlern36_RightShare_RightSharePercentage', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7807, 12), )

    
    RightSharePercentage = property(__RightSharePercentage.value, __RightSharePercentage.set, None, "The share of the licensed Rights owned by the RightsController. RightShare information is given as a xs:decimal value (e.g. '0.125' represents 12.5%) or as a fraction (e.g. '1/8' represents 12.5%).")

    
    # Element TariffReference uses Python identifier TariffReference
    __TariffReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TariffReference'), 'TariffReference', '__httpddex_netxmlern36_RightShare_TariffReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7813, 9), )

    
    TariffReference = property(__TariffReference.value, __TariffReference.set, None, 'A Composite containing details of a Reference to a TextDocument containing details of a Tariff (in the form of an Identifier, Name or Description) that is to be applied to the RightShare.')

    
    # Element LicenseStatus uses Python identifier LicenseStatus
    __LicenseStatus = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LicenseStatus'), 'LicenseStatus', '__httpddex_netxmlern36_RightShare_LicenseStatus', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7818, 9), )

    
    LicenseStatus = property(__LicenseStatus.value, __LicenseStatus.set, None, 'The legal status of a License for the RightShare.')

    
    # Element HasFirstLicenseRefusal uses Python identifier HasFirstLicenseRefusal
    __HasFirstLicenseRefusal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HasFirstLicenseRefusal'), 'HasFirstLicenseRefusal', '__httpddex_netxmlern36_RightShare_HasFirstLicenseRefusal', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7823, 9), )

    
    HasFirstLicenseRefusal = property(__HasFirstLicenseRefusal.value, __HasFirstLicenseRefusal.set, None, 'The Flag indicating whether a RightsController retains the right of refusal regarding the granting of the first licence for creating a SoundRecording of a Musical Work (=True) or not (=False).')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_RightShare_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7829, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7829, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the RightShare as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __RightShareId.name() : __RightShareId,
        __RightShareReference.name() : __RightShareReference,
        __RightShareCreationReferenceList.name() : __RightShareCreationReferenceList,
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __RightsType.name() : __RightsType,
        __UseType.name() : __UseType,
        __UserInterfaceType.name() : __UserInterfaceType,
        __DistributionChannelType.name() : __DistributionChannelType,
        __CarrierType.name() : __CarrierType,
        __CommercialModelType.name() : __CommercialModelType,
        __MusicalWorkRightsClaimType.name() : __MusicalWorkRightsClaimType,
        __RightsController.name() : __RightsController,
        __ValidityPeriod.name() : __ValidityPeriod,
        __RightShareUnknown.name() : __RightShareUnknown,
        __RightSharePercentage.name() : __RightSharePercentage,
        __TariffReference.name() : __TariffReference,
        __LicenseStatus.name() : __LicenseStatus,
        __HasFirstLicenseRefusal.name() : __HasFirstLicenseRefusal
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'RightShare', RightShare)


# Complex type {http://ddex.net/xml/ern/36}RightShareCreationReferenceList with content type ELEMENT_ONLY
class RightShareCreationReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a list of RightShareCreationReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RightShareCreationReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7835, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element RightShareWorkReference uses Python identifier RightShareWorkReference
    __RightShareWorkReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightShareWorkReference'), 'RightShareWorkReference', '__httpddex_netxmlern36_RightShareCreationReferenceList_RightShareWorkReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7840, 9), )

    
    RightShareWorkReference = property(__RightShareWorkReference.value, __RightShareWorkReference.set, None, 'A Reference for a Work (specific to this Message) that is part of the RightShare. This is a LocalMusicalWorkAnchorReference starting with the letter W.')

    
    # Element RightShareResourceReference uses Python identifier RightShareResourceReference
    __RightShareResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightShareResourceReference'), 'RightShareResourceReference', '__httpddex_netxmlern36_RightShareCreationReferenceList_RightShareResourceReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7850, 9), )

    
    RightShareResourceReference = property(__RightShareResourceReference.value, __RightShareResourceReference.set, None, 'A Reference for a Resource (specific to this Message) that is part of the RightShare. This is a LocalResourceAnchorReference starting with the letter A. The RightShare covers the Works used in the Resource(s).')

    
    # Element RightShareReleaseReference uses Python identifier RightShareReleaseReference
    __RightShareReleaseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightShareReleaseReference'), 'RightShareReleaseReference', '__httpddex_netxmlern36_RightShareCreationReferenceList_RightShareReleaseReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7862, 9), )

    
    RightShareReleaseReference = property(__RightShareReleaseReference.value, __RightShareReleaseReference.set, None, 'A Reference for a Release (specific to this Message) that is part of the RightShare. This is a LocalReleaseAnchorReference starting with the letter R. The RightShare covers the Works used in the Release(s).')

    _ElementMap.update({
        __RightShareWorkReference.name() : __RightShareWorkReference,
        __RightShareResourceReference.name() : __RightShareResourceReference,
        __RightShareReleaseReference.name() : __RightShareReleaseReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RightShareCreationReferenceList', RightShareCreationReferenceList)


# Complex type {http://ddex.net/xml/ern/36}RightsAgreementId with content type ELEMENT_ONLY
class RightsAgreementId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Identifiers of a License, Claim, RightShare or contract."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RightsAgreementId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7876, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MWLI uses Python identifier MWLI
    __MWLI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MWLI'), 'MWLI', '__httpddex_netxmlern36_RightsAgreementId_MWLI', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7881, 9), )

    
    MWLI = property(__MWLI.value, __MWLI.set, None, "A MusicalWork License Identifier identifying a License. If the Composite is meant to describe a Claim, RightShare or contract, then the License relates to that Claim, RightShare or contract. A MWLI comprises four parts: one of the xs:strings 'M1' or 'M2' or 'M3' or 'M4', followed by five alphanumeric characters, ten alphanumeric characters and one alphanumeric check character.")

    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_RightsAgreementId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7889, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the License, Claim, RightShare or contract.')

    _ElementMap.update({
        __MWLI.name() : __MWLI,
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RightsAgreementId', RightsAgreementId)


# Complex type {http://ddex.net/xml/ern/36}RightsController with content type ELEMENT_ONLY
class RightsController (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a RightsController. RightsControllers are typicallydescribed by Name, Identifier and role(s)."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RightsController')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7899, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_RightsController_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7905, 12), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern36_RightsController_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7911, 15), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A Composite containing details of the PartyName(s).')

    
    # Element RightsControllerRole uses Python identifier RightsControllerRole
    __RightsControllerRole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsControllerRole'), 'RightsControllerRole', '__httpddex_netxmlern36_RightsController_RightsControllerRole', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7926, 9), )

    
    RightsControllerRole = property(__RightsControllerRole.value, __RightsControllerRole.set, None, 'A role that describes the Party involved in the administration of Rights.')

    
    # Element RightShareUnknown uses Python identifier RightShareUnknown
    __RightShareUnknown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightShareUnknown'), 'RightShareUnknown', '__httpddex_netxmlern36_RightsController_RightShareUnknown', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7935, 12), )

    
    RightShareUnknown = property(__RightShareUnknown.value, __RightShareUnknown.set, None, 'The Flag indicating whether the RightSharePercentage is unknown (=True) or not (=False).')

    
    # Element RightSharePercentage uses Python identifier RightSharePercentage
    __RightSharePercentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightSharePercentage'), 'RightSharePercentage', '__httpddex_netxmlern36_RightsController_RightSharePercentage', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7940, 12), )

    
    RightSharePercentage = property(__RightSharePercentage.value, __RightSharePercentage.set, None, "The share of the licensed Rights owned by the RightsController. RightShare information is given as a xs:decimal value (e.g. '0.125' represents 12.5%). If no information is given, 100% is assumed.")

    
    # Attribute SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_RightsController_SequenceNumber', pyxb.binding.datatypes.integer)
    __SequenceNumber._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7947, 6)
    __SequenceNumber._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7947, 6)
    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the RightsController in a group of RightsControllers. This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __RightsControllerRole.name() : __RightsControllerRole,
        __RightShareUnknown.name() : __RightShareUnknown,
        __RightSharePercentage.name() : __RightSharePercentage
    })
    _AttributeMap.update({
        __SequenceNumber.name() : __SequenceNumber
    })
Namespace.addCategoryObject('typeBinding', 'RightsController', RightsController)


# Complex type {http://ddex.net/xml/ern/36}SalesReportingProxyReleaseId with content type ELEMENT_ONLY
class SalesReportingProxyReleaseId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a SalesReportingProxyReleaseId."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SalesReportingProxyReleaseId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7977, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern36_SalesReportingProxyReleaseId_ReleaseId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7982, 9), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A Composite containing details of ReleaseIds. If available, a GRid should always be used.')

    
    # Element Reason uses Python identifier Reason
    __Reason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Reason'), 'Reason', '__httpddex_netxmlern36_SalesReportingProxyReleaseId_Reason', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7987, 9), )

    
    Reason = property(__Reason.value, __Reason.set, None, 'A Composite containing the textual Description of the reason for the Identifier being used as a proxy.')

    
    # Element ReasonType uses Python identifier ReasonType
    __ReasonType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReasonType'), 'ReasonType', '__httpddex_netxmlern36_SalesReportingProxyReleaseId_ReasonType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7992, 9), )

    
    ReasonType = property(__ReasonType.value, __ReasonType.set, None, 'A Composite containing details of a ReasonType.')

    _ElementMap.update({
        __ReleaseId.name() : __ReleaseId,
        __Reason.name() : __Reason,
        __ReasonType.name() : __ReasonType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SalesReportingProxyReleaseId', SalesReportingProxyReleaseId)


# Complex type {http://ddex.net/xml/ern/36}SheetMusicId with content type ELEMENT_ONLY
class SheetMusicId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Identifiers of a SheetMusic."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SheetMusicId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8037, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ISMN uses Python identifier ISMN
    __ISMN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISMN'), 'ISMN', '__httpddex_netxmlern36_SheetMusicId_ISMN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8042, 9), )

    
    ISMN = property(__ISMN.value, __ISMN.set, None, "The ISMN (International Standard Music Number defined in ISO 10957) for the SheetMusic. An ISMN is a thirteen-digit number. Pre-2008 ISMNs, which had 10 characters and are now deprecated, are converted by replacing the initial letter ('M') with '979-0'.")

    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_SheetMusicId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8047, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the SheetMusic.')

    
    # Attribute IsReplaced uses Python identifier IsReplaced
    __IsReplaced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsReplaced'), 'IsReplaced', '__httpddex_netxmlern36_SheetMusicId_IsReplaced', pyxb.binding.datatypes.boolean)
    __IsReplaced._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8056, 6)
    __IsReplaced._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8056, 6)
    
    IsReplaced = property(__IsReplaced.value, __IsReplaced.set, None, 'The Flag indicating whether this Identifier is old and has been replaced by a new one (=True) or not (=False). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one.')

    _ElementMap.update({
        __ISMN.name() : __ISMN,
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        __IsReplaced.name() : __IsReplaced
    })
Namespace.addCategoryObject('typeBinding', 'SheetMusicId', SheetMusicId)


# Complex type {http://ddex.net/xml/ern/36}SocietyAffiliation with content type ELEMENT_ONLY
class SocietyAffiliation (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a society affiliation."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SocietyAffiliation')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8081, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_SocietyAffiliation_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8087, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the affiliation details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern36_SocietyAffiliation_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8092, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A Territory to which the affiliation details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.')

    
    # Element MusicRightsSociety uses Python identifier MusicRightsSociety
    __MusicRightsSociety = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MusicRightsSociety'), 'MusicRightsSociety', '__httpddex_netxmlern36_SocietyAffiliation_MusicRightsSociety', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8100, 9), )

    
    MusicRightsSociety = property(__MusicRightsSociety.value, __MusicRightsSociety.set, None, 'A Composite containing details of a MusicRightsSociety.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __MusicRightsSociety.name() : __MusicRightsSociety
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SocietyAffiliation', SocietyAffiliation)


# Complex type {http://ddex.net/xml/ern/36}SoftwareId with content type ELEMENT_ONLY
class SoftwareId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Identifiers of a Software."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoftwareId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8107, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_SoftwareId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8112, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the Software.')

    
    # Attribute IsReplaced uses Python identifier IsReplaced
    __IsReplaced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsReplaced'), 'IsReplaced', '__httpddex_netxmlern36_SoftwareId_IsReplaced', pyxb.binding.datatypes.boolean)
    __IsReplaced._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8118, 6)
    __IsReplaced._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8118, 6)
    
    IsReplaced = property(__IsReplaced.value, __IsReplaced.set, None, 'The Flag indicating whether this Identifier is old and has been replaced by a new one (=True) or not (=False). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one.')

    _ElementMap.update({
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        __IsReplaced.name() : __IsReplaced
    })
Namespace.addCategoryObject('typeBinding', 'SoftwareId', SoftwareId)


# Complex type {http://ddex.net/xml/ern/36}SoundRecordingCollectionReference with content type ELEMENT_ONLY
class SoundRecordingCollectionReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a SoundRecordingCollectionReference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoundRecordingCollectionReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8167, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern36_SoundRecordingCollectionReference_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8172, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the Collection in a group of Collections within a Medley, SoundRecording or other Collection.')

    
    # Element SoundRecordingCollectionReference uses Python identifier SoundRecordingCollectionReference
    __SoundRecordingCollectionReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReference'), 'SoundRecordingCollectionReference', '__httpddex_netxmlern36_SoundRecordingCollectionReference_SoundRecordingCollectionReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8177, 9), )

    
    SoundRecordingCollectionReference = property(__SoundRecordingCollectionReference.value, __SoundRecordingCollectionReference.set, None, 'A Reference for a Collection (specific to this Message). This is a LocalCollectionAnchorReference starting with the letter X. The referenced Collection has to be of CollectionType Series, Season or Episode.')

    
    # Element StartTime uses Python identifier StartTime
    __StartTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartTime'), 'StartTime', '__httpddex_netxmlern36_SoundRecordingCollectionReference_StartTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8187, 9), )

    
    StartTime = property(__StartTime.value, __StartTime.set, None, 'The start time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern36_SoundRecordingCollectionReference_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8192, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The Duration of the use of the Creation that is referenced in the CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element EndTime uses Python identifier EndTime
    __EndTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EndTime'), 'EndTime', '__httpddex_netxmlern36_SoundRecordingCollectionReference_EndTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8197, 9), )

    
    EndTime = property(__EndTime.value, __EndTime.set, None, 'The end time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element ReleaseResourceType uses Python identifier ReleaseResourceType
    __ReleaseResourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseResourceType'), 'ReleaseResourceType', '__httpddex_netxmlern36_SoundRecordingCollectionReference_ReleaseResourceType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8202, 9), )

    
    ReleaseResourceType = property(__ReleaseResourceType.value, __ReleaseResourceType.set, None, 'A Type of Collection in the context of a Video. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __SequenceNumber.name() : __SequenceNumber,
        __SoundRecordingCollectionReference.name() : __SoundRecordingCollectionReference,
        __StartTime.name() : __StartTime,
        __Duration.name() : __Duration,
        __EndTime.name() : __EndTime,
        __ReleaseResourceType.name() : __ReleaseResourceType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SoundRecordingCollectionReference', SoundRecordingCollectionReference)


# Complex type {http://ddex.net/xml/ern/36}SoundRecordingCollectionReferenceList with content type ELEMENT_ONLY
class SoundRecordingCollectionReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a list of SoundRecordingCollectionReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoundRecordingCollectionReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8211, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NumberOfCollections uses Python identifier NumberOfCollections
    __NumberOfCollections = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfCollections'), 'NumberOfCollections', '__httpddex_netxmlern36_SoundRecordingCollectionReferenceList_NumberOfCollections', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8216, 9), )

    
    NumberOfCollections = property(__NumberOfCollections.value, __NumberOfCollections.set, None, 'The number of referenced Collections (typically Chapters).')

    
    # Element SoundRecordingCollectionReference uses Python identifier SoundRecordingCollectionReference
    __SoundRecordingCollectionReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReference'), 'SoundRecordingCollectionReference', '__httpddex_netxmlern36_SoundRecordingCollectionReferenceList_SoundRecordingCollectionReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8221, 9), )

    
    SoundRecordingCollectionReference = property(__SoundRecordingCollectionReference.value, __SoundRecordingCollectionReference.set, None, 'A Composite containing a SoundRecordingCollectionReference for a Collection (specific to this Message).')

    _ElementMap.update({
        __NumberOfCollections.name() : __NumberOfCollections,
        __SoundRecordingCollectionReference.name() : __SoundRecordingCollectionReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SoundRecordingCollectionReferenceList', SoundRecordingCollectionReferenceList)


# Complex type {http://ddex.net/xml/ern/36}SoundRecordingId with content type ELEMENT_ONLY
class SoundRecordingId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of SoundRecordingIds."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoundRecordingId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8230, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ISRC uses Python identifier ISRC
    __ISRC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISRC'), 'ISRC', '__httpddex_netxmlern36_SoundRecordingId_ISRC', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8235, 9), )

    
    ISRC = property(__ISRC.value, __ISRC.set, None, 'The ISRC (International Standard Recording Code as defined in  ISO 3901) for the SoundRecording. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. ')

    
    # Element CatalogNumber uses Python identifier CatalogNumber
    __CatalogNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogNumber'), 'CatalogNumber', '__httpddex_netxmlern36_SoundRecordingId_CatalogNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8240, 9), )

    
    CatalogNumber = property(__CatalogNumber.value, __CatalogNumber.set, None, 'A Composite containing details of the CatalogNumber of the SoundRecording.')

    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_SoundRecordingId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8245, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the SoundRecording (usually one per society involved in the messaging).')

    
    # Attribute IsReplaced uses Python identifier IsReplaced
    __IsReplaced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsReplaced'), 'IsReplaced', '__httpddex_netxmlern36_SoundRecordingId_IsReplaced', pyxb.binding.datatypes.boolean)
    __IsReplaced._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8254, 6)
    __IsReplaced._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8254, 6)
    
    IsReplaced = property(__IsReplaced.value, __IsReplaced.set, None, 'The Flag indicating whether this Identifier is old and has been replaced by a new one (=True) or not (=False). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one.')

    _ElementMap.update({
        __ISRC.name() : __ISRC,
        __CatalogNumber.name() : __CatalogNumber,
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        __IsReplaced.name() : __IsReplaced
    })
Namespace.addCategoryObject('typeBinding', 'SoundRecordingId', SoundRecordingId)


# Complex type {http://ddex.net/xml/ern/36}SubTitle with content type SIMPLE
class SubTitle (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a SubTitle, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SubTitle')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8279, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_SubTitle_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8285, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8285, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the SubTitle as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'SubTitle', SubTitle)


# Complex type {http://ddex.net/xml/ern/36}Synopsis with content type SIMPLE
class Synopsis (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Synopsis."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Synopsis')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8293, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Synopsis_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8299, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8299, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the Synopsis as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Synopsis', Synopsis)


# Complex type {http://ddex.net/xml/ern/36}TariffReference with content type SIMPLE
class TariffReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Reference to a TextDocument containing details of a Tariff."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TariffReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8307, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TariffReference_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8313, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8313, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the TariffReference (and the TariffSubReference if applicable) as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    
    # Attribute TariffSubReference uses Python identifier TariffSubReference
    __TariffSubReference = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TariffSubReference'), 'TariffSubReference', '__httpddex_netxmlern36_TariffReference_TariffSubReference', pyxb.binding.datatypes.string)
    __TariffSubReference._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8318, 12)
    __TariffSubReference._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8318, 12)
    
    TariffSubReference = property(__TariffSubReference.value, __TariffSubReference.set, None, 'The Reference to a TextDocument containing more specific details of a Tariff. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode,
        __TariffSubReference.name() : __TariffSubReference
    })
Namespace.addCategoryObject('typeBinding', 'TariffReference', TariffReference)


# Complex type {http://ddex.net/xml/ern/36}TechnicalInstantiation with content type ELEMENT_ONLY
class TechnicalInstantiation (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing technical details of a Release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalInstantiation')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8326, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DrmEnforcementType uses Python identifier DrmEnforcementType
    __DrmEnforcementType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmEnforcementType'), 'DrmEnforcementType', '__httpddex_netxmlern36_TechnicalInstantiation_DrmEnforcementType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8331, 9), )

    
    DrmEnforcementType = property(__DrmEnforcementType.value, __DrmEnforcementType.set, None, 'A Type of DRM enforcement.')

    
    # Element VideoDefinitionType uses Python identifier VideoDefinitionType
    __VideoDefinitionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoDefinitionType'), 'VideoDefinitionType', '__httpddex_netxmlern36_TechnicalInstantiation_VideoDefinitionType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8338, 9), )

    
    VideoDefinitionType = property(__VideoDefinitionType.value, __VideoDefinitionType.set, None, 'A Type of resolution (or definition) in which a Video is provided.')

    
    # Element CodingType uses Python identifier CodingType
    __CodingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CodingType'), 'CodingType', '__httpddex_netxmlern36_TechnicalInstantiation_CodingType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8345, 9), )

    
    CodingType = property(__CodingType.value, __CodingType.set, None, 'A Type of coding used to encode a Resource.')

    
    # Element BitRate uses Python identifier BitRate
    __BitRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BitRate'), 'BitRate', '__httpddex_netxmlern36_TechnicalInstantiation_BitRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8350, 9), )

    
    BitRate = property(__BitRate.value, __BitRate.set, None, 'A Composite containing the BitRate for the audio data and a UnitOfMeasure (the default is kbps).')

    _ElementMap.update({
        __DrmEnforcementType.name() : __DrmEnforcementType,
        __VideoDefinitionType.name() : __VideoDefinitionType,
        __CodingType.name() : __CodingType,
        __BitRate.name() : __BitRate
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalInstantiation', TechnicalInstantiation)


# Complex type {http://ddex.net/xml/ern/36}TextId with content type ELEMENT_ONLY
class TextId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Identifiers of a Text."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TextId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8381, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ISBN uses Python identifier ISBN
    __ISBN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISBN'), 'ISBN', '__httpddex_netxmlern36_TextId_ISBN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8386, 9), )

    
    ISBN = property(__ISBN.value, __ISBN.set, None, "The ISBN (International Standard Book Number defined in ISO 2108) for the Text. An ISBN is a 13-digit number. Pre-2007, ISBNs, which had 10-digits and are now deprecated, are converted by adding the prefix '978' and re-calculating the check character.")

    
    # Element ISSN uses Python identifier ISSN
    __ISSN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISSN'), 'ISSN', '__httpddex_netxmlern36_TextId_ISSN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8391, 9), )

    
    ISSN = property(__ISSN.value, __ISSN.set, None, 'The ISSN (International Standard Serial Number defined in ISO 3297) identifying the Text. An ISSN comprises two groups of four digits, separated by a hyphen and a control digit.')

    
    # Element SICI uses Python identifier SICI
    __SICI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SICI'), 'SICI', '__httpddex_netxmlern36_TextId_SICI', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8396, 9), )

    
    SICI = property(__SICI.value, __SICI.set, None, 'The SICI (Serial Item and Contribution Identifier defined in ANSI/NISO Z39.56-199)  for the Text.')

    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_TextId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8401, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the Text (usually one per society involved in the messaging).')

    
    # Attribute IsReplaced uses Python identifier IsReplaced
    __IsReplaced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsReplaced'), 'IsReplaced', '__httpddex_netxmlern36_TextId_IsReplaced', pyxb.binding.datatypes.boolean)
    __IsReplaced._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8410, 6)
    __IsReplaced._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8410, 6)
    
    IsReplaced = property(__IsReplaced.value, __IsReplaced.set, None, 'The Flag indicating whether this Identifier is old and has been replaced by a new one (=True) or not (=False). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one.')

    _ElementMap.update({
        __ISBN.name() : __ISBN,
        __ISSN.name() : __ISSN,
        __SICI.name() : __SICI,
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        __IsReplaced.name() : __IsReplaced
    })
Namespace.addCategoryObject('typeBinding', 'TextId', TextId)


# Complex type {http://ddex.net/xml/ern/36}TitleText with content type SIMPLE
class TitleText (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a TitleText."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TitleText')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8465, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TitleText_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8471, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8471, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the TitleText as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TitleText', TitleText)


# Complex type {http://ddex.net/xml/ern/36}TypedSubTitle with content type SIMPLE
class TypedSubTitle (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a SubTitle, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TypedSubTitle')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8479, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_TypedSubTitle_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8485, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8485, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the SubTitle as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    
    # Attribute SubTitleType uses Python identifier SubTitleType
    __SubTitleType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SubTitleType'), 'SubTitleType', '__httpddex_netxmlern36_TypedSubTitle_SubTitleType', pyxb.binding.datatypes.string)
    __SubTitleType._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8490, 12)
    __SubTitleType._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8490, 12)
    
    SubTitleType = property(__SubTitleType.value, __SubTitleType.set, None, 'A Type of the SubTitle which defines its origin or the function it fulfils. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode,
        __SubTitleType.name() : __SubTitleType
    })
Namespace.addCategoryObject('typeBinding', 'TypedSubTitle', TypedSubTitle)


# Complex type {http://ddex.net/xml/ern/36}Usage with content type ELEMENT_ONLY
class Usage (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing Types and number of Usages of a Release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Usage')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8498, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UseType uses Python identifier UseType
    __UseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UseType'), 'UseType', '__httpddex_netxmlern36_Usage_UseType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8503, 9), )

    
    UseType = property(__UseType.value, __UseType.set, None, 'A Composite containing details of a nature of a Service, or a Release, as used by a Consumer.')

    
    # Element UserInterfaceType uses Python identifier UserInterfaceType
    __UserInterfaceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserInterfaceType'), 'UserInterfaceType', '__httpddex_netxmlern36_Usage_UserInterfaceType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8508, 9), )

    
    UserInterfaceType = property(__UserInterfaceType.value, __UserInterfaceType.set, None, 'A Composite containing details of a physical interface by which a Consumer is intended to use a Service or Release.')

    
    # Element DistributionChannelType uses Python identifier DistributionChannelType
    __DistributionChannelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DistributionChannelType'), 'DistributionChannelType', '__httpddex_netxmlern36_Usage_DistributionChannelType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8516, 9), )

    
    DistributionChannelType = property(__DistributionChannelType.value, __DistributionChannelType.set, None, 'A Composite containing details of a distribution channel intended to be used to disseminate a Service or Release to a Consumer.')

    
    # Element CarrierType uses Python identifier CarrierType
    __CarrierType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CarrierType'), 'CarrierType', '__httpddex_netxmlern36_Usage_CarrierType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8524, 9), )

    
    CarrierType = property(__CarrierType.value, __CarrierType.set, None, 'A Composite containing details of a Carrier.')

    
    # Element TechnicalInstantiation uses Python identifier TechnicalInstantiation
    __TechnicalInstantiation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalInstantiation'), 'TechnicalInstantiation', '__httpddex_netxmlern36_Usage_TechnicalInstantiation', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8532, 9), )

    
    TechnicalInstantiation = property(__TechnicalInstantiation.value, __TechnicalInstantiation.set, None, 'A Composite containing technical details of the Release.')

    
    # Element NumberOfUsages uses Python identifier NumberOfUsages
    __NumberOfUsages = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfUsages'), 'NumberOfUsages', '__httpddex_netxmlern36_Usage_NumberOfUsages', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8539, 9), )

    
    NumberOfUsages = property(__NumberOfUsages.value, __NumberOfUsages.set, None, 'The number of times a Release can be used under the terms of the Deal.')

    _ElementMap.update({
        __UseType.name() : __UseType,
        __UserInterfaceType.name() : __UserInterfaceType,
        __DistributionChannelType.name() : __DistributionChannelType,
        __CarrierType.name() : __CarrierType,
        __TechnicalInstantiation.name() : __TechnicalInstantiation,
        __NumberOfUsages.name() : __NumberOfUsages
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Usage', Usage)


# Complex type {http://ddex.net/xml/ern/36}UserDefinedResourceId with content type ELEMENT_ONLY
class UserDefinedResourceId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Identifiers of a UserDefinedResource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserDefinedResourceId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8565, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_UserDefinedResourceId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8570, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the UserDefinedResource.')

    
    # Attribute IsReplaced uses Python identifier IsReplaced
    __IsReplaced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsReplaced'), 'IsReplaced', '__httpddex_netxmlern36_UserDefinedResourceId_IsReplaced', pyxb.binding.datatypes.boolean)
    __IsReplaced._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8576, 6)
    __IsReplaced._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8576, 6)
    
    IsReplaced = property(__IsReplaced.value, __IsReplaced.set, None, 'The Flag indicating whether this Identifier is old and has been replaced by a new one (=True) or not (=False). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one.')

    _ElementMap.update({
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        __IsReplaced.name() : __IsReplaced
    })
Namespace.addCategoryObject('typeBinding', 'UserDefinedResourceId', UserDefinedResourceId)


# Complex type {http://ddex.net/xml/ern/36}UserDefinedResourceType with content type SIMPLE
class UserDefinedResourceType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a UserDefinedResourceType."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserDefinedResourceType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8582, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_UserDefinedResourceType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8588, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8588, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the UserDefinedResourceType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace
    })
Namespace.addCategoryObject('typeBinding', 'UserDefinedResourceType', UserDefinedResourceType)


# Complex type {http://ddex.net/xml/ern/36}UserDefinedValue with content type SIMPLE
class UserDefinedValue (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a UserDefinedValue."""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserDefinedValue')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8596, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_UserDefinedValue_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8602, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8602, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the UserDefinedValue. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute Description uses Python identifier Description
    __Description = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpddex_netxmlern36_UserDefinedValue_Description', pyxb.binding.datatypes.string)
    __Description._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8607, 12)
    __Description._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8607, 12)
    
    Description = property(__Description.value, __Description.set, None, 'A textual Description of the Type or function of the UserDefinedValue. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_UserDefinedValue_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8612, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8612, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the Description as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __Description.name() : __Description,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'UserDefinedValue', UserDefinedValue)


# Complex type {http://ddex.net/xml/ern/36}VideoCueSheetReference with content type ELEMENT_ONLY
class VideoCueSheetReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a VideoCueSheetReference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VideoCueSheetReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8663, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VideoCueSheetReference uses Python identifier VideoCueSheetReference
    __VideoCueSheetReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoCueSheetReference'), 'VideoCueSheetReference', '__httpddex_netxmlern36_VideoCueSheetReference_VideoCueSheetReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8668, 9), )

    
    VideoCueSheetReference = property(__VideoCueSheetReference.value, __VideoCueSheetReference.set, None, 'A Reference for a CueSheet (specific to this Message). This is a LocalCueSheetAnchorReference starting with the letter Q.')

    _ElementMap.update({
        __VideoCueSheetReference.name() : __VideoCueSheetReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'VideoCueSheetReference', VideoCueSheetReference)


# Complex type {http://ddex.net/xml/ern/36}VideoId with content type ELEMENT_ONLY
class VideoId (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of Identifiers of a Video."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VideoId')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8680, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ISRC uses Python identifier ISRC
    __ISRC = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISRC'), 'ISRC', '__httpddex_netxmlern36_VideoId_ISRC', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8685, 9), )

    
    ISRC = property(__ISRC.value, __ISRC.set, None, 'The ISRC (International Standard Recording Code as defined in  ISO 3901) for the Video. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. ')

    
    # Element ISAN uses Python identifier ISAN
    __ISAN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ISAN'), 'ISAN', '__httpddex_netxmlern36_VideoId_ISAN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8690, 9), )

    
    ISAN = property(__ISAN.value, __ISAN.set, None, 'The ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the Video. An ISAN comprises four blocks of four hexadecimal charaters followed by a check character.')

    
    # Element VISAN uses Python identifier VISAN
    __VISAN = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VISAN'), 'VISAN', '__httpddex_netxmlern36_VideoId_VISAN', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8695, 9), )

    
    VISAN = property(__VISAN.value, __VISAN.set, None, 'The V-ISAN (Version Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the Video. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character.')

    
    # Element CatalogNumber uses Python identifier CatalogNumber
    __CatalogNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogNumber'), 'CatalogNumber', '__httpddex_netxmlern36_VideoId_CatalogNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8700, 9), )

    
    CatalogNumber = property(__CatalogNumber.value, __CatalogNumber.set, None, 'A Composite containing details of the CatalogNumber of the Video.')

    
    # Element ProprietaryId uses Python identifier ProprietaryId
    __ProprietaryId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), 'ProprietaryId', '__httpddex_netxmlern36_VideoId_ProprietaryId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8705, 9), )

    
    ProprietaryId = property(__ProprietaryId.value, __ProprietaryId.set, None, 'A Composite containing details of a ProprietaryIdentifier of the Video (usually one per society involved in the messaging).')

    
    # Attribute IsReplaced uses Python identifier IsReplaced
    __IsReplaced = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsReplaced'), 'IsReplaced', '__httpddex_netxmlern36_VideoId_IsReplaced', pyxb.binding.datatypes.boolean)
    __IsReplaced._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8714, 6)
    __IsReplaced._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8714, 6)
    
    IsReplaced = property(__IsReplaced.value, __IsReplaced.set, None, 'The Flag indicating whether this Identifier is old and has been replaced by a new one (=True) or not (=False). The Flag may only be set to True when the new Identifier is also provided. If the Flag is not set, this Identifier is deemed to be the current one.')

    _ElementMap.update({
        __ISRC.name() : __ISRC,
        __ISAN.name() : __ISAN,
        __VISAN.name() : __VISAN,
        __CatalogNumber.name() : __CatalogNumber,
        __ProprietaryId.name() : __ProprietaryId
    })
    _AttributeMap.update({
        __IsReplaced.name() : __IsReplaced
    })
Namespace.addCategoryObject('typeBinding', 'VideoId', VideoId)


# Complex type {http://ddex.net/xml/ern/36}WebPage with content type ELEMENT_ONLY
class WebPage (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a WebPage."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WebPage')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8739, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_WebPage_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8744, 9), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for a Party owning the WebPage. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern36_WebPage_ReleaseId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8752, 9), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A Composite containing details of ReleaseIds. If available, a GRid should always be used.')

    
    # Element PageName uses Python identifier PageName
    __PageName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PageName'), 'PageName', '__httpddex_netxmlern36_WebPage_PageName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8760, 9), )

    
    PageName = property(__PageName.value, __PageName.set, None, 'A Composite containing the Name of the WebPage.')

    
    # Element URL uses Python identifier URL
    __URL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'URL'), 'URL', '__httpddex_netxmlern36_WebPage_URL', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8765, 9), )

    
    URL = property(__URL.value, __URL.set, None, 'A URL of the WebPage.')

    
    # Element UserName uses Python identifier UserName
    __UserName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserName'), 'UserName', '__httpddex_netxmlern36_WebPage_UserName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8770, 9), )

    
    UserName = property(__UserName.value, __UserName.set, None, 'An Identifier of a computer user who is granted maintenance access to the WebPage.')

    
    # Element Password uses Python identifier Password
    __Password = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Password'), 'Password', '__httpddex_netxmlern36_WebPage_Password', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8775, 9), )

    
    Password = property(__Password.value, __Password.set, None, 'A Password needed to grant a user maintenance access to the WebPage in combination with the UserName.')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __ReleaseId.name() : __ReleaseId,
        __PageName.name() : __PageName,
        __URL.name() : __URL,
        __UserName.name() : __UserName,
        __Password.name() : __Password
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'WebPage', WebPage)


# Complex type {http://ddex.net/xml/ern/36}WorkList with content type ELEMENT_ONLY
class WorkList (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of one or more Works."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WorkList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8782, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MusicalWork uses Python identifier MusicalWork
    __MusicalWork = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MusicalWork'), 'MusicalWork', '__httpddex_netxmlern36_WorkList_MusicalWork', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8787, 9), )

    
    MusicalWork = property(__MusicalWork.value, __MusicalWork.set, None, 'A Composite containing details of a MusicalWork contained in a Resource.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_WorkList_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8793, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8793, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the WorkList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        __MusicalWork.name() : __MusicalWork
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'WorkList', WorkList)


# Complex type {http://ddex.net/xml/ern/36}PriceInformation with content type ELEMENT_ONLY
class PriceInformation (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Price."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PriceInformation')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1575, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpddex_netxmlern36_PriceInformation_Description', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1580, 9), )

    
    Description = property(__Description.value, __Description.set, None, 'A Composite containing a Description of the differences between multiple PriceInformation Composites.')

    
    # Element PriceRangeType uses Python identifier PriceRangeType
    __PriceRangeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PriceRangeType'), 'PriceRangeType', '__httpddex_netxmlern36_PriceInformation_PriceRangeType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1585, 9), )

    
    PriceRangeType = property(__PriceRangeType.value, __PriceRangeType.set, None, "A Composite containing a Type of Price according to its value range. Typical examples include 'budget' and 'front line'. This is an informative element which is not meant to be used to send instructions on the Price to be used by the DSP.")

    
    # Element PriceType uses Python identifier PriceType
    __PriceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PriceType'), 'PriceType', '__httpddex_netxmlern36_PriceInformation_PriceType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1590, 9), )

    
    PriceType = property(__PriceType.value, __PriceType.set, None, 'A Composite containing further details of the Price, including a Price code that informs the DSP of the Price the Release should be offered at, often in combination with a rate card. This element should not be combined with WholesalePricePerUnit or BulkOrderWholesalePricePerUnit.')

    
    # Element WholesalePricePerUnit uses Python identifier WholesalePricePerUnit
    __WholesalePricePerUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WholesalePricePerUnit'), 'WholesalePricePerUnit', '__httpddex_netxmlern36_PriceInformation_WholesalePricePerUnit', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1595, 9), )

    
    WholesalePricePerUnit = property(__WholesalePricePerUnit.value, __WholesalePricePerUnit.set, None, 'A Composite containing details of a wholesale Price for a single unit of Usage, which informs the informs the DSP of the Price the Release should be offered at. Note that this Price applies to all UseTypes referenced in a DealTerm Composite. This element should not be combined with PriceType.')

    
    # Element BulkOrderWholesalePricePerUnit uses Python identifier BulkOrderWholesalePricePerUnit
    __BulkOrderWholesalePricePerUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BulkOrderWholesalePricePerUnit'), 'BulkOrderWholesalePricePerUnit', '__httpddex_netxmlern36_PriceInformation_BulkOrderWholesalePricePerUnit', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1600, 9), )

    
    BulkOrderWholesalePricePerUnit = property(__BulkOrderWholesalePricePerUnit.value, __BulkOrderWholesalePricePerUnit.set, None, 'A Composite containing details of a wholesale Price for a single unit, which informs the informs the DSP of the Price the Release should be offered at. Note that the size of a bulk order is defined in the contract between MessageSender and the MessageRecipient. This element should not be combined with PriceType.')

    
    # Element SuggestedRetailPrice uses Python identifier SuggestedRetailPrice
    __SuggestedRetailPrice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SuggestedRetailPrice'), 'SuggestedRetailPrice', '__httpddex_netxmlern36_PriceInformation_SuggestedRetailPrice', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1607, 9), )

    
    SuggestedRetailPrice = property(__SuggestedRetailPrice.value, __SuggestedRetailPrice.set, None, 'A Composite containing details of a suggested retail Price.')

    
    # Attribute PriceType uses Python identifier PriceType_
    __PriceType_ = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PriceType'), 'PriceType_', '__httpddex_netxmlern36_PriceInformation_PriceType_', _ImportedBinding__avs.PriceInformationType)
    __PriceType_._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1613, 6)
    __PriceType_._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1613, 6)
    
    PriceType_ = property(__PriceType_.value, __PriceType_.set, None, 'A Type of the Price. This is represented in an XML schema as an XML Attribute. If no value is provided, a StandardRetailPrice is assumed.')

    _ElementMap.update({
        __Description.name() : __Description,
        __PriceRangeType.name() : __PriceRangeType,
        __PriceType.name() : __PriceType,
        __WholesalePricePerUnit.name() : __WholesalePricePerUnit,
        __BulkOrderWholesalePricePerUnit.name() : __BulkOrderWholesalePricePerUnit,
        __SuggestedRetailPrice.name() : __SuggestedRetailPrice
    })
    _AttributeMap.update({
        __PriceType_.name() : __PriceType_
    })
Namespace.addCategoryObject('typeBinding', 'PriceInformation', PriceInformation)


# Complex type {http://ddex.net/xml/ern/36}AdministratingRecordCompany with content type ELEMENT_ONLY
class AdministratingRecordCompany (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an AdministratingRecordCompany."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AdministratingRecordCompany')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4996, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern36_AdministratingRecordCompany_PartyId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5001, 9), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern36_AdministratingRecordCompany_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5007, 12), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A Composite containing details of the PartyName(s).')

    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_AdministratingRecordCompany_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5022, 6)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5022, 6)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the Role if it belongs to a proprietary scheme. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_AdministratingRecordCompany_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5027, 6)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5027, 6)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the Role. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute Role uses Python identifier Role
    __Role = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Role'), 'Role', '__httpddex_netxmlern36_AdministratingRecordCompany_Role', _ImportedBinding__avs.AdministratingRecordCompanyRole, required=True)
    __Role._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5032, 6)
    __Role._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5032, 6)
    
    Role = property(__Role.value, __Role.set, None, 'The role played by the Party responsible for administering Rights in a Resource or a Release.')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue,
        __Role.name() : __Role
    })
Namespace.addCategoryObject('typeBinding', 'AdministratingRecordCompany', AdministratingRecordCompany)


# Complex type {http://ddex.net/xml/ern/36}ArtistRole with content type SIMPLE
class ArtistRole (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an ArtistRole. Note: This can be used in a DdexMessage in relation to any Performance or Fixation either of which may form the whole or part of the Resource itself. Example: if an 'AssociatedPerformer' is shown as a Contributor to a MusicalWork it refers to a Performer of a Resource (e.g. a SoundRecording) expressing the MusicalWork."""
    _TypeDefinition = _ImportedBinding__avs.ArtistRole
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ArtistRole')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5116, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ArtistRole
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ArtistRole_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5122, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5122, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ArtistRole. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ArtistRole_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5127, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5127, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ArtistRole. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ArtistRole', ArtistRole)


# Complex type {http://ddex.net/xml/ern/36}AspectRatio with content type SIMPLE
class AspectRatio (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing an AspectRatio and an AspectRatioType."""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AspectRatio')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5135, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute AspectRatioType uses Python identifier AspectRatioType
    __AspectRatioType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'AspectRatioType'), 'AspectRatioType', '__httpddex_netxmlern36_AspectRatio_AspectRatioType', _ImportedBinding__avs.UnitOfFrameRate)
    __AspectRatioType._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5141, 12)
    __AspectRatioType._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5141, 12)
    
    AspectRatioType = property(__AspectRatioType.value, __AspectRatioType.set, None, 'The Type of the AspectRatio. This is represented in an XML schema as an XML Attribute. If this Attribute is not provided, it is assumed that the AspectRatio is a PixelAspectRatio.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __AspectRatioType.name() : __AspectRatioType
    })
Namespace.addCategoryObject('typeBinding', 'AspectRatio', AspectRatio)


# Complex type {http://ddex.net/xml/ern/36}AudioCodecType with content type SIMPLE
class AudioCodecType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an AudioCodecType."""
    _TypeDefinition = _ImportedBinding__avs.AudioCodecType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AudioCodecType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5149, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.AudioCodecType
    
    # Attribute Version uses Python identifier Version
    __Version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Version'), 'Version', '__httpddex_netxmlern36_AudioCodecType_Version', pyxb.binding.datatypes.string)
    __Version._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5155, 12)
    __Version._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5155, 12)
    
    Version = property(__Version.value, __Version.set, None, 'The Identifier of the Version of the AudioCodecType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_AudioCodecType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5160, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5160, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the AudioCodecType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_AudioCodecType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5165, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5165, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the AudioCodecType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Version.name() : __Version,
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'AudioCodecType', AudioCodecType)


# Complex type {http://ddex.net/xml/ern/36}BitRate with content type SIMPLE
class BitRate (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a BitRate and a UnitOfMeasure."""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BitRate')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5198, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute UnitOfMeasure uses Python identifier UnitOfMeasure
    __UnitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitOfMeasure'), 'UnitOfMeasure', '__httpddex_netxmlern36_BitRate_UnitOfMeasure', _ImportedBinding__avs.UnitOfBitRate)
    __UnitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5204, 12)
    __UnitOfMeasure._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5204, 12)
    
    UnitOfMeasure = property(__UnitOfMeasure.value, __UnitOfMeasure.set, None, 'The UnitOfMeasure of the BitRate. This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __UnitOfMeasure.name() : __UnitOfMeasure
    })
Namespace.addCategoryObject('typeBinding', 'BitRate', BitRate)


# Complex type {http://ddex.net/xml/ern/36}CarrierType with content type SIMPLE
class CarrierType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CarrierType."""
    _TypeDefinition = _ImportedBinding__avs.CarrierType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CarrierType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5239, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.CarrierType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_CarrierType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5245, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5245, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the CarrierType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_CarrierType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5250, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5250, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the CarrierType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'CarrierType', CarrierType)


# Complex type {http://ddex.net/xml/ern/36}CollectionType with content type SIMPLE
class CollectionType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CollectionType. Collections referenced from Video Resources are of CollectionType VideoChapter . Collections referenced from a Release composite are of CollectionType Series, Season or Episode."""
    _TypeDefinition = _ImportedBinding__avs.CollectionType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5383, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.CollectionType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_CollectionType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5389, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5389, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the CollectionType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_CollectionType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5394, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5394, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the CollectionType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'CollectionType', CollectionType)


# Complex type {http://ddex.net/xml/ern/36}CommercialModelType with content type SIMPLE
class CommercialModelType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CommercialModelType."""
    _TypeDefinition = _ImportedBinding__avs.CommercialModelType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CommercialModelType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5416, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.CommercialModelType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_CommercialModelType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5422, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5422, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the CommercialModelType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_CommercialModelType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5427, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5427, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the CommercialModelType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'CommercialModelType', CommercialModelType)


# Complex type {http://ddex.net/xml/ern/36}ContainerFormat with content type SIMPLE
class ContainerFormat (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ContainerFormat."""
    _TypeDefinition = _ImportedBinding__avs.ContainerFormat
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ContainerFormat')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5480, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ContainerFormat
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ContainerFormat_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5486, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5486, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ContainerFormat. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ContainerFormat_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5491, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5491, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ContainerFormat. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ContainerFormat', ContainerFormat)


# Complex type {http://ddex.net/xml/ern/36}CueOrigin with content type SIMPLE
class CueOrigin (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CueOrigin."""
    _TypeDefinition = _ImportedBinding__avs.CueOrigin
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CueOrigin')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5615, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.CueOrigin
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_CueOrigin_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5621, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5621, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the CueOrigin. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_CueOrigin_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5626, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5626, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the CueOrigin. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'CueOrigin', CueOrigin)


# Complex type {http://ddex.net/xml/ern/36}CueSheetType with content type SIMPLE
class CueSheetType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CueSheetType."""
    _TypeDefinition = _ImportedBinding__avs.CueSheetType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CueSheetType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5634, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.CueSheetType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_CueSheetType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5640, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5640, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the CueSheetType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_CueSheetType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5645, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5645, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the CueSheetType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'CueSheetType', CueSheetType)


# Complex type {http://ddex.net/xml/ern/36}CueThemeType with content type SIMPLE
class CueThemeType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ThemeType for a Creation referenced in a Cue."""
    _TypeDefinition = _ImportedBinding__avs.ThemeType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CueThemeType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5653, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ThemeType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_CueThemeType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5659, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5659, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the CueThemeType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_CueThemeType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5664, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5664, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the CueThemeType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'CueThemeType', CueThemeType)


# Complex type {http://ddex.net/xml/ern/36}CueUseType with content type SIMPLE
class CueUseType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a CueUseType."""
    _TypeDefinition = _ImportedBinding__avs.CueUseType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CueUseType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5672, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.CueUseType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_CueUseType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5678, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5678, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the CueUseType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_CueUseType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5683, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5683, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the CueUseType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'CueUseType', CueUseType)


# Complex type {http://ddex.net/xml/ern/36}CueVisualPerceptionType with content type SIMPLE
class CueVisualPerceptionType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a VisualPerceptionType for a Creation referenced in a Cue."""
    _TypeDefinition = _ImportedBinding__avs.VisualPerceptionType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CueVisualPerceptionType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5691, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.VisualPerceptionType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_CueVisualPerceptionType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5697, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5697, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the CueVisualPerceptionType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_CueVisualPerceptionType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5702, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5702, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the CueVisualPerceptionType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'CueVisualPerceptionType', CueVisualPerceptionType)


# Complex type {http://ddex.net/xml/ern/36}CueVocalType with content type SIMPLE
class CueVocalType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a VocalType for a Creation referenced in a Cue."""
    _TypeDefinition = _ImportedBinding__avs.VocalType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CueVocalType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5710, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.VocalType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_CueVocalType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5716, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5716, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the CueVocalType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_CueVocalType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5721, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5721, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the CueVocalType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'CueVocalType', CueVocalType)


# Complex type {http://ddex.net/xml/ern/36}DistributionChannelType with content type SIMPLE
class DistributionChannelType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a DistributionChannelType."""
    _TypeDefinition = _ImportedBinding__avs.DistributionChannelType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DistributionChannelType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5806, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.DistributionChannelType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_DistributionChannelType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5812, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5812, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the DistributionChannelType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_DistributionChannelType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5817, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5817, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the DistributionChannelType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'DistributionChannelType', DistributionChannelType)


# Complex type {http://ddex.net/xml/ern/36}DrmPlatformType with content type SIMPLE
class DrmPlatformType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a DrmPlatformType."""
    _TypeDefinition = _ImportedBinding__avs.DrmPlatformType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DrmPlatformType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5825, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.DrmPlatformType
    
    # Attribute Version uses Python identifier Version
    __Version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Version'), 'Version', '__httpddex_netxmlern36_DrmPlatformType_Version', pyxb.binding.datatypes.string)
    __Version._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5831, 12)
    __Version._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5831, 12)
    
    Version = property(__Version.value, __Version.set, None, 'The Identifier of the Version of the DrmPlatformType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_DrmPlatformType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5836, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5836, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the DrmPlatformType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_DrmPlatformType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5841, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5841, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the DrmPlatformType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Version.name() : __Version,
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'DrmPlatformType', DrmPlatformType)


# Complex type {http://ddex.net/xml/ern/36}Extent with content type SIMPLE
class Extent (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing an Extent and a UnitOfMeasure."""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Extent')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5927, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute UnitOfMeasure uses Python identifier UnitOfMeasure
    __UnitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitOfMeasure'), 'UnitOfMeasure', '__httpddex_netxmlern36_Extent_UnitOfMeasure', _ImportedBinding__avs.UnitOfExtent)
    __UnitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5933, 12)
    __UnitOfMeasure._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5933, 12)
    
    UnitOfMeasure = property(__UnitOfMeasure.value, __UnitOfMeasure.set, None, 'The UnitOfMeasure of the Extent. This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __UnitOfMeasure.name() : __UnitOfMeasure
    })
Namespace.addCategoryObject('typeBinding', 'Extent', Extent)


# Complex type {http://ddex.net/xml/ern/36}ExternallyLinkedResourceType with content type SIMPLE
class ExternallyLinkedResourceType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an ExternallyLinkedResourceType."""
    _TypeDefinition = _ImportedBinding__avs.ExternallyLinkedResourceType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExternallyLinkedResourceType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5976, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ExternallyLinkedResourceType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ExternallyLinkedResourceType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5982, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5982, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ExternallyLinkedResourceType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ExternallyLinkedResourceType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5987, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5987, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ExternallyLinkedResourceType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ExternallyLinkedResourceType', ExternallyLinkedResourceType)


# Complex type {http://ddex.net/xml/ern/36}FingerprintAlgorithmType with content type SIMPLE
class FingerprintAlgorithmType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a FingerprintAlgorithmType."""
    _TypeDefinition = _ImportedBinding__avs.FingerprintAlgorithmType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FingerprintAlgorithmType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6053, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.FingerprintAlgorithmType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_FingerprintAlgorithmType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6059, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6059, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the FingerprintAlgorithmType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_FingerprintAlgorithmType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6064, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6064, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the FingerprintAlgorithmType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'FingerprintAlgorithmType', FingerprintAlgorithmType)


# Complex type {http://ddex.net/xml/ern/36}FrameRate with content type SIMPLE
class FrameRate (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a FrameRate and a UnitOfMeasure."""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FrameRate')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6072, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute UnitOfMeasure uses Python identifier UnitOfMeasure
    __UnitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitOfMeasure'), 'UnitOfMeasure', '__httpddex_netxmlern36_FrameRate_UnitOfMeasure', _ImportedBinding__avs.UnitOfFrameRate)
    __UnitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6078, 12)
    __UnitOfMeasure._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6078, 12)
    
    UnitOfMeasure = property(__UnitOfMeasure.value, __UnitOfMeasure.set, None, 'The UnitOfMeasure of the FrameRate. This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __UnitOfMeasure.name() : __UnitOfMeasure
    })
Namespace.addCategoryObject('typeBinding', 'FrameRate', FrameRate)


# Complex type {http://ddex.net/xml/ern/36}GoverningAgreementType with content type SIMPLE
class GoverningAgreementType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a GoverningAgreementType."""
    _TypeDefinition = _ImportedBinding__avs.GoverningAgreementType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GoverningAgreementType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6130, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.GoverningAgreementType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_GoverningAgreementType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6136, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6136, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the GoverningAgreementType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_GoverningAgreementType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6141, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6141, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the GoverningAgreementType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'GoverningAgreementType', GoverningAgreementType)


# Complex type {http://ddex.net/xml/ern/36}HashSumAlgorithmType with content type SIMPLE
class HashSumAlgorithmType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a HashSumAlgorithmType."""
    _TypeDefinition = _ImportedBinding__avs.HashSumAlgorithmType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HashSumAlgorithmType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6166, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.HashSumAlgorithmType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_HashSumAlgorithmType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6172, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6172, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the HashSumAlgorithmType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_HashSumAlgorithmType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6177, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6177, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the HashSumAlgorithmType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'HashSumAlgorithmType', HashSumAlgorithmType)


# Complex type {http://ddex.net/xml/ern/36}ImageCodecType with content type SIMPLE
class ImageCodecType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an ImageCodecType."""
    _TypeDefinition = _ImportedBinding__avs.ImageCodecType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImageCodecType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6253, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ImageCodecType
    
    # Attribute Version uses Python identifier Version
    __Version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Version'), 'Version', '__httpddex_netxmlern36_ImageCodecType_Version', pyxb.binding.datatypes.string)
    __Version._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6259, 12)
    __Version._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6259, 12)
    
    Version = property(__Version.value, __Version.set, None, 'The Identifier of the Version of the ImageCodecType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ImageCodecType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6264, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6264, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ImageCodecType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ImageCodecType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6269, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6269, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ImageCodecType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Version.name() : __Version,
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ImageCodecType', ImageCodecType)


# Complex type {http://ddex.net/xml/ern/36}ImageType with content type SIMPLE
class ImageType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an ImageType."""
    _TypeDefinition = _ImportedBinding__avs.ImageType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImageType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6294, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ImageType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ImageType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6300, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6300, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ImageType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ImageType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6305, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6305, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ImageType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ImageType', ImageType)


# Complex type {http://ddex.net/xml/ern/36}LinkedReleaseResourceReference with content type SIMPLE
class LinkedReleaseResourceReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a LinkedReleaseResourceReference for a Resource which is linked to a ContentItem."""
    _TypeDefinition = ddex_LocalResourceAnchorReference
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LinkedReleaseResourceReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6388, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is ddex_LocalResourceAnchorReference
    
    # Attribute LinkDescription uses Python identifier LinkDescription
    __LinkDescription = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LinkDescription'), 'LinkDescription', '__httpddex_netxmlern36_LinkedReleaseResourceReference_LinkDescription', pyxb.binding.datatypes.string)
    __LinkDescription._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6394, 12)
    __LinkDescription._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6394, 12)
    
    LinkDescription = property(__LinkDescription.value, __LinkDescription.set, None, 'A Composite containing a  Description of the link for the ReleaseResourceReference.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_LinkedReleaseResourceReference_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6399, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6399, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the LinkDescription as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __LinkDescription.name() : __LinkDescription,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'LinkedReleaseResourceReference', LinkedReleaseResourceReference)


# Complex type {http://ddex.net/xml/ern/36}MidiType with content type SIMPLE
class MidiType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a MidiType."""
    _TypeDefinition = _ImportedBinding__avs.MidiType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MidiType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6578, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.MidiType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_MidiType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6584, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6584, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the MidiType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_MidiType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6589, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6589, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the MidiType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'MidiType', MidiType)


# Complex type {http://ddex.net/xml/ern/36}MusicalWorkType with content type SIMPLE
class MusicalWorkType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a MusicalWorkType."""
    _TypeDefinition = _ImportedBinding__avs.MusicalWorkType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MusicalWorkType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6812, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.MusicalWorkType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_MusicalWorkType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6818, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6818, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the MusicalWorkType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_MusicalWorkType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6823, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6823, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the MusicalWorkType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'MusicalWorkType', MusicalWorkType)


# Complex type {http://ddex.net/xml/ern/36}OperatingSystemType with content type SIMPLE
class OperatingSystemType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of an OperatingSystemType."""
    _TypeDefinition = _ImportedBinding__avs.OperatingSystemType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OperatingSystemType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6845, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.OperatingSystemType
    
    # Attribute Version uses Python identifier Version
    __Version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Version'), 'Version', '__httpddex_netxmlern36_OperatingSystemType_Version', pyxb.binding.datatypes.string)
    __Version._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6851, 12)
    __Version._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6851, 12)
    
    Version = property(__Version.value, __Version.set, None, 'The Identifier of the Version of the OperatingSystemType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_OperatingSystemType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6856, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6856, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the OperatingSystemType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_OperatingSystemType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6861, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6861, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the OperatingSystemType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Version.name() : __Version,
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'OperatingSystemType', OperatingSystemType)


# Complex type {http://ddex.net/xml/ern/36}PLine with content type ELEMENT_ONLY
class PLine (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a PLine."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PLine')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6869, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Year uses Python identifier Year
    __Year = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Year'), 'Year', '__httpddex_netxmlern36_PLine_Year', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6874, 9), )

    
    Year = property(__Year.value, __Year.set, None, 'The Year of the PLine.')

    
    # Element PLineCompany uses Python identifier PLineCompany
    __PLineCompany = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLineCompany'), 'PLineCompany', '__httpddex_netxmlern36_PLine_PLineCompany', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6879, 9), )

    
    PLineCompany = property(__PLineCompany.value, __PLineCompany.set, None, 'The Name of the company releasing the Creation. This may be an owner or a licensee of the Creation.')

    
    # Element PLineText uses Python identifier PLineText
    __PLineText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLineText'), 'PLineText', '__httpddex_netxmlern36_PLine_PLineText', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6884, 9), )

    
    PLineText = property(__PLineText.value, __PLineText.set, None, 'The text of the PLine.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_PLine_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6890, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6890, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script of the PLineText as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant]. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute PLineType uses Python identifier PLineType
    __PLineType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'PLineType'), 'PLineType', '__httpddex_netxmlern36_PLine_PLineType', _ImportedBinding__avs.PLineType)
    __PLineType._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6895, 6)
    __PLineType._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6895, 6)
    
    PLineType = property(__PLineType.value, __PLineType.set, None, 'A Type of PLine. This is represented in an XML schema as an XML Attribute. If this Attribute is not provided, it is assumed that the PLine is a OriginalPLine.')

    _ElementMap.update({
        __Year.name() : __Year,
        __PLineCompany.name() : __PLineCompany,
        __PLineText.name() : __PLineText
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode,
        __PLineType.name() : __PLineType
    })
Namespace.addCategoryObject('typeBinding', 'PLine', PLine)


# Complex type {http://ddex.net/xml/ern/36}ParentalWarningType with content type SIMPLE
class ParentalWarningType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ParentalWarningType."""
    _TypeDefinition = _ImportedBinding__avs.ParentalWarningType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ParentalWarningType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6901, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ParentalWarningType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ParentalWarningType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6907, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6907, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ParentalWarningType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ParentalWarningType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6912, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6912, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ParentalWarningType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ParentalWarningType', ParentalWarningType)


# Complex type {http://ddex.net/xml/ern/36}PriceRangeType with content type SIMPLE
class PriceRangeType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a PriceRangeType."""
    _TypeDefinition = _ImportedBinding__avs.PriceRangeType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PriceRangeType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7063, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.PriceRangeType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_PriceRangeType_Namespace', pyxb.binding.datatypes.string, required=True)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7069, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7069, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the PriceRangeType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace
    })
Namespace.addCategoryObject('typeBinding', 'PriceRangeType', PriceRangeType)


# Complex type {http://ddex.net/xml/ern/36}PriceType with content type SIMPLE
class PriceType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a PriceType."""
    _TypeDefinition = _ImportedBinding__avs.PriceType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PriceType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7077, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.PriceType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_PriceType_Namespace', pyxb.binding.datatypes.string, required=True)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7083, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7083, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the PriceType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace
    })
Namespace.addCategoryObject('typeBinding', 'PriceType', PriceType)


# Complex type {http://ddex.net/xml/ern/36}Purpose with content type SIMPLE
class Purpose (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Purpose."""
    _TypeDefinition = _ImportedBinding__avs.Purpose
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Purpose')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7119, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.Purpose
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_Purpose_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7125, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7125, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the Purpose. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_Purpose_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7130, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7130, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the Purpose. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'Purpose', Purpose)


# Complex type {http://ddex.net/xml/ern/36}RatingAgency with content type SIMPLE
class RatingAgency (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a RatingAgency."""
    _TypeDefinition = _ImportedBinding__avs.RatingAgency
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RatingAgency')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7138, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.RatingAgency
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_RatingAgency_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7144, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7144, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the RatingAgency. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_RatingAgency_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7149, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7149, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the RatingAgency. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'RatingAgency', RatingAgency)


# Complex type {http://ddex.net/xml/ern/36}ReasonType with content type SIMPLE
class ReasonType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ReasonType."""
    _TypeDefinition = _ImportedBinding__avs.ReasonType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReasonType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7171, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ReasonType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ReasonType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7177, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7177, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ReasonType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ReasonType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7182, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7182, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ReasonType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ReasonType', ReasonType)


# Complex type {http://ddex.net/xml/ern/36}ReleaseCollectionReference with content type SIMPLE
class ReleaseCollectionReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ReleaseCollectionReference."""
    _TypeDefinition = ddex_LocalCollectionAnchorReference
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseCollectionReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7262, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is ddex_LocalCollectionAnchorReference
    
    # Attribute ReleaseResourceType uses Python identifier ReleaseResourceType
    __ReleaseResourceType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReleaseResourceType'), 'ReleaseResourceType', '__httpddex_netxmlern36_ReleaseCollectionReference_ReleaseResourceType', _ImportedBinding__avs.ReleaseResourceType)
    __ReleaseResourceType._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7268, 12)
    __ReleaseResourceType._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7268, 12)
    
    ReleaseResourceType = property(__ReleaseResourceType.value, __ReleaseResourceType.set, None, 'A Type of Collection in the context of a Release. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ReleaseResourceType.name() : __ReleaseResourceType
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseCollectionReference', ReleaseCollectionReference)


# Complex type {http://ddex.net/xml/ern/36}ReleaseRelationshipType with content type SIMPLE
class ReleaseRelationshipType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ReleaseRelationshipType, e.g. between an AudioClipRelease and a VideoClipRelease."""
    _TypeDefinition = _ImportedBinding__avs.ReleaseRelationshipType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseRelationshipType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7335, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ReleaseRelationshipType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ReleaseRelationshipType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7341, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7341, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ReleaseRelationshipType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ReleaseRelationshipType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7346, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7346, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ReleaseRelationshipType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseRelationshipType', ReleaseRelationshipType)


# Complex type {http://ddex.net/xml/ern/36}ReleaseResourceReference with content type SIMPLE
class ReleaseResourceReference (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ReleaseResourceReference."""
    _TypeDefinition = ddex_LocalResourceAnchorReference
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseResourceReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7354, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is ddex_LocalResourceAnchorReference
    
    # Attribute ReleaseResourceType uses Python identifier ReleaseResourceType
    __ReleaseResourceType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReleaseResourceType'), 'ReleaseResourceType', '__httpddex_netxmlern36_ReleaseResourceReference_ReleaseResourceType', _ImportedBinding__avs.ReleaseResourceType)
    __ReleaseResourceType._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7360, 12)
    __ReleaseResourceType._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7360, 12)
    
    ReleaseResourceType = property(__ReleaseResourceType.value, __ReleaseResourceType.set, None, 'A Type of Resource in the context of a Release. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __ReleaseResourceType.name() : __ReleaseResourceType
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseResourceReference', ReleaseResourceReference)


# Complex type {http://ddex.net/xml/ern/36}ReleaseType with content type SIMPLE
class ReleaseType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ReleaseType."""
    _TypeDefinition = _ImportedBinding__avs.ReleaseType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7429, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ReleaseType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ReleaseType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7435, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7435, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ReleaseType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ReleaseType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7440, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7440, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ReleaseType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseType', ReleaseType)


# Complex type {http://ddex.net/xml/ern/36}ResourceContributorRole with content type SIMPLE
class ResourceContributorRole (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ResourceContributorRole. Note: This can be used in a DdexMessage in relation to any Work, Performance or Fixation any of which may form the whole or part of the Resource itself."""
    _TypeDefinition = _ImportedBinding__avs.ResourceContributorRole
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceContributorRole')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7494, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ResourceContributorRole
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ResourceContributorRole_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7500, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7500, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ResourceContributorRole. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ResourceContributorRole_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7505, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7505, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ResourceContributorRole. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ResourceContributorRole', ResourceContributorRole)


# Complex type {http://ddex.net/xml/ern/36}ResourceOmissionReason with content type SIMPLE
class ResourceOmissionReason (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ResourceOmissionReason."""
    _TypeDefinition = _ImportedBinding__avs.ResourceOmissionReason
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceOmissionReason')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7653, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ResourceOmissionReason
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ResourceOmissionReason_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7659, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7659, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ResourceOmissionReason. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ResourceOmissionReason_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7664, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7664, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ResourceOmissionReason. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ResourceOmissionReason', ResourceOmissionReason)


# Complex type {http://ddex.net/xml/ern/36}ResourceType with content type SIMPLE
class ResourceType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a ResourceType. For example a SoundRecording of a Performance of a MusicalWork or an Image of an Artist."""
    _TypeDefinition = _ImportedBinding__avs.ResourceType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7672, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.ResourceType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_ResourceType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7678, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7678, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the ResourceType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_ResourceType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7683, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7683, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the ResourceType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'ResourceType', ResourceType)


# Complex type {http://ddex.net/xml/ern/36}SamplingRate with content type SIMPLE
class SamplingRate (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing a SamplingRate and a UnitOfMeasure."""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SamplingRate')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7999, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute UnitOfMeasure uses Python identifier UnitOfMeasure
    __UnitOfMeasure = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UnitOfMeasure'), 'UnitOfMeasure', '__httpddex_netxmlern36_SamplingRate_UnitOfMeasure', _ImportedBinding__avs.UnitOfFrequency)
    __UnitOfMeasure._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8005, 12)
    __UnitOfMeasure._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8005, 12)
    
    UnitOfMeasure = property(__UnitOfMeasure.value, __UnitOfMeasure.set, None, 'The UnitOfMeasure of the SamplingRate. This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __UnitOfMeasure.name() : __UnitOfMeasure
    })
Namespace.addCategoryObject('typeBinding', 'SamplingRate', SamplingRate)


# Complex type {http://ddex.net/xml/ern/36}SheetMusicCodecType with content type SIMPLE
class SheetMusicCodecType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a SheetMusicCodecType."""
    _TypeDefinition = _ImportedBinding__avs.SheetMusicCodecType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SheetMusicCodecType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8013, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.SheetMusicCodecType
    
    # Attribute Version uses Python identifier Version
    __Version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Version'), 'Version', '__httpddex_netxmlern36_SheetMusicCodecType_Version', pyxb.binding.datatypes.string)
    __Version._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8019, 12)
    __Version._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8019, 12)
    
    Version = property(__Version.value, __Version.set, None, 'The Identifier of the Version of the SheetMusicCodecType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_SheetMusicCodecType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8024, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8024, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the SheetMusicCodecType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_SheetMusicCodecType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8029, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8029, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the SheetMusicCodecType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Version.name() : __Version,
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'SheetMusicCodecType', SheetMusicCodecType)


# Complex type {http://ddex.net/xml/ern/36}SheetMusicType with content type SIMPLE
class SheetMusicType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a SheetMusicType."""
    _TypeDefinition = _ImportedBinding__avs.SheetMusicType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SheetMusicType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8062, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.SheetMusicType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_SheetMusicType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8068, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8068, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the SheetMusicType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_SheetMusicType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8073, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8073, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the SheetMusicType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'SheetMusicType', SheetMusicType)


# Complex type {http://ddex.net/xml/ern/36}SoftwareType with content type SIMPLE
class SoftwareType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a SoftwareType."""
    _TypeDefinition = _ImportedBinding__avs.SoftwareType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoftwareType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8124, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.SoftwareType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_SoftwareType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8130, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8130, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the SoftwareType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_SoftwareType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8135, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8135, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the SoftwareType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'SoftwareType', SoftwareType)


# Complex type {http://ddex.net/xml/ern/36}SoundProcessorType with content type SIMPLE
class SoundProcessorType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a SoundProcessorType."""
    _TypeDefinition = _ImportedBinding__avs.SoundProcessorType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoundProcessorType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8143, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.SoundProcessorType
    
    # Attribute Version uses Python identifier Version
    __Version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Version'), 'Version', '__httpddex_netxmlern36_SoundProcessorType_Version', pyxb.binding.datatypes.string)
    __Version._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8149, 12)
    __Version._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8149, 12)
    
    Version = property(__Version.value, __Version.set, None, 'The Identifier of the Version of the SoundProcessorType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_SoundProcessorType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8154, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8154, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the SoundProcessorType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_SoundProcessorType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8159, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8159, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the SoundProcessorType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Version.name() : __Version,
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'SoundProcessorType', SoundProcessorType)


# Complex type {http://ddex.net/xml/ern/36}SoundRecordingType with content type SIMPLE
class SoundRecordingType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a SoundRecordingType."""
    _TypeDefinition = _ImportedBinding__avs.SoundRecordingType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoundRecordingType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8260, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.SoundRecordingType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_SoundRecordingType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8266, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8266, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the SoundRecordingType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_SoundRecordingType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8271, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8271, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the SoundRecordingType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'SoundRecordingType', SoundRecordingType)


# Complex type {http://ddex.net/xml/ern/36}TextCodecType with content type SIMPLE
class TextCodecType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a TextCodecType."""
    _TypeDefinition = _ImportedBinding__avs.TextCodecType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TextCodecType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8357, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.TextCodecType
    
    # Attribute Version uses Python identifier Version
    __Version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Version'), 'Version', '__httpddex_netxmlern36_TextCodecType_Version', pyxb.binding.datatypes.string)
    __Version._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8363, 12)
    __Version._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8363, 12)
    
    Version = property(__Version.value, __Version.set, None, 'The Identifier of the Version of the TextCodecType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_TextCodecType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8368, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8368, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the TextCodecType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_TextCodecType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8373, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8373, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the TextCodecType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Version.name() : __Version,
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'TextCodecType', TextCodecType)


# Complex type {http://ddex.net/xml/ern/36}TextType with content type SIMPLE
class TextType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a TextType."""
    _TypeDefinition = _ImportedBinding__avs.TextType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TextType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8416, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.TextType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_TextType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8422, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8422, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the TextType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_TextType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8427, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8427, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the TextType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'TextType', TextType)


# Complex type {http://ddex.net/xml/ern/36}Title with content type ELEMENT_ONLY
class Title (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Title."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Title')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8435, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TitleText uses Python identifier TitleText
    __TitleText = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TitleText'), 'TitleText', '__httpddex_netxmlern36_Title_TitleText', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8440, 9), )

    
    TitleText = property(__TitleText.value, __TitleText.set, None, 'A Composite containing the text of the Title.')

    
    # Element SubTitle uses Python identifier SubTitle
    __SubTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SubTitle'), 'SubTitle', '__httpddex_netxmlern36_Title_SubTitle', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8445, 9), )

    
    SubTitle = property(__SubTitle.value, __SubTitle.set, None, 'A Composite containing details of a SubTitle of the Title, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_Title_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8454, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8454, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the Elements of the Title as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    
    # Attribute TitleType uses Python identifier TitleType
    __TitleType = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TitleType'), 'TitleType', '__httpddex_netxmlern36_Title_TitleType', _ImportedBinding__avs.TitleType)
    __TitleType._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8459, 6)
    __TitleType._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8459, 6)
    
    TitleType = property(__TitleType.value, __TitleType.set, None, "A Type of the Title which defines its origin or the function it fulfils in relation to a Creation. Note: A Title may fulfil more than one role. Example: 'Help' may be both the OriginalTitle and the DisplayTitle for the well-known Beatles song. This is represented in an XML schema as an XML Attribute.")

    _ElementMap.update({
        __TitleText.name() : __TitleText,
        __SubTitle.name() : __SubTitle
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode,
        __TitleType.name() : __TitleType
    })
Namespace.addCategoryObject('typeBinding', 'Title', Title)


# Complex type {http://ddex.net/xml/ern/36}UseType with content type SIMPLE
class UseType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a UseType."""
    _TypeDefinition = _ImportedBinding__avs.UseType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UseType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8546, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.UseType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_UseType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8552, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8552, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the UseType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_UseType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8557, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8557, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the UseType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'UseType', UseType)


# Complex type {http://ddex.net/xml/ern/36}UserInterfaceType with content type SIMPLE
class UserInterfaceType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a UserInterfaceType."""
    _TypeDefinition = _ImportedBinding__avs.UserInterfaceType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserInterfaceType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8620, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.UserInterfaceType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_UserInterfaceType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8626, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8626, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the UserInterfaceType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_UserInterfaceType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8631, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8631, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the UserInterfaceType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'UserInterfaceType', UserInterfaceType)


# Complex type {http://ddex.net/xml/ern/36}VideoCodecType with content type SIMPLE
class VideoCodecType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a VideoCodecType."""
    _TypeDefinition = _ImportedBinding__avs.VideoCodecType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VideoCodecType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8639, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.VideoCodecType
    
    # Attribute Version uses Python identifier Version
    __Version = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Version'), 'Version', '__httpddex_netxmlern36_VideoCodecType_Version', pyxb.binding.datatypes.string)
    __Version._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8645, 12)
    __Version._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8645, 12)
    
    Version = property(__Version.value, __Version.set, None, 'The Identifier of the Version of the VideoCodecType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_VideoCodecType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8650, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8650, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the VideoCodecType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_VideoCodecType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8655, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8655, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the VideoCodecType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Version.name() : __Version,
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'VideoCodecType', VideoCodecType)


# Complex type {http://ddex.net/xml/ern/36}VideoType with content type SIMPLE
class VideoType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a VideoType."""
    _TypeDefinition = _ImportedBinding__avs.VideoType
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VideoType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8720, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.VideoType
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_VideoType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8726, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8726, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the VideoType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_VideoType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8731, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8731, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the VideoType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'VideoType', VideoType)


# Complex type {http://ddex.net/xml/ern/36}EventDate with content type SIMPLE
class EventDate (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of the Date and Place of an Event."""
    _TypeDefinition = pyxb.binding.datatypes.date
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventDate')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5849, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.date
    
    # Attribute IsApproximate uses Python identifier IsApproximate
    __IsApproximate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsApproximate'), 'IsApproximate', '__httpddex_netxmlern36_EventDate_IsApproximate', pyxb.binding.datatypes.boolean)
    __IsApproximate._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5855, 12)
    __IsApproximate._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5855, 12)
    
    IsApproximate = property(__IsApproximate.value, __IsApproximate.set, None, 'The Flag indicating whether the reported Date is approximate (=True) or exact (=False). This is represented in an XML schema as an XML Attribute. ')

    
    # Attribute IsBefore uses Python identifier IsBefore
    __IsBefore = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsBefore'), 'IsBefore', '__httpddex_netxmlern36_EventDate_IsBefore', pyxb.binding.datatypes.boolean)
    __IsBefore._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5860, 12)
    __IsBefore._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5860, 12)
    
    IsBefore = property(__IsBefore.value, __IsBefore.set, None, 'The Flag indicating whether the Event being described occurred sometime before the reported Date (=True) or not (=False). This is represented in an XML schema as an XML Attribute.')

    
    # Attribute IsAfter uses Python identifier IsAfter
    __IsAfter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsAfter'), 'IsAfter', '__httpddex_netxmlern36_EventDate_IsAfter', pyxb.binding.datatypes.boolean)
    __IsAfter._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5865, 12)
    __IsAfter._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5865, 12)
    
    IsAfter = property(__IsAfter.value, __IsAfter.set, None, 'The Flag indicating whether the Event being described occurred sometime after the reported Date (=True) or not (=False). This is represented in an XML schema as an XML Attribute.')

    
    # Attribute TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_EventDate_TerritoryCode', _ImportedBinding__avs.TerritoryCode)
    __TerritoryCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5870, 12)
    __TerritoryCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5870, 12)
    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'The Territory in which the Event occurred (represented by an ISO 3166-1 TerritoryCode). This is represented in an XML schema as an XML Attribute.')

    
    # Attribute LocationDescription uses Python identifier LocationDescription
    __LocationDescription = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LocationDescription'), 'LocationDescription', '__httpddex_netxmlern36_EventDate_LocationDescription', pyxb.binding.datatypes.string)
    __LocationDescription._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5875, 12)
    __LocationDescription._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5875, 12)
    
    LocationDescription = property(__LocationDescription.value, __LocationDescription.set, None, 'A Description of the location in which the Event occurred. It offers the opportunity to describe a place more precisely than using the TerritoryCode. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_EventDate_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5880, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5880, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the LocationDescription as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __IsApproximate.name() : __IsApproximate,
        __IsBefore.name() : __IsBefore,
        __IsAfter.name() : __IsAfter,
        __TerritoryCode.name() : __TerritoryCode,
        __LocationDescription.name() : __LocationDescription,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'EventDate', EventDate)


# Complex type {http://ddex.net/xml/ern/36}EventDateTime with content type SIMPLE
class EventDateTime (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of the DateTime and Place of an Event."""
    _TypeDefinition = pyxb.binding.datatypes.dateTime
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EventDateTime')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5888, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.dateTime
    
    # Attribute IsApproximate uses Python identifier IsApproximate
    __IsApproximate = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsApproximate'), 'IsApproximate', '__httpddex_netxmlern36_EventDateTime_IsApproximate', pyxb.binding.datatypes.boolean)
    __IsApproximate._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5894, 12)
    __IsApproximate._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5894, 12)
    
    IsApproximate = property(__IsApproximate.value, __IsApproximate.set, None, 'The Flag indicating whether the reported DateTime is approximate (=True) or exact (=False). This is represented in an XML schema as an XML Attribute. ')

    
    # Attribute IsBefore uses Python identifier IsBefore
    __IsBefore = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsBefore'), 'IsBefore', '__httpddex_netxmlern36_EventDateTime_IsBefore', pyxb.binding.datatypes.boolean)
    __IsBefore._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5899, 12)
    __IsBefore._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5899, 12)
    
    IsBefore = property(__IsBefore.value, __IsBefore.set, None, 'The Flag indicating whether the Event being described occurred sometime before the reported DateTime (=True) or not (=False). This is represented in an XML schema as an XML Attribute.')

    
    # Attribute IsAfter uses Python identifier IsAfter
    __IsAfter = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsAfter'), 'IsAfter', '__httpddex_netxmlern36_EventDateTime_IsAfter', pyxb.binding.datatypes.boolean)
    __IsAfter._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5904, 12)
    __IsAfter._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5904, 12)
    
    IsAfter = property(__IsAfter.value, __IsAfter.set, None, 'The Flag indicating whether the Event being described occurred sometime after the reported DateTime (=True) or not (=False). This is represented in an XML schema as an XML Attribute.')

    
    # Attribute TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_EventDateTime_TerritoryCode', _ImportedBinding__avs.TerritoryCode)
    __TerritoryCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5909, 12)
    __TerritoryCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5909, 12)
    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'The Territory in which the Event occurred (represented by an ISO 3166-1 TerritoryCode). This is represented in an XML schema as an XML Attribute.')

    
    # Attribute LocationDescription uses Python identifier LocationDescription
    __LocationDescription = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LocationDescription'), 'LocationDescription', '__httpddex_netxmlern36_EventDateTime_LocationDescription', pyxb.binding.datatypes.string)
    __LocationDescription._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5914, 12)
    __LocationDescription._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5914, 12)
    
    LocationDescription = property(__LocationDescription.value, __LocationDescription.set, None, 'A Description of the location in which the Event occurred. It offers the opportunity to describe a place more precisely than using the TerritoryCode. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern36_EventDateTime_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5919, 12)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5919, 12)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The Language and script for the LocationDescription as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __IsApproximate.name() : __IsApproximate,
        __IsBefore.name() : __IsBefore,
        __IsAfter.name() : __IsAfter,
        __TerritoryCode.name() : __TerritoryCode,
        __LocationDescription.name() : __LocationDescription,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'EventDateTime', EventDateTime)


# Complex type {http://ddex.net/xml/ern/36}MusicalWorkContributorRole with content type SIMPLE
class MusicalWorkContributorRole (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a MusicalWorkContributorRole. Note: This can be used in a DdexMessage in relation to any Work, Performance or Fixation any of which may form the whole or part of the Resource itself. Example: if an 'AssociatedPerformer' is shown as a Contributor to a MusicalWork it refers to a performer of a Resource (e.g. a SoundRecording) expressing the MusicalWork."""
    _TypeDefinition = _ImportedBinding__avs.MusicalWorkContributorRole
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MusicalWorkContributorRole')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6722, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.MusicalWorkContributorRole
    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_MusicalWorkContributorRole_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6728, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6728, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the MusicalWorkContributorRole. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_MusicalWorkContributorRole_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6733, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6733, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the MusicalWorkContributorRole. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'MusicalWorkContributorRole', MusicalWorkContributorRole)


# Complex type {http://ddex.net/xml/ern/36}Price with content type SIMPLE
class Price (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a Price."""
    _TypeDefinition = pyxb.binding.datatypes.decimal
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Price')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7049, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.decimal
    
    # Attribute CurrencyCode uses Python identifier CurrencyCode
    __CurrencyCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'CurrencyCode'), 'CurrencyCode', '__httpddex_netxmlern36_Price_CurrencyCode', _ImportedBinding__avs.CurrencyCode, required=True)
    __CurrencyCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7055, 12)
    __CurrencyCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7055, 12)
    
    CurrencyCode = property(__CurrencyCode.value, __CurrencyCode.set, None, 'The Currency of the Price (represented by an ISO 4217 CurrencyCode). This is represented in an XML schema as an XML Attribute. ')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __CurrencyCode.name() : __CurrencyCode
    })
Namespace.addCategoryObject('typeBinding', 'Price', Price)


# Complex type {http://ddex.net/xml/ern/36}RightsType with content type SIMPLE
class RightsType (pyxb.binding.basis.complexTypeDefinition):
    """A Composite containing details of a RightsType."""
    _TypeDefinition = _ImportedBinding__avs.RightsCoverage
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RightsType')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7953, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is _ImportedBinding__avs.RightsCoverage
    
    # Attribute TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern36_RightsType_TerritoryCode', _ImportedBinding__avs.TerritoryCode, required=True)
    __TerritoryCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7959, 12)
    __TerritoryCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7959, 12)
    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A Territory to which the RightsType applies (represented by an ISO 3166-1 TerritoryCode). The RightsType is defined according to the jurisdiction of this Territory.')

    
    # Attribute Namespace uses Python identifier Namespace_
    __Namespace = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'Namespace'), 'Namespace_', '__httpddex_netxmlern36_RightsType_Namespace', pyxb.binding.datatypes.string)
    __Namespace._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7964, 12)
    __Namespace._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7964, 12)
    
    Namespace_ = property(__Namespace.value, __Namespace.set, None, 'The Namespace of the RightsType. This is represented in an XML schema as an XML Attribute.')

    
    # Attribute UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern36_RightsType_UserDefinedValue', pyxb.binding.datatypes.string)
    __UserDefinedValue._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7969, 12)
    __UserDefinedValue._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7969, 12)
    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A UserDefined value of the RightsType. This is represented in an XML schema as an XML Attribute.')

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __Namespace.name() : __Namespace,
        __UserDefinedValue.name() : __UserDefinedValue
    })
Namespace.addCategoryObject('typeBinding', 'RightsType', RightsType)


NewReleaseMessage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NewReleaseMessage'), CTD_ANON, documentation='A Message in the Release Notification Message Suite Standard, containing details of a new Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 13, 3))
Namespace.addCategoryObject('elementBinding', NewReleaseMessage.name().localName(), NewReleaseMessage)

CatalogListMessage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CatalogListMessage'), CTD_ANON_, documentation='A Message in the Release Notification Message Suite Standard, containing a list of Releases that form part of a catalog.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 92, 3))
Namespace.addCategoryObject('elementBinding', CatalogListMessage.name().localName(), CatalogListMessage)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageHeader'), MessageHeader, scope=CTD_ANON, documentation='The MessageHeader for the NewReleaseMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 19, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdateIndicator'), _ImportedBinding__avs.UpdateIndicator, scope=CTD_ANON, documentation='The indicator which distinguishes whether the Message contains original data or updates to previously sent data. This element is deprecated. DDEX advises that it may be removed at a future date and therefore recommends against using it.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 24, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBackfill'), pyxb.binding.datatypes.boolean, scope=CTD_ANON, documentation='A Flag indicating whether the NewReleaseMessage is sent as part of a backfill activity (as opposed to providing ongoing deliveries of frontline Releases) (=True) or not (=False). When this element is not present, then no information on whether it is part of a backfill activity or not is provided.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 29, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogTransfer'), CatalogTransfer, scope=CTD_ANON, documentation='A Composite containing details of a Price change.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 34, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WorkList'), WorkList, scope=CTD_ANON, documentation='A Composite containing details of one or more MusicalWorks, a Performance of which is contained in the Resources of the NewReleaseMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 39, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueSheetList'), CueSheetList, scope=CTD_ANON, documentation='A Composite containing details of one or more CueSheets contained in Releases for which data is provided in the NewReleaseMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 44, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceList'), ResourceList, scope=CTD_ANON, documentation='A Composite containing details of one or more Resources.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 49, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionList'), CollectionList, scope=CTD_ANON, documentation='A Composite containing details of one or more Collections contained in Releases for which data is provided in the NewReleaseMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 54, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseList'), ReleaseList, scope=CTD_ANON, documentation='A Composite containing details of one or more DDEX Releases contained in the NewReleaseMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 59, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealList'), DealList, scope=CTD_ANON, documentation='A Composite containing details of one or more Deals governing the Usage of the Releases in the Message.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 64, 12)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 24, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 29, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 34, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 39, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 44, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 54, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 64, 12))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageHeader')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 19, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdateIndicator')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 24, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBackfill')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 29, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogTransfer')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 34, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'WorkList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 39, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'CueSheetList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 44, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 49, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 54, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 59, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'DealList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 64, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageHeader'), MessageHeader, scope=CTD_ANON_, documentation='The MessageHeader for the CatalogListMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 98, 12)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PublicationDate'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_, documentation='The DateTime at which the catalog will become available (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 103, 12)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogItem'), CatalogItem, scope=CTD_ANON_, documentation='A Composite containing details of a Release which is an item of the catalog.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 108, 12)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageHeader')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 98, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'PublicationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 103, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogItem')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 108, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=CatalogItem, documentation='A Territory for the Release (represented by an ISO 3166-1 TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 141, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), ReleaseId, scope=CatalogItem, documentation='A Composite containing details of ReleaseIds. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 146, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=CatalogItem, documentation='A Composite containing details of a Title of the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 151, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtistName'), Name, scope=CatalogItem, documentation='A Composite containing the Name to be used by a DSP when presenting Artist details of the Release to a Consumer.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 156, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContributorName'), Name, scope=CatalogItem, documentation='A Composite containing details of a Contributor to the catalog, i.e. to at least one of the included Releases.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 161, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayTitle'), ReferenceTitle, scope=CatalogItem, documentation='A Composite containing details of a DisplayTitle of the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 166, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), LabelName, scope=CatalogItem, documentation='A Composite containing the Name of the Label for the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 171, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), Genre, scope=CatalogItem, documentation='A Composite containing details of a Genre to which the Release belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 176, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), PLine, scope=CatalogItem, documentation='A Composite containing details of the PLine for the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 184, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), CLine, scope=CatalogItem, documentation='A Composite containing details of the CLine for the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 192, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDate'), EventDate, scope=CatalogItem, documentation='A Composite containing details of the Date and Place of the Event in which the Release was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 200, 9)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 176, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 184, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 192, 9))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 141, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 146, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 151, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtistName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 156, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ContributorName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 161, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 166, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 171, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 176, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 184, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 192, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 200, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CatalogItem._Automaton = _BuildAutomaton_2()




CatalogReleaseReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReference'), STD_ANON, scope=CatalogReleaseReferenceList, documentation='A Reference for a Release (specific to this Message) that is part of the catalog. This is a LocalReleaseAnchorReference starting with the letter R.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 212, 9)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CatalogReleaseReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 212, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CatalogReleaseReferenceList._Automaton = _BuildAutomaton_3()




CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogTransferCompleted'), pyxb.binding.datatypes.boolean, scope=CatalogTransfer, documentation='A Flag indicating whether the CatalogTransfer has been made (=True) or still needs to be made (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 229, 9)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EffectiveTransferDate'), EventDate, scope=CatalogTransfer, documentation='A Composite containing details of the Date and Place of the Event in which the catalog is or was transferred.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 234, 9)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReferenceList'), CatalogReleaseReferenceList, scope=CatalogTransfer, documentation='A Composite containing details of one or more Releases contained in the catalog that is or was transferred.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 239, 9)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=CatalogTransfer, documentation='A Territory to which the CatalogTransfer applies (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory must be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 246, 12)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=CatalogTransfer, documentation='A Territory to which the CatalogTransfer does not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory must be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 251, 12)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TransferringFrom'), PartyDescriptor, scope=CatalogTransfer, documentation='A Composite containing details of the old RightsController.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 259, 9)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TransferringTo'), PartyDescriptor, scope=CatalogTransfer, documentation='A Composite containing details of the new RightsController.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 264, 9)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 234, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogTransferCompleted')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 229, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'EffectiveTransferDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 234, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 239, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 246, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 251, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'TransferringFrom')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 259, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'TransferringTo')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 264, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CatalogTransfer._Automaton = _BuildAutomaton_4()




Character._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=Character, documentation='A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 277, 12)))

Character._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), PartyName, scope=Character, documentation='A Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 283, 15)))

Character._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=Character, documentation='A Composite containing details of the Name, Identifier and role(s) of a Contributor.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 298, 9)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 288, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 298, 9))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Character._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 277, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Character._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 283, 15))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Character._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 288, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Character._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 298, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Character._Automaton = _BuildAutomaton_5()




Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionId'), CollectionId, scope=Collection, documentation='A Composite containing details of an Identifier of the Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 317, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionType'), CollectionType, scope=Collection, documentation='A Composite containing details of the Type of the Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 322, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionReference'), STD_ANON_, scope=Collection, documentation='The Identifier (specific to the Message) of the Collection within the Release which contains it. This is a LocalCollectionAnchor starting with the letter X.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 330, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=Collection, documentation='A Composite containing details of a Title of the Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 340, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Contributor'), ResourceContributor, scope=Collection, documentation='A Composite containing details a Contributor to the Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 348, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Character'), Character, scope=Collection, documentation='A Composite containing details of a Character in the Collection. A Character may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 356, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReferenceList'), CollectionCollectionReferenceList, scope=Collection, documentation='A Composite containing a list of CollectionCollectionReferences for a Collection (specific to this Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 364, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsComplete'), pyxb.binding.datatypes.boolean, scope=Collection, documentation='The Flag indicating whether the Collection is complete (=True) or not (=False). Only one of the Elements IsComplete here and in the CollectionDetailsByTerritory is valid for a given Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 371, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=Collection, documentation='The sum of the Durations of all Resources contained in the Collection (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 376, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DurationOfMusicalContent'), pyxb.binding.datatypes.duration, scope=Collection, documentation='The Duration of the musical content (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 381, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), EventDate, scope=Collection, documentation='A Composite containing details of the Date and Place of the Event in which the Collection was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 386, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate'), EventDate, scope=Collection, documentation='A Composite containing details of the Date and Place of the Event in which the Collection was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 391, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalLanguage'), _ImportedBinding__avs.IsoLanguageCode, scope=Collection, documentation='The orignal Language of the Collection (represented by an ISO 639-2 LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 396, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionDetailsByTerritory'), CollectionDetailsByTerritory, scope=Collection, documentation='A Composite containing details of Descriptors and other attributes of the Collection which may vary according to Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 401, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionResourceReferenceList'), CollectionResourceReferenceList, scope=Collection, documentation='A Composite containing a list of CollectionResourceReferences for a Resource (specific to this Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 409, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionWorkReferenceList'), CollectionWorkReferenceList, scope=Collection, documentation='A Composite containing a list of CollectionWorkReferences for a Work (specific to this Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 416, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RepresentativeImageReference'), STD_ANON_2, scope=Collection, documentation='A Reference for an Image (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 423, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), PLine, scope=Collection, documentation='A Composite containing details of the PLine for the Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 433, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), CLine, scope=Collection, documentation='A Composite containing details of the CLine for the Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 441, 9)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 322, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 340, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 348, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 356, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 364, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 376, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 381, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 386, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 391, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 396, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 401, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 409, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 416, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 423, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 433, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 441, 9))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 317, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 322, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 330, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 340, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'Contributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 348, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'Character')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 356, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 364, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'IsComplete')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 371, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 376, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'DurationOfMusicalContent')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 381, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 386, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 391, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalLanguage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 396, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 401, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 409, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 416, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'RepresentativeImageReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 423, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 433, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 441, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Collection._Automaton = _BuildAutomaton_6()




CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=CollectionDetailsByTerritory, documentation='A Territory to which the Collection details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 462, 12)))

CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=CollectionDetailsByTerritory, documentation='A Territory to which the Collection details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 467, 12)))

CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=CollectionDetailsByTerritory, documentation='A Composite containing details of a Title of the Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 475, 9)))

CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Contributor'), ResourceContributor, scope=CollectionDetailsByTerritory, documentation='A Composite containing details of a Contributor to the Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 483, 9)))

CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsComplete'), pyxb.binding.datatypes.boolean, scope=CollectionDetailsByTerritory, documentation='The Flag indicating whether the Collection is complete (=True) or not (=False). Only one of the Elements IsComplete here and in the Collection is valid for a given Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 491, 9)))

CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Character'), Character, scope=CollectionDetailsByTerritory, documentation='A Composite containing details of a Character in the Collection. A Character may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 496, 9)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 475, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 483, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 491, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 496, 9))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 462, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 467, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 475, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Contributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 483, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IsComplete')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 491, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Character')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 496, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionDetailsByTerritory._Automaton = _BuildAutomaton_7()




CollectionList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Collection'), Collection, scope=CollectionList, documentation='A Composite containing details of a Collection contained in a Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 511, 9)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionList._UseForTag(pyxb.namespace.ExpandedName(None, 'Collection')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 511, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionList._Automaton = _BuildAutomaton_8()




CollectionResourceReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference'), STD_ANON_3, scope=CollectionResourceReference, documentation='A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 528, 9)))

CollectionResourceReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=CollectionResourceReference, documentation='The Duration of the use of the Resource that is referenced in the CollectionResourceReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 538, 9)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 538, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionResourceReference._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 528, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CollectionResourceReference._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 538, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionResourceReference._Automaton = _BuildAutomaton_9()




CollectionResourceReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference'), CollectionResourceReference, scope=CollectionResourceReferenceList, documentation='A Composite containing a CollectionResourceReference for a Collection (specific to this Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 550, 9)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionResourceReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 550, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionResourceReferenceList._Automaton = _BuildAutomaton_10()




CollectionWorkReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference'), STD_ANON_4, scope=CollectionWorkReference, documentation='A Reference for a Work (specific to this Message). This is a LocalMusicalWorkAnchorReference starting with the letter W.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 564, 9)))

CollectionWorkReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=CollectionWorkReference, documentation='The Duration of the use of the Work that is referenced in the CollectionWorkReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 574, 9)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 574, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionWorkReference._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 564, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CollectionWorkReference._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 574, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionWorkReference._Automaton = _BuildAutomaton_11()




CollectionWorkReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference'), CollectionWorkReference, scope=CollectionWorkReferenceList, documentation='A Composite containing a CollectionWorkReference for a Collection (specific to this Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 586, 9)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionWorkReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 586, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionWorkReferenceList._Automaton = _BuildAutomaton_12()




Condition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Value'), pyxb.binding.datatypes.decimal, scope=Condition, documentation='The numeric value of the condition.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 600, 9)))

Condition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Unit'), _ImportedBinding__avs.UnitOfConditionValue, scope=Condition, documentation='A UnitOfMeasure for the condition value.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 605, 9)))

Condition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RelationalRelator'), _ImportedBinding__avs.RelationalRelator, scope=Condition, documentation='A Relator expressing the accuracy of the condition value.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 610, 9)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Condition._UseForTag(pyxb.namespace.ExpandedName(None, 'Value')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 600, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Condition._UseForTag(pyxb.namespace.ExpandedName(None, 'Unit')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 605, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Condition._UseForTag(pyxb.namespace.ExpandedName(None, 'RelationalRelator')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 610, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Condition._Automaton = _BuildAutomaton_13()




Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueUseType'), CueUseType, scope=Cue, documentation='A Composite containing details of a UseType of the Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 622, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueThemeType'), CueThemeType, scope=Cue, documentation='A Composite containing details of a ThemeType for the Creation referenced in the Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 627, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueVocalType'), CueVocalType, scope=Cue, documentation='A Composite containing details of a VocalType for the Creation referenced in the Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 632, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsDance'), pyxb.binding.datatypes.boolean, scope=Cue, documentation='A Flag indicating whether a Creation contains dancing (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 637, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueVisualPerceptionType'), CueVisualPerceptionType, scope=Cue, documentation='A Composite containing details of a VisualPerceptionType for the Creation referenced in the Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 642, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueOrigin'), CueOrigin, scope=Cue, documentation='A Composite containing details of a CueOrigin for the Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 649, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueCreationReference'), CueCreationReference, scope=Cue, documentation='A Composite containing a CueCreationReference for a Creation (specific to this Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 655, 12)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferencedCreationType'), _ImportedBinding__avs.CreationType, scope=Cue, documentation='A Type of the Creation referenced in the Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 663, 15)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferencedCreationId'), CreationId, scope=Cue, documentation='A Composite containing details of a CreationIds.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 668, 15)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferencedCreationTitle'), Title, scope=Cue, documentation='A Composite containing details of a Title of the Creation referenced in the Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 673, 15)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferencedCreationContributor'), ResourceContributor, scope=Cue, documentation='A Composite containing details a Contributor of the Creation referenced in the Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 681, 15)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferencedCreationCharacter'), Character, scope=Cue, documentation='A Composite containing details of a Character in the Creation referenced in the Cue. A Character may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 689, 15)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HasMusicalContent'), pyxb.binding.datatypes.boolean, scope=Cue, documentation='A Flag indicating whether whether the Creation referenced in the Cue contains musical content such as a SoundRecording or a MusicalWork (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 699, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartTime'), pyxb.binding.datatypes.duration, scope=Cue, documentation='The start time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 704, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=Cue, documentation='The Duration of the use of the Creation that is referenced in the CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 709, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EndTime'), pyxb.binding.datatypes.duration, scope=Cue, documentation='The end time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 714, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), PLine, scope=Cue, documentation='A Composite containing details of the PLine for the Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 719, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), CLine, scope=Cue, documentation='A Composite containing details of the CLine for the Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 727, 9)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 622, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 627, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 632, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 637, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 642, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 649, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 663, 15))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 668, 15))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 673, 15))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 681, 15))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 689, 15))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 699, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 704, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 709, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 714, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 719, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 727, 9))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueUseType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 622, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueThemeType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 627, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueVocalType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 632, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'IsDance')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 637, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueVisualPerceptionType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 642, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueOrigin')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 649, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueCreationReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 655, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferencedCreationType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 663, 15))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferencedCreationId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 668, 15))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferencedCreationTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 673, 15))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferencedCreationContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 681, 15))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferencedCreationCharacter')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 689, 15))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'HasMusicalContent')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 699, 9))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'StartTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 704, 9))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 709, 9))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'EndTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 714, 9))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 719, 9))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 727, 9))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Cue._Automaton = _BuildAutomaton_14()




CueSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueSheetId'), ProprietaryId, scope=CueSheet, documentation='A Composite containing details of a CueSheetId of the CueSheet.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 742, 9)))

CueSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueSheetReference'), STD_ANON_5, scope=CueSheet, documentation='The Identifier (specific to the Message) of the CueSheet within the Release which contains it. This is a LocalCueSheetAnchor starting with the letter Q.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 750, 9)))

CueSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueSheetType'), CueSheetType, scope=CueSheet, documentation='A Composite containing details of a Type of the CueSheet.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 760, 9)))

CueSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Cue'), Cue, scope=CueSheet, documentation='A Composite containing details of a Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 765, 9)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 742, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CueSheet._UseForTag(pyxb.namespace.ExpandedName(None, 'CueSheetId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 742, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CueSheet._UseForTag(pyxb.namespace.ExpandedName(None, 'CueSheetReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 750, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CueSheet._UseForTag(pyxb.namespace.ExpandedName(None, 'CueSheetType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 760, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CueSheet._UseForTag(pyxb.namespace.ExpandedName(None, 'Cue')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 765, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CueSheet._Automaton = _BuildAutomaton_15()




CueSheetList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueSheet'), CueSheet, scope=CueSheetList, documentation='A Composite containing details of a CueSheet contained in a Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 777, 9)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CueSheetList._UseForTag(pyxb.namespace.ExpandedName(None, 'CueSheet')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 777, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CueSheetList._Automaton = _BuildAutomaton_16()




Deal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealReference'), DealReference, scope=Deal, documentation='A Composite containing a Reference to a TextDocument containing details of the Deal (in the form of an Identifier, Name or Description).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 789, 9)))

Deal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealTerms'), DealTerms, scope=Deal, documentation='A Composite containing details of the terms of the Deal.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 797, 9)))

Deal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceUsage'), ResourceUsage, scope=Deal, documentation='A Composite containing details of one or more Usages that govern a Resource in the Deal where the Usage of the Resource differs from the Usage of the other Resources in the same Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 802, 9)))

Deal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReferenceList'), DealTechnicalResourceDetailsReferenceList, scope=Deal, documentation='A Composite containing a list of DealTechnicalResourceDetailsReferences for the Deal.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 807, 9)))

Deal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DistributionChannelPage'), WebPage, scope=Deal, documentation='A Composite containing details of a WebPage for the DistributionChannel.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 814, 9)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 789, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 797, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 802, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 807, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 814, 9))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Deal._UseForTag(pyxb.namespace.ExpandedName(None, 'DealReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 789, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Deal._UseForTag(pyxb.namespace.ExpandedName(None, 'DealTerms')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 797, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Deal._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceUsage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 802, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Deal._UseForTag(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 807, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Deal._UseForTag(pyxb.namespace.ExpandedName(None, 'DistributionChannelPage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 814, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Deal._Automaton = _BuildAutomaton_17()




DealList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDeal'), ReleaseDeal, scope=DealList, documentation='A Composite containing details of one or more Deals pertaining to one or more Releases.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 834, 9)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 834, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DealList._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDeal')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 834, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DealList._Automaton = _BuildAutomaton_18()




DealTechnicalResourceDetailsReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReference'), STD_ANON_6, scope=DealTechnicalResourceDetailsReferenceList, documentation='A Reference for a Composite specifying technical details of a Resource (specific to this Message). This is a LocalTechnicalResourceDetailsAnchorReference starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 854, 9)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DealTechnicalResourceDetailsReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 854, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DealTechnicalResourceDetailsReferenceList._Automaton = _BuildAutomaton_19()




DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CommercialModelType'), CommercialModelType, scope=DealTerms, documentation='A Composite containing details of the fundamental business model which applies to the Deal (e.g. SubscriptionModel and PayAsYouGoModel). The CommercialModelType indicates how the Consumer pays for the Service or Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 871, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Usage'), Usage, scope=DealTerms, documentation='A Composite containing the Types and number of Usages applicable to a Release to which the Deal applies.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 880, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AllDealsCancelled'), pyxb.binding.datatypes.boolean, scope=DealTerms, documentation='The Flag indicating whether all Deals are cancelled for the given Territories (=True) or not (=False). This Flag can be used in conjunction with a StartDate of a ValidityPeriod to indicate the point in time from which all Deals are cancelled.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 885, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TakeDown'), pyxb.binding.datatypes.boolean, scope=DealTerms, documentation="The Flag indicating whether all Releases referred to are to be taken down by the MessageRecipient. This includes that all Deals referred to in a specific Composite are cancelled and no information about the Releases should be displayed to the end user on the DSP's website (=True) or not (=False). This Flag can be used in conjunction with a StartDate of a ValidityPeriod to indicate the point in time from which all Deals are cancelled.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 890, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=DealTerms, documentation='A Territory in which the Deal applies (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory must be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 897, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=DealTerms, documentation='A Territory in which the Deal does not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory must be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 902, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DistributionChannel'), DSP, scope=DealTerms, documentation='A Composite containing details of the DSP through whose DistributionChannel the sales are permitted. If none are provided no limitations on the DistributionChannels are given.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 911, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedDistributionChannel'), DSP, scope=DealTerms, documentation='A Composite containing details of excluded DSP. This is used in an aggregator model where all agreed partners of the aggregators may use a ReleaseDeal, except those that are listed herein.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 916, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PriceInformation'), PriceInformation, scope=DealTerms, documentation='A Composite containing details of a Price. Note that this Price applies to all UseTypes referenced in this Composite.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 924, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPromotional'), pyxb.binding.datatypes.boolean, scope=DealTerms, documentation='The Flag indicating whether a special Deal is made between the Licensor and the Licensee (=True) or not (=False) regarding the royalties or payments due to be paid for Releases distributed under this Deal.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 933, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PromotionalCode'), PromotionalCode, scope=DealTerms, documentation='A Composite containing details of a PromotionalCode.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 938, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ValidityPeriod'), Period, scope=DealTerms, documentation='A Composite containing details about a Period of Time during which the Deal is valid. No StartDate in this Composite means that the Deal is valid as per contractual relationship between MessageSender and MessageRecipient. No EndDate in this Composite means that the Deal is valid until further notice.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 944, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerRentalPeriod'), ConsumerRentalPeriod, scope=DealTerms, documentation='A Composite containing details of a Period the DSP may rent something to a Customer.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 949, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreOrderReleaseDate'), EventDate, scope=DealTerms, documentation='A Composite containing details of the Date and Place of the Event in which the related Release is made available for pre-ordering.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 956, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDisplayStartDate'), pyxb.binding.datatypes.date, scope=DealTerms, documentation='A Date on which the Release is made first available for display. If other Track list, cover art and clip preview dates are not provided, then this date covers them as well (assuming clips are available). If no ReleaseDisplayStartDate is provided, the StartDate for the Deal is used instead. The ReleaseDisplayStartDate may not be later than the StartDate for the Deal. If the MessageRecipient is not able to cater for such granular display policies, the MessageRecipient may be forced to not display any Release information until a much later date.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 963, 15)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TrackListingPreviewStartDate'), pyxb.binding.datatypes.date, scope=DealTerms, documentation='A Date on which the Track list is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no TrackListingPreviewStartDate is provided, the StartDate for the Deal is used instead. The TrackListingPreviewStartDate may not be later than the StartDate for the Deal.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 968, 15)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CoverArtPreviewStartDate'), pyxb.binding.datatypes.date, scope=DealTerms, documentation='A Date on which the cover art is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no CoverArtPreviewStartDate is provided, the StartDate for the Deal is used instead. The CoverArtPreviewStartDate may not be later than the StartDate for the Deal.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 973, 15)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ClipPreviewStartDate'), pyxb.binding.datatypes.date, scope=DealTerms, documentation='A Date on which an audio or video clip is made first available for display (it overrides the generic ReleaseDisplayStartDate if supplied). If no ClipPreviewStartDate is provided, the StartDate for the Deal is used instead. The ClipPreviewStartDate may not be later than the StartDate for the Deal.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 978, 15)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreOrderPreviewDate'), EventDate, scope=DealTerms, documentation='A Composite containing details of the Date and Place of the Event in which the pre-ordered Release is made first available for previewing (it overrides the generic ReleaseDisplayStartDate if supplied). If no PreOrderPreviewDate is provided, the StartDate for the Deal is used instead. The PreOrderPreviewDate may not be later than the StartDate for the Deal. This element has been deprecated and may be deleted in a future version of this message.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 984, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsExclusive'), pyxb.binding.datatypes.boolean, scope=DealTerms, documentation='The Flag indicating whether the Deal is exclusive (=True) or not (=False) to the MessageRecipient with respect to the relevant Territory(ies), Time(s) and Release(s). For other Territory(ies), or Time(s), other DSPs might be able to sell the Release(s). The exclusivity is in accordance with the agreement between the MessageSender and MessageRecipient.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 990, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RelatedReleaseOfferSet'), RelatedReleaseOfferSet, scope=DealTerms, documentation='A Composite containing details of one or more offers related to the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 995, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PhysicalReturns'), PhysicalReturns, scope=DealTerms, documentation='A Composite containing details of physical returns.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1003, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfProductsPerCarton'), pyxb.binding.datatypes.integer, scope=DealTerms, documentation='A number of Products per carton. This is the smallest number of Products that can be ordered.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1008, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicy'), RightsClaimPolicy, scope=DealTerms, documentation='A Composite containing details of a rights claim policy.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1013, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WebPolicy'), WebPolicy, scope=DealTerms, documentation='A Composite containing details of UserGeneratedContent permissions.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1021, 9)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 871, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 885, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 890, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 910, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 924, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 932, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 949, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 956, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 961, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 990, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 995, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1003, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1008, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1013, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1021, 9))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'CommercialModelType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 871, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'Usage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 880, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'AllDealsCancelled')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 885, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'TakeDown')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 890, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 897, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 902, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'DistributionChannel')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 911, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedDistributionChannel')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 916, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'PriceInformation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 924, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPromotional')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 933, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'PromotionalCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 938, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'ValidityPeriod')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 944, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerRentalPeriod')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 949, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'PreOrderReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 956, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDisplayStartDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 963, 15))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'TrackListingPreviewStartDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 968, 15))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'CoverArtPreviewStartDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 973, 15))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'ClipPreviewStartDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 978, 15))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'PreOrderPreviewDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 984, 12))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'IsExclusive')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 990, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'RelatedReleaseOfferSet')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 995, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'PhysicalReturns')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1003, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfProductsPerCarton')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1008, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicy')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1013, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'WebPolicy')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1021, 9))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DealTerms._Automaton = _BuildAutomaton_20()




Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageType'), ImageType, scope=Image, documentation='A Composite containing details of the Type of the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1041, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=Image, documentation='The Flag indicating whether the Image is related to an Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1046, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageId'), ImageId, scope=Image, documentation='A Composite containing details of Identifiers of the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1051, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_7, scope=Image, documentation='The Identifier (specific to the Message) of the Image within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1056, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=Image, documentation='A Composite containing details of a Title of the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1066, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), EventDate, scope=Image, documentation='A Composite containing details of the Date and Place of the Event in which the Image was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1074, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageDetailsByTerritory'), ImageDetailsByTerritory, scope=Image, documentation='A Composite containing details of the Image which may vary according to Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1079, 9)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1041, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1046, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1066, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1074, 9))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1041, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1046, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1051, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1056, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1066, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1074, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1079, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Image._Automaton = _BuildAutomaton_21()




ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=ImageDetailsByTerritory, documentation='A Territory to which the Image details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1104, 12)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=ImageDetailsByTerritory, documentation='A Territory to which the Image details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1109, 12)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=ImageDetailsByTerritory, documentation='A Composite containing details of a Contributor to the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1117, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), IndirectResourceContributor, scope=ImageDetailsByTerritory, documentation='A Composite containing details of an indirect Contributor to the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1125, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), CLine, scope=ImageDetailsByTerritory, documentation='A Composite containing details of the CLine for the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1133, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), Description, scope=ImageDetailsByTerritory, documentation='A Composite containing a Description of the subject of the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1141, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), CourtesyLine, scope=ImageDetailsByTerritory, documentation='A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured on the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1146, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), EventDate, scope=ImageDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the Image was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1151, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=ImageDetailsByTerritory, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1158, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), Keywords, scope=ImageDetailsByTerritory, documentation='A Composite containing details of a Description of the Image containing Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1163, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), Synopsis, scope=ImageDetailsByTerritory, documentation='A Composite containing details of a Synopsis of the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1171, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), Genre, scope=ImageDetailsByTerritory, documentation='A Composite containing details of a Genre to which the Image belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1176, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), ParentalWarningType, scope=ImageDetailsByTerritory, documentation='A Composite containing details of the classification of the Image according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1184, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalImageDetails'), TechnicalImageDetails, scope=ImageDetailsByTerritory, documentation='A Composite containing technical details of the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1192, 9)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1117, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1125, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1133, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1141, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1146, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1151, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1158, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1163, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1171, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1176, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1184, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1192, 9))
    counters.add(cc_11)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1104, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1109, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1117, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1125, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1133, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1141, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1146, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1151, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1158, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1163, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1171, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1176, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1184, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalImageDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1192, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ImageDetailsByTerritory._Automaton = _BuildAutomaton_22()




MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MidiType'), MidiType, scope=MIDI, documentation='A Composite containing details of the Type of the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1212, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The Flag indicating whether the MIDI is related to an Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1217, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MidiId'), MidiId, scope=MIDI, documentation='A Composite containing details of Identifiers of the Midi.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1222, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectMidiId'), MusicalWorkId, scope=MIDI, documentation='A Composite containing details of a MusicalWorkId of a MusicalWork used in the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1227, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_8, scope=MIDI, documentation='The Identifier (specific to the Message) of the MIDI within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1235, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), ReferenceTitle, scope=MIDI, documentation='A Composite containing details of the ReferenceTitle of the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1245, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), Description, scope=MIDI, documentation='A Composite containing a Description of the Type of instrumentation of the MusicalWork(s) in the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1250, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsMedley'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The Flag indicating whether the MIDI is a Medley (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1257, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The Flag indicating whether the MIDI is a Potpourri (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1262, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The Flag indicating whether the MIDI is instrumental (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1267, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBackground'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The Flag indicating whether the MIDI is used as background to other audio or audiovisual material (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1272, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The Flag indicating whether the MIDI is hidden in some way from the Consumer (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1277, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The Flag indicating whether the MIDI is additional to those on the original Release of which this is a Version (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1282, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The Flag indicating whether the MIDI is generated by a computer (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1287, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The Flag indicating whether the MIDI is preceded by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1292, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The Flag indicating whether the MIDI is followed by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1297, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='A Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1302, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), _ImportedBinding__avs.IsoLanguageCode, scope=MIDI, documentation='The Language of the Performance recorded in the MIDI (represented by an ISO 639-2 LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1307, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=MIDI, documentation='The Duration of the MIDI (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1314, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=MIDI, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1319, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), ResourceMusicalWorkReferenceList, scope=MIDI, documentation='A Composite containing details of one or more MusicalWorks contained in the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1324, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), ResourceContainedResourceReferenceList, scope=MIDI, documentation='A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1331, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), EventDate, scope=MIDI, documentation='A Composite containing details of the Date and Place of the Event in which the MIDI was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1338, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MasteredDate'), EventDate, scope=MIDI, documentation='A Composite containing details of the Date and Place of the Event in which the MIDI was originally mastered (in either analogue or digital form).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1343, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MidiDetailsByTerritory'), MidiDetailsByTerritory, scope=MIDI, documentation='A Composite containing details of Descriptors and other attributes of the MIDI which may vary according to Territory of release. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1348, 9)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1212, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1217, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1227, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1250, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1257, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1262, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1267, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1272, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1277, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1282, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1287, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1292, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1297, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1302, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1307, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1319, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1324, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1331, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1338, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1343, 9))
    counters.add(cc_19)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'MidiType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1212, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1217, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'MidiId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1222, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectMidiId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1227, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1235, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1245, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1250, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsMedley')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1257, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPotpourri')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1262, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsInstrumental')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1267, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBackground')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1272, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsHiddenResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1277, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBonusResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1282, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1287, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1292, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1297, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1302, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1307, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1314, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1319, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1324, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1331, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1338, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'MasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1343, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'MidiDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1348, 9))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MIDI._Automaton = _BuildAutomaton_23()




MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=MidiDetailsByTerritory, documentation='A Territory to which the MIDI details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1373, 12)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=MidiDetailsByTerritory, documentation='A Territory to which the MIDI details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1378, 12)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=MidiDetailsByTerritory, documentation='A Composite containing details of a Title of the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1386, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), Artist, scope=MidiDetailsByTerritory, documentation='A Composite containing details of the DisplayArtist for the MIDI. The DisplayArtist may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1394, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=MidiDetailsByTerritory, documentation='A Composite containing details of a Contributor to the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1402, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), IndirectResourceContributor, scope=MidiDetailsByTerritory, documentation='A Composite containing details of an indirect Contributor to the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1410, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=MidiDetailsByTerritory, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1418, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), LabelName, scope=MidiDetailsByTerritory, documentation='A Composite containing the Name of the Label under which the Release is to be marketed.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1423, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsController'), TypedRightsController, scope=MidiDetailsByTerritory, documentation='A Composite containing details of RightsController of Rights in the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1431, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), EventDate, scope=MidiDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the MIDI was re-mastered (usually digitally).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1439, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), EventDate, scope=MidiDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the MIDI was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1444, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), CLine, scope=MidiDetailsByTerritory, documentation='A Composite containing details of the CLine for the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1451, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), CourtesyLine, scope=MidiDetailsByTerritory, documentation='A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for guests Artists or others featured on the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1459, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.string, scope=MidiDetailsByTerritory, documentation='The number indicating the order of the MIDI in a group of MIDIs in a Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1464, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), HostSoundCarrier, scope=MidiDetailsByTerritory, documentation='A Composite containing details of a HostSoundCarrier on which the MIDI appears (e.g., the CD on which it was originally released). This Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of MIDI information.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1469, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MarketingComment'), Comment, scope=MidiDetailsByTerritory, documentation='A Composite containing a Comment about the promotion and marketing of the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1477, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), Genre, scope=MidiDetailsByTerritory, documentation='A Composite containing details of a Genre to which the MIDI belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1482, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), ParentalWarningType, scope=MidiDetailsByTerritory, documentation='A Composite containing details of the classification of the MIDI according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1490, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=MidiDetailsByTerritory, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1498, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), Keywords, scope=MidiDetailsByTerritory, documentation='A Composite containing details of a Description of the MIDI containing Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1503, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), Synopsis, scope=MidiDetailsByTerritory, documentation='A Composite containing details of a Synopsis of the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1511, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalMidiDetails'), TechnicalMidiDetails, scope=MidiDetailsByTerritory, documentation='A Composite containing technical details of the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1516, 9)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1386, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1394, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1402, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1410, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1418, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1423, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1431, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1439, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1444, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1451, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1459, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1464, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1469, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1477, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1482, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1490, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1498, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1503, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1511, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1516, 9))
    counters.add(cc_19)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1373, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1378, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1386, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1394, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1402, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1410, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1418, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1423, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsController')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1431, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RemasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1439, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1444, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1451, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1459, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1464, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1469, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'MarketingComment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1477, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1482, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1490, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1498, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1503, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1511, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalMidiDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1516, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MidiDetailsByTerritory._Automaton = _BuildAutomaton_24()




PhysicalReturns._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PhysicalReturnsAllowed'), pyxb.binding.datatypes.boolean, scope=PhysicalReturns, documentation='The Flag indicating whether physical returns are allowed (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1536, 9)))

PhysicalReturns._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LatestDateForPhysicalReturns'), pyxb.binding.datatypes.date, scope=PhysicalReturns, documentation='A Date which is the latest one for physical returns (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1541, 9)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1541, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhysicalReturns._UseForTag(pyxb.namespace.ExpandedName(None, 'PhysicalReturnsAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1536, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalReturns._UseForTag(pyxb.namespace.ExpandedName(None, 'LatestDateForPhysicalReturns')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1541, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PhysicalReturns._Automaton = _BuildAutomaton_25()




PreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartType'), Description, scope=PreviewDetails, documentation='A Composite containing a Description of the Type of Part that the preview relates to, e.g. chorus or intro.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1553, 9)))

PreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TopLeftCorner'), pyxb.binding.datatypes.decimal, scope=PreviewDetails, documentation='The position of the preview measured in Pixels or millimetres from the top left corner of the Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1558, 9)))

PreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BottomRightCorner'), pyxb.binding.datatypes.decimal, scope=PreviewDetails, documentation='The position of the preview measured in Pixels or millimetres  from the bottom right corner of the Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1563, 9)))

PreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExpressionType'), _ImportedBinding__avs.ExpressionType, scope=PreviewDetails, documentation='A Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1568, 9)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1553, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1558, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1563, 9))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PartType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1553, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TopLeftCorner')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1558, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'BottomRightCorner')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1563, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ExpressionType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1568, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PreviewDetails._Automaton = _BuildAutomaton_26()




RelatedReleaseOfferSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), ReleaseId, scope=RelatedReleaseOfferSet, documentation='A Composite containing details of ReleaseIds of the Release(s) for which the offer(s) are available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1625, 12)))

RelatedReleaseOfferSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDescription'), Description, scope=RelatedReleaseOfferSet, documentation='A Composite containing a Description of the Release(s) for which the offer(s) are available.This Element is designed to be used to describe entire collections or repertoires, and is not to be used to list individual Releases by xs:ID or Title.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1630, 12)))

RelatedReleaseOfferSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Deal'), Deal, scope=RelatedReleaseOfferSet, documentation='A Composite containing details of a Deal that is available as an offer related to the Release(s). If no Deal is provided, the parent Release and the Releases listed in the RelatedReleaseOfferSet are bundled and offered under the ReleaseOffer associated with the parent Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1636, 9)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1636, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RelatedReleaseOfferSet._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1625, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RelatedReleaseOfferSet._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1630, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RelatedReleaseOfferSet._UseForTag(pyxb.namespace.ExpandedName(None, 'Deal')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1636, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RelatedReleaseOfferSet._Automaton = _BuildAutomaton_27()




Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), ReleaseId, scope=Release, documentation='A Composite containing details of ReleaseIds. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1653, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseReference'), STD_ANON_9, scope=Release, documentation='The Identifier (specific to the Message) of the Release. Used to link the Release to one or more Deal(s). This is a LocalReleaseAnchor starting with the letter R.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1658, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalResourceLink'), ExternalResourceLink, scope=Release, documentation='A Composite containing details of promotional or other material related to the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1668, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SalesReportingProxyReleaseId'), SalesReportingProxyReleaseId, scope=Release, documentation='A Composite containing details of the A Composite containing details of the SalesReportingProxyReleaseId.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1676, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), ReferenceTitle, scope=Release, documentation='A Composite containing details of the ReferenceTitle of the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1684, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReferenceList'), ReleaseResourceReferenceList, scope=Release, documentation='A Composite containing details of one or more Resources contained in the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1690, 12)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceOmissionReason'), ResourceOmissionReason, scope=Release, documentation='A Composite containing details of a ResourceOmissionReason.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1696, 12)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseCollectionReferenceList'), ReleaseCollectionReferenceList, scope=Release, documentation='A Composite containing details of one or more Collections contained in the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1702, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseType'), ReleaseType, scope=Release, documentation='A Composite containing details of the form in which a ReleaseCreator anticipates offering the Release to Consumers. This may be overridden by the ReleaseType for specific Territories as specified in the ReleaseDetailsByTerritory Composite.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1709, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDetailsByTerritory'), ReleaseDetailsByTerritory, scope=Release, documentation='A Composite containing details of Descriptors and other attributes of the Release which may vary according to Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1717, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), _ImportedBinding__avs.IsoLanguageCode, scope=Release, documentation='The predominant original Language of the Performance recorded in the Resources (represented by an ISO 639-2 LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1724, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageOfDubbing'), _ImportedBinding__avs.IsoLanguageCode, scope=Release, documentation='The predominant Language of dubbing used in the  Resources (represented by an ISO 639-2 LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1732, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SubTitleLanguage'), _ImportedBinding__avs.IsoLanguageCode, scope=Release, documentation='The predominant Language of SubTitles in the  Resources (represented by an ISO 639-2 LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1740, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=Release, documentation='The sum of the Durations of all Resources contained in the Release (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1748, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=Release, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1753, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), PLine, scope=Release, documentation='A Composite containing details of the PLine for the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1758, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), CLine, scope=Release, documentation='A Composite containing details of the CLine for the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1766, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ArtistProfilePage'), WebPage, scope=Release, documentation='A Composite containing details of a WebPage for the Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1774, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GlobalReleaseDate'), EventDate, scope=Release, documentation='A Composite containing details of the Date of the Event in which the Release was or will be first made globally available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1782, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GlobalOriginalReleaseDate'), EventDate, scope=Release, documentation='A Composite containing details of the Date of the Event in which the collection of tracks for the Release (e.g. the equivalent physical album on vinyl) was or will be first made globally available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1787, 9)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1658, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1668, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1676, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1702, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1709, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1724, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1732, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1740, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1748, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1753, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1758, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1766, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1774, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1782, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1787, 9))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1653, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1658, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalResourceLink')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1668, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'SalesReportingProxyReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1676, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1684, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1690, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceOmissionReason')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1696, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseCollectionReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1702, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1709, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1717, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1724, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageOfDubbing')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1732, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'SubTitleLanguage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1740, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1748, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1753, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1758, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1766, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ArtistProfilePage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1774, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'GlobalReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1782, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'GlobalOriginalReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1787, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Release._Automaton = _BuildAutomaton_28()




ReleaseDeal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealReleaseReference'), STD_ANON_10, scope=ReleaseDeal, documentation='The Identifier (specific to the Message) of a Release in the Deal. This is a LocalReleaseAnchorReference starting with the letter R.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1809, 9)))

ReleaseDeal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Deal'), Deal, scope=ReleaseDeal, documentation='A Composite containing details of a Deal governing the Usage of all Releases identified in the ReleaseDeal Composite.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1819, 9)))

ReleaseDeal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EffectiveDate'), pyxb.binding.datatypes.date, scope=ReleaseDeal, documentation='The Date at which the MessageRecipient is expected to cancel all Deals for the Release and replace them with the Deals provided within the current Message. The EffectiveDate is typically the date on which the NewReleaseMessage is being sent.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1824, 9)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1824, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReleaseDeal._UseForTag(pyxb.namespace.ExpandedName(None, 'DealReleaseReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1809, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReleaseDeal._UseForTag(pyxb.namespace.ExpandedName(None, 'Deal')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1819, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDeal._UseForTag(pyxb.namespace.ExpandedName(None, 'EffectiveDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1824, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReleaseDeal._Automaton = _BuildAutomaton_29()




ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=ReleaseDetailsByTerritory, documentation='A Territory to which the ReleaseSummaryDetailsByTerritory apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1842, 12)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=ReleaseDetailsByTerritory, documentation='A Territory to which the ReleaseSummaryDetailsByTerritory do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1847, 12)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtistName'), Name, scope=ReleaseDetailsByTerritory, documentation='A Composite containing the Name to be used by a DSP when presenting Artist details of the Release to a Consumer.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1855, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), LabelName, scope=ReleaseDetailsByTerritory, documentation='A Composite containing the Name of the Label for the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1863, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1871, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of a Title of the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1876, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), Artist, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of the DisplayArtist for the Release. The DisplayArtist may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1884, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsMultiArtistCompilation'), pyxb.binding.datatypes.boolean, scope=ReleaseDetailsByTerritory, documentation='The Flag indicating whether the Release is a multiartist compilation (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1892, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdministratingRecordCompany'), AdministratingRecordCompany, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of the AdministratingRecordCompany for the Release. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1897, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseType'), ReleaseType, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of the form in which a ReleaseCreator anticipates offering the Release to Consumers. This overrides the ReleaseType specified globally for the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1905, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RelatedRelease'), RelatedRelease, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of a Release (or a PhysicalProduct or a DigitalProduct derived from such a Release) which is related to this Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1913, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), ParentalWarningType, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of the classification of the Release according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1921, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AvRating'), AvRating, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of a rating for the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1929, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MarketingComment'), Comment, scope=ReleaseDetailsByTerritory, documentation='A Composite containing a Comment about the promotion and marketing of the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1937, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroup'), ResourceGroup, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of a group of some or all of the Resources in the Release. ResourceGroups are used to signal groupings or sequences of Resources within a Release. Examples include individual carriers in a multi-carrier Release or classical Work groupings as well as the default order of Resources within a Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1942, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), Genre, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of a Genre to which the Release belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1950, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDate'), EventDate, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the Release was or will be first made available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1958, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate'), EventDate, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the collection of tracks for the Release (e.g. the equivalent physical album on vinyl) was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1963, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalDigitalReleaseDate'), EventDate, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the Release was or will be first made available in electronic/online format for Usage (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1968, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), Description, scope=ReleaseDetailsByTerritory, documentation='A Composite containing a Description providing details of how a DSP can obtain any related Release File.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1976, 12)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), File, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of a related Release File that a DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1983, 12)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), Keywords, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of a Description of the Release containing Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1989, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), Synopsis, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of a Synopsis of the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1997, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Character'), Character, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of a Character in the Release. A Character may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2002, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfUnitsPerPhysicalRelease'), pyxb.binding.datatypes.integer, scope=ReleaseDetailsByTerritory, documentation='A number of units (typically a CD or a DVD) contained in a physical Release. This Element is for boxed sets.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2010, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), Artist, scope=ReleaseDetailsByTerritory, documentation='A Composite containing details of a DisplayConductor for the Release. A DisplayConductor may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2017, 9)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1855, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1863, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1871, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1876, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1884, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1892, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1897, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1905, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1913, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1921, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1929, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1937, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1942, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1950, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1958, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1963, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1968, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1975, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1989, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1997, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2002, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2010, 9))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2017, 9))
    counters.add(cc_22)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1842, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1847, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtistName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1855, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1863, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1871, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1876, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1884, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IsMultiArtistCompilation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1892, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'AdministratingRecordCompany')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1897, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1905, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RelatedRelease')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1913, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1921, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'AvRating')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1929, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'MarketingComment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1937, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroup')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1942, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1950, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1958, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1963, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalDigitalReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1968, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1976, 12))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1983, 12))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1989, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1997, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Character')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2002, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfUnitsPerPhysicalRelease')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2010, 9))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayConductor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2017, 9))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReleaseDetailsByTerritory._Automaton = _BuildAutomaton_30()




ReleaseList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Release'), Release, scope=ReleaseList, documentation='A Composite containing details of a DDEX Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2037, 9)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2037, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseList._UseForTag(pyxb.namespace.ExpandedName(None, 'Release')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2037, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReleaseList._Automaton = _BuildAutomaton_31()




ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=ResourceContributor, documentation='A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2058, 12)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), PartyName, scope=ResourceContributor, documentation='A Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2064, 15)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributorRole'), ResourceContributorRole, scope=ResourceContributor, documentation='A Composite containing details of a role played by the Contributor.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2079, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsFeaturedArtist'), pyxb.binding.datatypes.boolean, scope=ResourceContributor, documentation='A Flag indicating whether the Contributor is a featured Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2087, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsContractedArtist'), pyxb.binding.datatypes.boolean, scope=ResourceContributor, documentation='A Flag indicating whether the Contributor is an Artist that has a contract for its part in creating the Resource (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2092, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryOfPerformance'), _ImportedBinding__avs.TerritoryCode, scope=ResourceContributor, documentation='A country of performance (represented by an ISO 3166-1 TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2097, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'InstrumentType'), pyxb.binding.datatypes.string, scope=ResourceContributor, documentation='A Type of musical instrument played by the Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2105, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ArtistDelegatedUsageRights'), ArtistDelegatedUsageRights, scope=ResourceContributor, documentation='A Composite containing details of the kinds of usage for which rights have been delegated by the Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2113, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Sex'), _ImportedBinding__avs.Sex, scope=ResourceContributor, documentation='Sex', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2120, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfBirth'), EventDate, scope=ResourceContributor, documentation='A Composite containing details of the Date and Place of birth.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2125, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfDeath'), EventDate, scope=ResourceContributor, documentation='A Composite containing details of the Date and Place of death.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2130, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PrimaryRole'), ArtistRole, scope=ResourceContributor, documentation='A Composite containing details of the primary role played by the Artist in relation to other Artists.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2135, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PrimaryInstrumentType'), pyxb.binding.datatypes.string, scope=ResourceContributor, documentation='A Type of (musical) instrument primarily played by the Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2140, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GoverningAgreementType'), GoverningAgreementType, scope=ResourceContributor, documentation="A Composite containing details of a Type of an agreement that covers the Artist's participation in making a SoundRecording.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2145, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContactInformation'), ContactId, scope=ResourceContributor, documentation='A Composite containing details of contact Identifiers of the Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2152, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryOfResidency'), _ImportedBinding__avs.TerritoryCode, scope=ResourceContributor, documentation='The country of main residency of the Artist (represented by an ISO 3166-1 TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2157, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdditionalRoles'), ArtistRole, scope=ResourceContributor, documentation='A Composite containing details of the additional roles played by the Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2162, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), Genre, scope=ResourceContributor, documentation='A Composite containing details of a typical or main Genre relating to the Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2170, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Membership'), Membership, scope=ResourceContributor, documentation='A Composite containing details of a membership in a collective rights management organization.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2178, 9)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2069, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2079, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2087, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2092, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2097, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2105, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2113, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2120, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2125, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2130, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2135, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2140, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2145, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2152, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2157, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2162, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2170, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2178, 9))
    counters.add(cc_17)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2058, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2064, 15))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2069, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributorRole')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2079, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'IsFeaturedArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2087, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'IsContractedArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2092, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryOfPerformance')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2097, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'InstrumentType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2105, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'ArtistDelegatedUsageRights')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2113, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'Sex')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2120, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfBirth')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2125, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfDeath')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2130, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PrimaryRole')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2135, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PrimaryInstrumentType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2140, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'GoverningAgreementType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2145, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'ContactInformation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2152, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryOfResidency')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2157, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'AdditionalRoles')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2162, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2170, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'Membership')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2178, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResourceContributor._Automaton = _BuildAutomaton_32()




ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=ResourceGroup, documentation="A Composite containing details of a Title of the ResourceGroup. Typically this will apply to 'sub' ResourceGroups within a hierarchy, e.g., different Albums in a Set.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2198, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.integer, scope=ResourceGroup, documentation='The number indicating the order of the ResourceGroup within all ResourceGroups at this level. The default value is 1, and the value must be incremented by 1 for each ResourceGroup occurring at a particular level. The SequenceNumber is unique within its ResourceGroupLevelNumber.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2206, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), Artist, scope=ResourceGroup, documentation='A Composite containing details of the DisplayArtist for the ResourceGroup. The DisplayArtist may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2211, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), Artist, scope=ResourceGroup, documentation='A Composite containing details of a DisplayConductor for the ResourceGroup. A DisplayConductor may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2219, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayComposer'), Artist, scope=ResourceGroup, documentation='A Composite containing details of a DisplayComposer for the ResourceGroup. A DisplayComposer may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2227, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=ResourceGroup, documentation='A Composite containing details of a Contributor to this ResourceGroup. This includes roles such as the compiler of the ResourceGroup, and may summarize details of Contributors to individual SoundRecordings or other content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2235, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), IndirectResourceContributor, scope=ResourceGroup, documentation='A Composite containing details of an indirect Contributor to this ResourceGroup.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2243, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CarrierType'), CarrierType, scope=ResourceGroup, documentation='A Composite containing details of a Carrier.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2251, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroup'), ResourceGroup, scope=ResourceGroup, documentation='A ResourceGroup contained within this ResourceGroup. ResourceGroups are used to signal groupings or sequences of Resources within a Release. Examples include individual carriers in a multi-carrier Release or classical Work groupings as well as the default order of Resources within a Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2259, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroupContentItem'), ResourceGroupContentItem, scope=ResourceGroup, documentation='A Composite containing details of a Resource contained in the ResourceGroup.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2268, 12)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroupResourceReferenceList'), ResourceGroupResourceReferenceList, scope=ResourceGroup, documentation='A Composite containing details of a Resource contained in the ResourceGroup.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2276, 12)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroupReleaseReference'), STD_ANON_11, scope=ResourceGroup, documentation='The Identifier (specific to the Message) of a Release which has the same content as the ResourceGroup. This is a LocalReleaseAnchorReference starting with the letter R.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2285, 12)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), ReleaseId, scope=ResourceGroup, documentation='A Composite containing details of ReleaseIds of a Release which has the same content as the ResourceGroup. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2295, 12)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2198, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2206, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2211, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2219, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2227, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2235, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2243, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2251, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2259, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2268, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2276, 12))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2284, 9))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2198, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2206, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2211, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayConductor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2219, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayComposer')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2227, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2235, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2243, 9))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'CarrierType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2251, 9))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroup')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2259, 9))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroupContentItem')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2268, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroupResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2276, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroupReleaseReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2285, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2295, 12))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ResourceGroup._Automaton = _BuildAutomaton_33()




ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecording'), SoundRecording, scope=ResourceList, documentation='A Composite containing details of a SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2313, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MIDI'), MIDI, scope=ResourceList, documentation='A Composite containing details of a MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2321, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Video'), Video, scope=ResourceList, documentation='A Composite containing details of a Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2326, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Image'), Image, scope=ResourceList, documentation='A Composite containing details of an Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2334, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Text'), Text, scope=ResourceList, documentation='A Composite containing details of a Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2342, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SheetMusic'), SheetMusic, scope=ResourceList, documentation='A Composite containing details of a Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2347, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Software'), Software, scope=ResourceList, documentation='A Composite containing details of an item of Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2355, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedResource'), UserDefinedResource, scope=ResourceList, documentation='A Composite containing details of a UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2363, 9)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2313, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2321, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2326, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2334, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2342, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2347, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2355, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2363, 9))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecording')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2313, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'MIDI')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2321, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'Video')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2326, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'Image')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2334, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'Text')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2342, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'SheetMusic')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2347, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'Software')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2355, 9))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2363, 9))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ResourceList._Automaton = _BuildAutomaton_34()




ResourceUsage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealResourceReference'), STD_ANON_12, scope=ResourceUsage, documentation='A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2383, 9)))

ResourceUsage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Usage'), Usage, scope=ResourceUsage, documentation='A Composite containing the Types and number of Usages applicable to the Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2393, 9)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2383, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResourceUsage._UseForTag(pyxb.namespace.ExpandedName(None, 'DealResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2383, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceUsage._UseForTag(pyxb.namespace.ExpandedName(None, 'Usage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2393, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResourceUsage._Automaton = _BuildAutomaton_35()




RightsClaimPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Condition'), Condition, scope=RightsClaimPolicy, documentation='A Composite containing details of conditions.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2405, 9)))

RightsClaimPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicyType'), _ImportedBinding__avs.RightsClaimPolicyType, scope=RightsClaimPolicy, documentation='A Type of rights claim policy.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2410, 9)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightsClaimPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'Condition')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2405, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RightsClaimPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicyType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2410, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RightsClaimPolicy._Automaton = _BuildAutomaton_36()




SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SheetMusicType'), SheetMusicType, scope=SheetMusic, documentation='A Composite containing details of the Type of the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2422, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=SheetMusic, documentation='The Flag indicating whether the SheetMusic is related to an Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2427, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SheetMusicId'), SheetMusicId, scope=SheetMusic, documentation='A Composite containing details of Identifiers of the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2432, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectSheetMusicId'), MusicalWorkId, scope=SheetMusic, documentation='A Composite containing details of a MusicalWorkId of a MusicalWork used in the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2437, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_13, scope=SheetMusic, documentation='The Identifier (specific to the Message) of the SheetMusic within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2445, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageOfLyrics'), _ImportedBinding__avs.IsoLanguageCode, scope=SheetMusic, documentation='The Language of the lyrics of the SheetMusic (represented by an ISO 639-2 LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2455, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=SheetMusic, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) related to the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2460, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), ResourceMusicalWorkReferenceList, scope=SheetMusic, documentation='A Composite containing details of one or more MusicalWorks contained in the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2465, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), ResourceContainedResourceReferenceList, scope=SheetMusic, documentation='A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2472, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), ReferenceTitle, scope=SheetMusic, documentation='A Composite containing details of the ReferenceTitle of the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2479, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), EventDate, scope=SheetMusic, documentation='A Composite containing details of the Date and Place of the Event in which the SheetMusic was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2484, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SheetMusicDetailsByTerritory'), SheetMusicDetailsByTerritory, scope=SheetMusic, documentation='A Composite containing details of the SheetMusic which may vary according to Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2489, 9)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2422, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2427, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2437, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2455, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2460, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2465, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2472, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2484, 9))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'SheetMusicType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2422, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2427, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'SheetMusicId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2432, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectSheetMusicId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2437, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2445, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageOfLyrics')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2455, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2460, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2465, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2472, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2479, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2484, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'SheetMusicDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2489, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SheetMusic._Automaton = _BuildAutomaton_37()




SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=SheetMusicDetailsByTerritory, documentation='A Territory to which the SheetMusic details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2514, 12)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=SheetMusicDetailsByTerritory, documentation='A Territory to which the SheetMusic details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2519, 12)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=SheetMusicDetailsByTerritory, documentation='A Composite containing details of a Title of the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2527, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=SheetMusicDetailsByTerritory, documentation='A Composite containing details of a Contributor to the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2535, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), IndirectResourceContributor, scope=SheetMusicDetailsByTerritory, documentation='A Composite containing details of an indirect Contributor to the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2543, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), CLine, scope=SheetMusicDetailsByTerritory, documentation='A Composite containing details of the CLine for the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2551, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), CourtesyLine, scope=SheetMusicDetailsByTerritory, documentation='A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured in the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2559, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), EventDate, scope=SheetMusicDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the SheetMusic was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2564, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=SheetMusicDetailsByTerritory, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2571, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), Genre, scope=SheetMusicDetailsByTerritory, documentation='A Composite containing details of a Genre to which the SheetMusic belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2576, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), ParentalWarningType, scope=SheetMusicDetailsByTerritory, documentation='A Composite containing details of the classification of the SheetMusic according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2584, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalSheetMusicDetails'), TechnicalSheetMusicDetails, scope=SheetMusicDetailsByTerritory, documentation='A Composite containing technical details of the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2592, 9)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2527, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2535, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2543, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2551, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2559, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2564, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2571, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2576, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2584, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2592, 9))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2514, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2519, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2527, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2535, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2543, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2551, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2559, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2564, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2571, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2576, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2584, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalSheetMusicDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2592, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SheetMusicDetailsByTerritory._Automaton = _BuildAutomaton_38()




Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoftwareType'), SoftwareType, scope=Software, documentation='A Composite containing details of the Type of the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2612, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=Software, documentation='The Flag indicating whether the Software is related to an Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2617, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoftwareId'), SoftwareId, scope=Software, documentation='A Composite containing details of Identifiers of the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2622, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectSoftwareId'), MusicalWorkId, scope=Software, documentation='A Composite containing details of a MusicalWorkId of a MusicalWork used in the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2627, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_14, scope=Software, documentation='The Identifier (specific to the Message) of the Software within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2635, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), ResourceMusicalWorkReferenceList, scope=Software, documentation='A Composite containing details of one or more MusicalWorks contained in the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2645, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), ResourceContainedResourceReferenceList, scope=Software, documentation='A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2652, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=Software, documentation='A Composite containing details of a Title of the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2659, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), EventDate, scope=Software, documentation='A Composite containing details of the Date and Place of the Event in which the Software was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2667, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoftwareDetailsByTerritory'), SoftwareDetailsByTerritory, scope=Software, documentation='A Composite containing details of the Software which may vary according to Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2672, 9)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2612, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2617, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2627, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2645, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2652, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2659, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2667, 9))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'SoftwareType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2612, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2617, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'SoftwareId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2622, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectSoftwareId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2627, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2635, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2645, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2652, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2659, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2667, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'SoftwareDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2672, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Software._Automaton = _BuildAutomaton_39()




SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=SoftwareDetailsByTerritory, documentation='A Territory to which the Software details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2697, 12)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=SoftwareDetailsByTerritory, documentation='A Territory to which the Software details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2702, 12)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=SoftwareDetailsByTerritory, documentation='A Composite containing details of a Contributor to the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2710, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), IndirectResourceContributor, scope=SoftwareDetailsByTerritory, documentation='A Composite containing details of an indirect Contributor to the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2718, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), PLine, scope=SoftwareDetailsByTerritory, documentation='A Composite containing details of the PLine for the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2726, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), CLine, scope=SoftwareDetailsByTerritory, documentation='A Composite containing details of the CLine for the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2734, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), CourtesyLine, scope=SoftwareDetailsByTerritory, documentation='A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured in the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2742, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), EventDate, scope=SoftwareDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the Software was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2747, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=SoftwareDetailsByTerritory, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2754, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), Keywords, scope=SoftwareDetailsByTerritory, documentation='A Composite containing details of a Description of the Software containing Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2759, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), Synopsis, scope=SoftwareDetailsByTerritory, documentation='A Composite containing details of a Synopsis of the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2767, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), Genre, scope=SoftwareDetailsByTerritory, documentation='A Composite containing details of a Genre to which the Software belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2772, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), ParentalWarningType, scope=SoftwareDetailsByTerritory, documentation='A Composite containing details of the classification of the Software according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2780, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalSoftwareDetails'), TechnicalSoftwareDetails, scope=SoftwareDetailsByTerritory, documentation='A Composite containing technical details of the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2788, 9)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2710, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2718, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2726, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2734, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2742, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2747, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2754, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2759, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2767, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2772, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2780, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2788, 9))
    counters.add(cc_11)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2697, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2702, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2710, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2718, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2726, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2734, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2742, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2747, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2754, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2759, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2767, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2772, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2780, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalSoftwareDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2788, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoftwareDetailsByTerritory._Automaton = _BuildAutomaton_40()




SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecordingType'), SoundRecordingType, scope=SoundRecording, documentation='A Composite containing details of the Type of the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2808, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The Flag indicating whether the SoundRecording is related to an Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2815, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecordingId'), SoundRecordingId, scope=SoundRecording, documentation='A Composite containing details of a SoundRecordingId.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2820, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectSoundRecordingId'), MusicalWorkId, scope=SoundRecording, documentation='A Composite containing details of a MusicalWorkId of a MusicalWork used in the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2827, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_15, scope=SoundRecording, documentation='The Identifier (specific to the Message) of the SoundRecording within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2835, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), ReferenceTitle, scope=SoundRecording, documentation='A Composite containing details of the ReferenceTitle of the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2845, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), Description, scope=SoundRecording, documentation='A Composite containing a Description of the Type of instrumentation of the MusicalWork(s) in the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2850, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsMedley'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The Flag indicating whether the SoundRecording is a Medley (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2857, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The Flag indicating whether the SoundRecording is a Potpourri (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2862, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The Flag indicating whether the SoundRecording is instrumental (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2867, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBackground'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The Flag indicating whether the SoundRecording is used as background to other audio or audiovisual material (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2872, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The Flag indicating whether the SoundRecording is hidden in some way from the Consumer (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2877, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The Flag indicating whether the SoundRecording is additional to those on the original Release of which this is a Version (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2882, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HasPreOrderFulfillment'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='A Flag indicating whether a DSP shall (=True) or shall not (=False) make the SoundRecording available during the pre-oder period. If the Flag is not set or set to false, the SoundRecording shall not be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2887, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The Flag indicating whether the SoundRecording is generated by a computer (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2892, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsRemastered'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The Flag indicating whether the SoundRecording is remastered (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2897, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The Flag indicating whether the SoundRecording is preceded by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2902, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The Flag indicating whether the SoundRecording is followed by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2907, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='A Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2912, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), _ImportedBinding__avs.IsoLanguageCode, scope=SoundRecording, documentation='The Language of the Performance recorded in the SoundRecording (represented by an ISO 639-2 LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2917, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=SoundRecording, documentation='The Duration of the SoundRecording (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2924, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=SoundRecording, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2929, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReferenceList'), SoundRecordingCollectionReferenceList, scope=SoundRecording, documentation='A Composite containing details of one or more Collections. The referenced Collection has to be of CollectionType AudioChapter.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2934, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), ResourceMusicalWorkReferenceList, scope=SoundRecording, documentation='A Composite containing details of one or more MusicalWorks contained in the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2941, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), ResourceContainedResourceReferenceList, scope=SoundRecording, documentation='A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2948, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), EventDate, scope=SoundRecording, documentation='A Composite containing details of the Date and Place of the Event in which the SoundRecording was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2955, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MasteredDate'), EventDate, scope=SoundRecording, documentation='A Composite containing details of the Date and Place of the Event in which the SoundRecording was originally mastered (in either analogue or digital form).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2960, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecordingDetailsByTerritory'), SoundRecordingDetailsByTerritory, scope=SoundRecording, documentation='A Composite containing details of Descriptors and other attributes of the SoundRecording which may vary according to Territory.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2965, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning'), _ImportedBinding__avs.TerritoryCode, scope=SoundRecording, documentation='The country of commissioning (represented by an ISO 3166-1 TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2972, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists'), pyxb.binding.datatypes.integer, scope=SoundRecording, documentation='The number of FeaturedArtists associated with the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2979, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists'), pyxb.binding.datatypes.integer, scope=SoundRecording, documentation='The number of NonFeaturedArtists associated with the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2984, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists'), pyxb.binding.datatypes.integer, scope=SoundRecording, documentation='The number of ContractedArtists associated with the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2989, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists'), pyxb.binding.datatypes.integer, scope=SoundRecording, documentation='The number of NonContractedArtists associated with the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2994, 9)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2808, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2815, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2827, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2850, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2857, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2862, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2867, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2872, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2877, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2882, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2887, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2892, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2897, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2902, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2907, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2912, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2917, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2929, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2934, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2941, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2948, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2955, 9))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2960, 9))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2972, 9))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2979, 9))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2984, 9))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2989, 9))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2994, 9))
    counters.add(cc_27)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecordingType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2808, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2815, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecordingId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2820, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectSoundRecordingId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2827, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2835, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2845, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2850, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsMedley')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2857, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPotpourri')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2862, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsInstrumental')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2867, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBackground')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2872, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsHiddenResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2877, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBonusResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2882, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'HasPreOrderFulfillment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2887, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2892, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsRemastered')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2897, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2902, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2907, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2912, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2917, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2924, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2929, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2934, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2941, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2948, 9))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2955, 9))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'MasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2960, 9))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecordingDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2965, 9))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2972, 9))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2979, 9))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2984, 9))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2989, 9))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 2994, 9))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_27, True) ]))
    st_32._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoundRecording._Automaton = _BuildAutomaton_41()




SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=SoundRecordingDetailsByTerritory, documentation='A Territory to which the SoundRecording details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3017, 12)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=SoundRecordingDetailsByTerritory, documentation='A Territory to which the SoundRecording details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3022, 12)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of a Title of the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3030, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), Artist, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of the DisplayArtist for the SoundRecording. The DisplayArtist may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3038, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), Artist, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of a DisplayConductor for the SoundRecording. A DisplayConductor may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3046, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of a Contributor to the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3054, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), IndirectResourceContributor, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of an indirect Contributor to the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3062, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3070, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), LabelName, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing the Name of the Label under which the Release is to be marketed.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3075, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsController'), TypedRightsController, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of RightsController of Rights in the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3083, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), EventDate, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the SoundRecording was re-mastered (usually digitally).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3091, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), EventDate, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the SoundRecording was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3096, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), PLine, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of the PLine for the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3103, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), CourtesyLine, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for guests Artists or others featured on the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3111, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.string, scope=SoundRecordingDetailsByTerritory, documentation='The number indicating the order of the SoundRecording in a group of SoundRecordings in a Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3116, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), HostSoundCarrier, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of a HostSoundCarrier on which the SoundRecording appears (e.g., the CD on which it was originally released). This Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of SoundRecording information.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3121, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MarketingComment'), Comment, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing a Comment about the promotion and marketing of the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3129, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), Genre, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of a Genre to which the SoundRecording belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3134, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), ParentalWarningType, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of the classification of the SoundRecording according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3142, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AvRating'), AvRating, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of a rating for the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3150, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalSoundRecordingDetails'), TechnicalSoundRecordingDetails, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing technical details of the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3158, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3166, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), Keywords, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of a Description of the SoundRecording containing Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3171, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), Synopsis, scope=SoundRecordingDetailsByTerritory, documentation='A Composite containing details of a Synopsis of the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3179, 9)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3030, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3038, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3046, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3054, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3062, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3070, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3075, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3083, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3091, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3096, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3103, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3111, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3116, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3121, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3129, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3134, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3142, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3150, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3158, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3166, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3171, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3179, 9))
    counters.add(cc_21)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3017, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3022, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3030, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3038, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayConductor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3046, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3054, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3062, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3070, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3075, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsController')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3083, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RemasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3091, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3096, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3103, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3111, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3116, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3121, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'MarketingComment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3129, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3134, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3142, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'AvRating')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3150, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalSoundRecordingDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3158, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3166, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3171, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3179, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoundRecordingDetailsByTerritory._Automaton = _BuildAutomaton_42()




SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartType'), Description, scope=SoundRecordingPreviewDetails, documentation='A Composite containing a Description of the Type of Part that the preview relates to, e.g. chorus or intro.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3196, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartPoint'), pyxb.binding.datatypes.decimal, scope=SoundRecordingPreviewDetails, documentation='The start point of the preview given in seconds from the start of the Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3201, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EndPoint'), pyxb.binding.datatypes.decimal, scope=SoundRecordingPreviewDetails, documentation='The end point of the preview given in seconds from the start of the Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3206, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=SoundRecordingPreviewDetails, documentation='The Duration of the preview, measured from the StartPoint.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3211, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TopLeftCorner'), pyxb.binding.datatypes.decimal, scope=SoundRecordingPreviewDetails, documentation='The position of the preview measured in Pixels or millimetres from the top left corner of the Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3216, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BottomRightCorner'), pyxb.binding.datatypes.decimal, scope=SoundRecordingPreviewDetails, documentation='The position of the preview measured in Pixels or millimetres  from the bottom right corner of the Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3221, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExpressionType'), _ImportedBinding__avs.ExpressionType, scope=SoundRecordingPreviewDetails, documentation='A Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3226, 9)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3196, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3201, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3206, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3211, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3216, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3221, 9))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PartType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3196, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'StartPoint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3201, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'EndPoint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3206, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3211, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TopLeftCorner')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3216, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'BottomRightCorner')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3221, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ExpressionType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3226, 9))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoundRecordingPreviewDetails._Automaton = _BuildAutomaton_43()




TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_16, scope=TechnicalImageDetails, documentation='The Identifier (specific to the Message) of the TechnicalImageDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3238, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), DrmPlatformType, scope=TechnicalImageDetails, documentation='A Composite containing details of a Type of DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3248, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), ContainerFormat, scope=TechnicalImageDetails, documentation='A Composite containing details of a ContainerFormat.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3253, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageCodecType'), ImageCodecType, scope=TechnicalImageDetails, documentation='A Composite containing details of a Type of ImageCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3258, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageHeight'), Extent, scope=TechnicalImageDetails, documentation='A Composite containing the vertical Extent of an Image of the Image and a UnitOfMeasure (the default is Pixels).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3263, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageWidth'), Extent, scope=TechnicalImageDetails, documentation='A Composite containing the horizontal Extent of an Image of the Image and a UnitOfMeasure (the default is Pixels).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3268, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AspectRatio'), AspectRatio, scope=TechnicalImageDetails, documentation='A Composite containing the ratio formed by dividing the ImageHeight by the ImageWidth.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3273, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ColorDepth'), pyxb.binding.datatypes.integer, scope=TechnicalImageDetails, documentation='An amount of data determining the color of a pixel of the Image (given in bits per pixel).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3278, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageResolution'), pyxb.binding.datatypes.integer, scope=TechnicalImageDetails, documentation='A number of pixels of the Image displayed in a specific spatial range (given in dpi).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3283, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalImageDetails, documentation='The Flag indicating whether the Image is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3288, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), PreviewDetails, scope=TechnicalImageDetails, documentation='A Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3293, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=TechnicalImageDetails, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3298, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), FulfillmentDate, scope=TechnicalImageDetails, documentation='A Composite containing details of when a consumer is able to get hold of the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3303, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), Description, scope=TechnicalImageDetails, documentation='A Composite containing a Description providing details of how a DSP can obtain a File that contains the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3311, 12)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), File, scope=TechnicalImageDetails, documentation='A Composite containing details of a File containing the Image that a DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3318, 12)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), Fingerprint, scope=TechnicalImageDetails, documentation='A Composite containing details of a Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3324, 9)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3248, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3253, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3258, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3263, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3268, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3273, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3278, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3283, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3288, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3293, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3298, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3303, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3310, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3324, 9))
    counters.add(cc_13)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3238, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3248, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ContainerFormat')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3253, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3258, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageHeight')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3263, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageWidth')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3268, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AspectRatio')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3273, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ColorDepth')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3278, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageResolution')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3283, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3288, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3293, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3298, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3303, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3311, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3318, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3324, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalImageDetails._Automaton = _BuildAutomaton_44()




TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_17, scope=TechnicalMidiDetails, documentation='The Identifier (specific to the Message) of the TechnicalMidiDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3344, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=TechnicalMidiDetails, documentation='The Duration of the instantiation of the MIDI if this differs from the Duration provided for the MIDI itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3354, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), pyxb.binding.datatypes.boolean, scope=TechnicalMidiDetails, documentation='The Flag indicating whether the MIDI needs to be processed (=True) or not (=False) (typically: transcoded) by the MessageRecipient before being delivered to Consumers.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3359, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), pyxb.binding.datatypes.duration, scope=TechnicalMidiDetails, documentation="The Duration of the MIDI that may be sold to a Consumer if the MIDI provided is not intended to be provided to Consumers 'as is' but will need to be transcoded into an appropriate format by the MessageRecipient or any other DSP handling the Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3364, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalMidiDetails, documentation='The Flag indicating whether the MIDI is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3369, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), SoundRecordingPreviewDetails, scope=TechnicalMidiDetails, documentation='A Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3374, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=TechnicalMidiDetails, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3381, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), FulfillmentDate, scope=TechnicalMidiDetails, documentation='A Composite containing details of when a consumer is able to get hold of the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3386, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), Description, scope=TechnicalMidiDetails, documentation='A Composite containing a Description providing details of how a DSP can obtain a File that contains the MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3394, 12)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), File, scope=TechnicalMidiDetails, documentation='A Composite containing details of a File containing the MIDI that a DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3401, 12)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfVoices'), pyxb.binding.datatypes.integer, scope=TechnicalMidiDetails, documentation='The number of voices.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3407, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundProcessorType'), SoundProcessorType, scope=TechnicalMidiDetails, documentation='A Type of sound processor.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3412, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), Fingerprint, scope=TechnicalMidiDetails, documentation='A Composite containing details of a Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3419, 9)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3354, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3359, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3364, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3369, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3374, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3381, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3386, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3393, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3407, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3412, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3419, 9))
    counters.add(cc_10)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3344, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3354, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3359, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3364, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3369, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3374, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3381, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3386, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3394, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3401, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfVoices')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3407, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundProcessorType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3412, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3419, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalMidiDetails._Automaton = _BuildAutomaton_45()




TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_18, scope=TechnicalSheetMusicDetails, documentation='The Identifier (specific to the Message) of the TechnicalSheetMusicDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3439, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), DrmPlatformType, scope=TechnicalSheetMusicDetails, documentation='A Composite containing details of a Type of DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3449, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), ContainerFormat, scope=TechnicalSheetMusicDetails, documentation='A Composite containing details of a ContainerFormat.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3454, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SheetMusicCodecType'), SheetMusicCodecType, scope=TechnicalSheetMusicDetails, documentation='A Composite containing details of a Type of SheetMusicCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3459, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalSheetMusicDetails, documentation='The Flag indicating whether the SheetMusic is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3466, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), PreviewDetails, scope=TechnicalSheetMusicDetails, documentation='A Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3471, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=TechnicalSheetMusicDetails, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3476, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), FulfillmentDate, scope=TechnicalSheetMusicDetails, documentation='A Composite containing details of when a consumer is able to get hold of the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3481, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), Description, scope=TechnicalSheetMusicDetails, documentation='A Composite containing a Description providing details of how a DSP can obtain a File that contains the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3489, 12)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), File, scope=TechnicalSheetMusicDetails, documentation='A Composite containing details of a File containing the SheetMusic that a DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3496, 12)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), Fingerprint, scope=TechnicalSheetMusicDetails, documentation='A Composite containing details of a Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3502, 9)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3449, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3454, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3459, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3466, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3471, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3476, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3481, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3488, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3502, 9))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3439, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3449, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ContainerFormat')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3454, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'SheetMusicCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3459, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3466, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3471, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3476, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3481, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3489, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3496, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3502, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalSheetMusicDetails._Automaton = _BuildAutomaton_46()




TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_19, scope=TechnicalSoftwareDetails, documentation='The Identifier (specific to the Message) of the TechnicalSoftwareDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3522, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), DrmPlatformType, scope=TechnicalSoftwareDetails, documentation='A Composite containing details of a Type of DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3532, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OperatingSystemType'), OperatingSystemType, scope=TechnicalSoftwareDetails, documentation='A Composite containing details of a Type of OperatingSystem.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3537, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalSoftwareDetails, documentation='The Flag indicating whether the Software is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3544, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), PreviewDetails, scope=TechnicalSoftwareDetails, documentation='A Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3549, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=TechnicalSoftwareDetails, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3554, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), FulfillmentDate, scope=TechnicalSoftwareDetails, documentation='A Composite containing details of when a consumer is able to get hold of the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3559, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), Description, scope=TechnicalSoftwareDetails, documentation='A Composite containing a Description providing details of how a DSP can obtain a File that contains the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3567, 12)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), File, scope=TechnicalSoftwareDetails, documentation='A Composite containing details of a File containing the Software that a DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3574, 12)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), Fingerprint, scope=TechnicalSoftwareDetails, documentation='A Composite containing details of a Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3580, 9)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3532, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3537, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3544, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3549, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3554, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3559, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3566, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3580, 9))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3522, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3532, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'OperatingSystemType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3537, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3544, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3549, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3554, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3559, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3567, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3574, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3580, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalSoftwareDetails._Automaton = _BuildAutomaton_47()




TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_20, scope=TechnicalSoundRecordingDetails, documentation='The Identifier (specific to the Message) of the TechnicalSoundRecordingDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3600, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), DrmPlatformType, scope=TechnicalSoundRecordingDetails, documentation='A Composite containing details of a Type of DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3610, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), ContainerFormat, scope=TechnicalSoundRecordingDetails, documentation='A Composite containing details of a ContainerFormat.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3615, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AudioCodecType'), AudioCodecType, scope=TechnicalSoundRecordingDetails, documentation='A Composite containing details of a Type of AudioCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3620, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BitRate'), BitRate, scope=TechnicalSoundRecordingDetails, documentation='A Composite containing the BitRate for the audio data and a UnitOfMeasure (the default is kbps).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3625, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfChannels'), pyxb.binding.datatypes.integer, scope=TechnicalSoundRecordingDetails, documentation='A number of audio channels.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3630, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SamplingRate'), SamplingRate, scope=TechnicalSoundRecordingDetails, documentation='A Composite containing the sampling rate of the SoundRecording and a UnitOfMeasure (the default is Hz).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3635, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BitsPerSample'), pyxb.binding.datatypes.integer, scope=TechnicalSoundRecordingDetails, documentation='An amount of audio data in a sample.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3640, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=TechnicalSoundRecordingDetails, documentation='The Duration of the instantiation of the SoundRecording if this differs from the Duration provided for the SoundRecording itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3645, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), pyxb.binding.datatypes.boolean, scope=TechnicalSoundRecordingDetails, documentation='The Flag indicating whether the SoundRecording needs to be processed (=True) or not (=False) (typically: transcoded) by the MessageRecipient before being delivered to Consumers.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3650, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), pyxb.binding.datatypes.duration, scope=TechnicalSoundRecordingDetails, documentation="The Duration of the SoundRecording that may be sold to a Consumer if the SoundRecording provided is not intended to be provided to Consumers 'as is' but will need to be transcoded into an appropriate format by the MessageRecipient or any other DSP handling the Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3655, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalSoundRecordingDetails, documentation='The Flag indicating whether the SoundRecording is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3660, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), SoundRecordingPreviewDetails, scope=TechnicalSoundRecordingDetails, documentation='A Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3665, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=TechnicalSoundRecordingDetails, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3672, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), FulfillmentDate, scope=TechnicalSoundRecordingDetails, documentation='A Composite containing details of when a consumer is able to get hold of the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3677, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), Description, scope=TechnicalSoundRecordingDetails, documentation='A Composite containing a Description providing details of how a DSP can obtain a File that contains the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3685, 12)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), File, scope=TechnicalSoundRecordingDetails, documentation='A Composite containing details of a File containing the SoundRecording that a DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3692, 12)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), Fingerprint, scope=TechnicalSoundRecordingDetails, documentation='A Composite containing details of a Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3698, 9)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3610, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3615, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3620, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3625, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3630, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3635, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3640, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3645, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3650, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3655, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3660, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3665, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3672, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3677, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3684, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3698, 9))
    counters.add(cc_15)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3600, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3610, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ContainerFormat')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3615, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AudioCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3620, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'BitRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3625, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfChannels')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3630, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'SamplingRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3635, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'BitsPerSample')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3640, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3645, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3650, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3655, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3660, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3665, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3672, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3677, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3685, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3692, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3698, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalSoundRecordingDetails._Automaton = _BuildAutomaton_48()




TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_21, scope=TechnicalTextDetails, documentation='The Identifier (specific to the Message) of the TechnicalTextDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3718, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), DrmPlatformType, scope=TechnicalTextDetails, documentation='A Composite containing details of a Type of DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3728, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), ContainerFormat, scope=TechnicalTextDetails, documentation='A Composite containing details of a ContainerFormat.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3733, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TextCodecType'), TextCodecType, scope=TechnicalTextDetails, documentation='A Composite containing details of a Type of TextCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3738, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalTextDetails, documentation='The Flag indicating whether the Text is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3743, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), PreviewDetails, scope=TechnicalTextDetails, documentation='A Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3748, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=TechnicalTextDetails, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3753, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), FulfillmentDate, scope=TechnicalTextDetails, documentation='A Composite containing details of when a consumer is able to get hold of the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3758, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), Description, scope=TechnicalTextDetails, documentation='A Composite containing a Description providing details of how a DSP can obtain a File that contains the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3766, 12)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), File, scope=TechnicalTextDetails, documentation='A Composite containing details of a File containing the Text that a DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3773, 12)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), Fingerprint, scope=TechnicalTextDetails, documentation='A Composite containing details of a Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3779, 9)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3728, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3733, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3738, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3743, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3748, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3753, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3758, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3765, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3779, 9))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3718, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3728, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ContainerFormat')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3733, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TextCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3738, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3743, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3748, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3753, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3758, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3766, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3773, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3779, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalTextDetails._Automaton = _BuildAutomaton_49()




TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_22, scope=TechnicalUserDefinedResourceDetails, documentation='The Identifier (specific to the Message) of the TechnicalUserDefinedResourceDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3799, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), UserDefinedValue, scope=TechnicalUserDefinedResourceDetails, documentation='A Composite containing details of a UserDefinedValue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3809, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalUserDefinedResourceDetails, documentation='The Flag indicating whether the UserDefinedResource is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3817, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), PreviewDetails, scope=TechnicalUserDefinedResourceDetails, documentation='A Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3822, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=TechnicalUserDefinedResourceDetails, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3827, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), FulfillmentDate, scope=TechnicalUserDefinedResourceDetails, documentation='A Composite containing details of when a consumer is able to get hold of the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3832, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), Description, scope=TechnicalUserDefinedResourceDetails, documentation='A Composite containing a Description providing details of how a DSP can obtain a File that contains the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3840, 12)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), File, scope=TechnicalUserDefinedResourceDetails, documentation='A Composite containing details of a File containing the UserDefinedResource that a DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3847, 12)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), Fingerprint, scope=TechnicalUserDefinedResourceDetails, documentation='A Composite containing details of a Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3853, 9)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3809, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3817, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3822, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3827, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3832, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3839, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3853, 9))
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3799, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedValue')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3809, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3817, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3822, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3827, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3832, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3840, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3847, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3853, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalUserDefinedResourceDetails._Automaton = _BuildAutomaton_50()




TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_23, scope=TechnicalVideoDetails, documentation='The Identifier (specific to the Message) of the TechnicalVideoDetails within the Release which contains it. This is a LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3873, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), DrmPlatformType, scope=TechnicalVideoDetails, documentation='A Composite containing details of a Type of DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3883, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OverallBitRate'), BitRate, scope=TechnicalVideoDetails, documentation='A Composite containing the overall BitRate and a UnitOfMeasure (the default is kbps).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3888, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), ContainerFormat, scope=TechnicalVideoDetails, documentation='A Composite containing details of a ContainerFormat.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3893, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoCodecType'), VideoCodecType, scope=TechnicalVideoDetails, documentation='A Composite containing details of a Type of VideoCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3898, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoBitRate'), BitRate, scope=TechnicalVideoDetails, documentation='A Composite containing the BitRate for the video data and a UnitOfMeasure (the default is kbps).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3903, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FrameRate'), FrameRate, scope=TechnicalVideoDetails, documentation='A Composite containing the Rate for a number of frames shown in the Video in a specific Period of Time and a UnitOfMeasure (the default is Hz, interlaced).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3908, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageHeight'), Extent, scope=TechnicalVideoDetails, documentation='A Composite containing the vertical Extent of an Image of the Video and a UnitOfMeasure (the default is Pixels).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3913, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageWidth'), Extent, scope=TechnicalVideoDetails, documentation='A Composite containing the horizontal Extent of an Image of the Video and a UnitOfMeasure (the default is Pixels).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3918, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AspectRatio'), AspectRatio, scope=TechnicalVideoDetails, documentation='A Composite containing the ratio formed by dividing the ImageHeight by the ImageWidth.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3923, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ColorDepth'), pyxb.binding.datatypes.integer, scope=TechnicalVideoDetails, documentation='An amount of data determining the color of a pixel of an Image of the Video (given in bits per pixel).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3928, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoDefinitionType'), _ImportedBinding__avs.VideoDefinitionType, scope=TechnicalVideoDetails, documentation='A Type of resolution (or definition) in which the Video is provided.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3933, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AudioCodecType'), AudioCodecType, scope=TechnicalVideoDetails, documentation='A Composite containing details of a Type of AudioCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3940, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AudioBitRate'), BitRate, scope=TechnicalVideoDetails, documentation='A Composite containing the BitRate for the audio data and a UnitOfMeasure (the default is kbps).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3945, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfAudioChannels'), pyxb.binding.datatypes.integer, scope=TechnicalVideoDetails, documentation='A number of audio channels.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3950, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AudioSamplingRate'), SamplingRate, scope=TechnicalVideoDetails, documentation='A Composite containing the SamplingRate for the audio data and a UnitOfMeasure (the default is Hz).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3955, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AudioBitsPerSample'), pyxb.binding.datatypes.integer, scope=TechnicalVideoDetails, documentation='An amount of audio data in a sample.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3960, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=TechnicalVideoDetails, documentation='The Duration of the instantiation of the Video if this differs from the Duration provided for the Video itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3965, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), pyxb.binding.datatypes.boolean, scope=TechnicalVideoDetails, documentation='The Flag indicating whether the Video needs to be processed (=True) or not (=False) (typically: transcoded) by the MessageRecipient before being delivered to Consumers.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3970, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), pyxb.binding.datatypes.duration, scope=TechnicalVideoDetails, documentation="The Duration of the Video that may be sold to a Consumer if the Video provided is not intended to be provided to Consumers 'as is' but will need to be transcoded into an appropriate format by the MessageRecipient or any other DSP handling the Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3975, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalVideoDetails, documentation='The Flag indicating whether the Video is technically a preview of the parent Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3980, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), SoundRecordingPreviewDetails, scope=TechnicalVideoDetails, documentation='A Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3985, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=TechnicalVideoDetails, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3992, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), FulfillmentDate, scope=TechnicalVideoDetails, documentation='A Composite containing details of when a consumer is able to get hold of the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3997, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), Description, scope=TechnicalVideoDetails, documentation='A Composite containing a Description providing details of how a DSP can obtain a File that contains the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4005, 12)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), File, scope=TechnicalVideoDetails, documentation='A Composite containing details of a File containing the Video that a DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4012, 12)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), Fingerprint, scope=TechnicalVideoDetails, documentation='A Composite containing details of a Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4018, 9)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3883, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3888, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3893, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3898, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3903, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3908, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3913, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3918, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3923, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3928, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3933, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3940, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3945, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3950, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3955, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3960, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3965, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3970, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3975, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3980, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3985, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3992, 9))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3997, 9))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4004, 9))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4018, 9))
    counters.add(cc_24)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3873, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3883, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'OverallBitRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3888, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ContainerFormat')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3893, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3898, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoBitRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3903, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FrameRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3908, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageHeight')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3913, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageWidth')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3918, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AspectRatio')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3923, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ColorDepth')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3928, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoDefinitionType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3933, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AudioCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3940, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AudioBitRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3945, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfAudioChannels')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3950, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AudioSamplingRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3955, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AudioBitsPerSample')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3960, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3965, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3970, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3975, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3980, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3985, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3992, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 3997, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4005, 12))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4012, 12))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4018, 9))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, True) ]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalVideoDetails._Automaton = _BuildAutomaton_51()




Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TextType'), TextType, scope=Text, documentation='A Composite containing details of the Type of the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4038, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=Text, documentation='The Flag indicating whether the Text is related to an Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4043, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TextId'), TextId, scope=Text, documentation='A Composite containing details of an Identifier of the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4048, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectTextId'), MusicalWorkId, scope=Text, documentation='A Composite containing details of a MusicalWorkId of a MusicalWork used in the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4056, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_24, scope=Text, documentation='The Identifier (specific to the Message) of the Text within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4064, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), ResourceMusicalWorkReferenceList, scope=Text, documentation='A Composite containing details of one or more MusicalWorks contained in the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4074, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), ResourceContainedResourceReferenceList, scope=Text, documentation='A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4081, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=Text, documentation='A Composite containing details of a Title of the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4088, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), EventDate, scope=Text, documentation='A Composite containing details of the Date and Place of the Event in which the Text was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4096, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TextDetailsByTerritory'), TextDetailsByTerritory, scope=Text, documentation='A Composite containing details of the Text which may vary according to Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4101, 9)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4038, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4043, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4048, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4056, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4074, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4081, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4088, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4096, 9))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'TextType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4038, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4043, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'TextId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4048, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectTextId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4056, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4064, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4074, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4081, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4088, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4096, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'TextDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4101, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Text._Automaton = _BuildAutomaton_52()




TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=TextDetailsByTerritory, documentation='A Territory to which the Text details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4126, 12)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=TextDetailsByTerritory, documentation='A Territory to which the Text details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4131, 12)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=TextDetailsByTerritory, documentation='A Composite containing details of a Contributor to the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4139, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), IndirectResourceContributor, scope=TextDetailsByTerritory, documentation='A Composite containing details of an indirect Contributor to the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4147, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), CLine, scope=TextDetailsByTerritory, documentation='A Composite containing details of the CLine for the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4155, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), CourtesyLine, scope=TextDetailsByTerritory, documentation='A Composite containing an Annotation which acknowledges record companies and/or other Parties giving permission for Artists or others featured in the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4163, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), EventDate, scope=TextDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the Text was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4168, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=TextDetailsByTerritory, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4175, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), Keywords, scope=TextDetailsByTerritory, documentation='A Composite containing details of a Description of the Text containing Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4180, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), Synopsis, scope=TextDetailsByTerritory, documentation='A Composite containing details of a Synopsis of the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4188, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), Genre, scope=TextDetailsByTerritory, documentation='A Composite containing details of a Genre to which the Text belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4193, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), ParentalWarningType, scope=TextDetailsByTerritory, documentation='A Composite containing details of the classification of the Text according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4201, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalTextDetails'), TechnicalTextDetails, scope=TextDetailsByTerritory, documentation='A Composite containing technical details of the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4209, 9)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4139, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4147, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4155, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4163, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4168, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4175, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4180, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4188, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4193, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4201, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4209, 9))
    counters.add(cc_10)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4126, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4131, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4139, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4147, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4155, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4163, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4168, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4175, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4180, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4188, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4193, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4201, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalTextDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4209, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TextDetailsByTerritory._Automaton = _BuildAutomaton_53()




TypedRightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=TypedRightsController, documentation='A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4230, 12)))

TypedRightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), PartyName, scope=TypedRightsController, documentation='A Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4236, 15)))

TypedRightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsControllerRole'), _ImportedBinding__avs.RightsControllerRole, scope=TypedRightsController, documentation='A role that describes the Party involved in the administration of Rights.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4251, 9)))

TypedRightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightShareUnknown'), pyxb.binding.datatypes.boolean, scope=TypedRightsController, documentation='The Flag indicating whether the RightSharePercentage is unknown (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4260, 12)))

TypedRightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightSharePercentage'), pyxb.binding.datatypes.string, scope=TypedRightsController, documentation="The share of the licensed Rights owned by the RightsController. RightShare information is given as a xs:decimal value (e.g. '0.125' represents 12.5%). If no information is given, 100% is assumed.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4265, 12)))

TypedRightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsControllerType'), _ImportedBinding__avs.RightsControllerType, scope=TypedRightsController, documentation='A type of the RightsController.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4271, 9)))

TypedRightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryOfRegistration'), _ImportedBinding__avs.TerritoryCode, scope=TypedRightsController, documentation='The country of registration (represented by an ISO 3166-1 TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4278, 9)))

TypedRightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartDate'), pyxb.binding.datatypes.date, scope=TypedRightsController, documentation='The Date that marks the beginning of the title (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4285, 9)))

TypedRightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EndDate'), pyxb.binding.datatypes.date, scope=TypedRightsController, documentation='The Date that marks the end of the title (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4290, 9)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4241, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4251, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4259, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4271, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4278, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4285, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4290, 9))
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TypedRightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4230, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TypedRightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4236, 15))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TypedRightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4241, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TypedRightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsControllerRole')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4251, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TypedRightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'RightShareUnknown')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4260, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TypedRightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'RightSharePercentage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4265, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TypedRightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsControllerType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4271, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TypedRightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryOfRegistration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4278, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TypedRightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'StartDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4285, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TypedRightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'EndDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4290, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TypedRightsController._Automaton = _BuildAutomaton_54()




UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceType'), UserDefinedResourceType, scope=UserDefinedResource, documentation='A Composite containing details of the Type of the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4307, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=UserDefinedResource, documentation='The Flag indicating whether the UserDefinedResource is related to an Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4314, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceId'), UserDefinedResourceId, scope=UserDefinedResource, documentation='A Composite containing details of Identifiers of the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4319, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectUserDefinedResourceId'), MusicalWorkId, scope=UserDefinedResource, documentation='A Composite containing details of a MusicalWorkId of a MusicalWork used in the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4326, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_25, scope=UserDefinedResource, documentation='The Identifier (specific to the Message) of the UserDefinedResource within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4334, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), ResourceMusicalWorkReferenceList, scope=UserDefinedResource, documentation='A Composite containing details of one or more MusicalWorks contained in the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4344, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), ResourceContainedResourceReferenceList, scope=UserDefinedResource, documentation='A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4351, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=UserDefinedResource, documentation='A Composite containing details of a Title of the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4358, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), UserDefinedValue, scope=UserDefinedResource, documentation='A Composite containing details of a UserDefinedValue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4366, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceDetailsByTerritory'), UserDefinedResourceDetailsByTerritory, scope=UserDefinedResource, documentation='A Composite containing details of the UserDefinedResource which may vary according to Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4374, 9)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4307, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4314, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4326, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4344, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4351, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4358, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4366, 9))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4307, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4314, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4319, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectUserDefinedResourceId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4326, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4334, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4344, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4351, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4358, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedValue')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4366, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4374, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UserDefinedResource._Automaton = _BuildAutomaton_55()




UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=UserDefinedResourceDetailsByTerritory, documentation='A Territory to which the UserDefinedResource details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4399, 12)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=UserDefinedResourceDetailsByTerritory, documentation='A Territory to which the UserDefinedResource details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4404, 12)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing details of a Contributor to the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4412, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), IndirectResourceContributor, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing details of an indirect Contributor to the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4420, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), UserDefinedValue, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing details of a UserDefinedValue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4428, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), PLine, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing details of the PLine for the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4436, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), CLine, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing details of the CLine for the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4444, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), EventDate, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the UserDefinedResource was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4452, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4459, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), Keywords, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing details of a Description of the UserDefinedResource containing Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4464, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), Synopsis, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing details of a Synopsis of the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4472, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), Genre, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing details of a Genre to which the UserDefinedResource belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4477, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), ParentalWarningType, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing details of the classification of the UserDefinedResource according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4485, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalUserDefinedResourceDetails'), TechnicalUserDefinedResourceDetails, scope=UserDefinedResourceDetailsByTerritory, documentation='A Composite containing technical details of the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4493, 9)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4412, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4420, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4428, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4436, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4444, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4452, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4459, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4464, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4472, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4477, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4485, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4493, 9))
    counters.add(cc_11)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4399, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4404, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4412, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4420, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedValue')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4428, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4436, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4444, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4452, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4459, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4464, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4472, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4477, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4485, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalUserDefinedResourceDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4493, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UserDefinedResourceDetailsByTerritory._Automaton = _BuildAutomaton_56()




Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoType'), VideoType, scope=Video, documentation='A Composite containing details of the Type of the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4513, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The Flag indicating whether the Video is related to an Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4518, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoId'), VideoId, scope=Video, documentation='A Composite containing details of an Identifier of the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4523, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectVideoId'), MusicalWorkId, scope=Video, documentation='A Composite containing details of a MusicalWorkId of a MusicalWork used in the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4531, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_26, scope=Video, documentation='The Identifier (specific to the Message) of the Video within the Release which contains it. This is a LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4539, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoCueSheetReference'), VideoCueSheetReference, scope=Video, documentation='A Composite containing a VideoCueSheetReference for a CueSheet (specific to this Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4550, 12)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReasonForCueSheetAbsence'), Reason, scope=Video, documentation='A Composite containing the textual Description of the reason for the Identifier being used as a proxy.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4557, 12)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), ReferenceTitle, scope=Video, documentation='A Composite containing details of the ReferenceTitle of the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4563, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=Video, documentation='A Composite containing details of a Title of the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4568, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), Description, scope=Video, documentation='A Composite containing a Description of the Type of instrumentation of the MusicalWork(s) in the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4576, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsMedley'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The Flag indicating whether the Video is a Medley (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4583, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The Flag indicating whether the Video is a Potpourri (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4588, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The Flag indicating whether the Video is instrumental (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4593, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBackground'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The Flag indicating whether the Video is used as background to other audio or audiovisual material (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4598, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The Flag indicating whether the Video is hidden in some way from the Consumer (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4603, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The Flag indicating whether the Video is additional to those on the original Release of which this is a Version (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4608, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HasPreOrderFulfillment'), pyxb.binding.datatypes.boolean, scope=Video, documentation='A Flag indicating whether a DSP shall (=True) or shall not (=False) make the Video available during the pre-oder period. If the Flag is not set or set to false, the Video shall not be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4613, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsRemastered'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The Flag indicating whether the Video is remastered (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4618, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The Flag indicating whether the Video is preceded by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4623, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The Flag indicating whether the Video is followed by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4628, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), pyxb.binding.datatypes.boolean, scope=Video, documentation='A Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4633, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), _ImportedBinding__avs.IsoLanguageCode, scope=Video, documentation='The original Language of the Performance recorded in the Video (represented by an ISO 639-2 LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4638, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageOfDubbing'), _ImportedBinding__avs.IsoLanguageCode, scope=Video, documentation='The Language of dubbing used in the Video (represented by an ISO 639-2 LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4646, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SubTitleLanguage'), _ImportedBinding__avs.IsoLanguageCode, scope=Video, documentation='The Language of SubTitles in the Video (represented by an ISO 639-2 LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4654, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=Video, documentation='The Duration of the Video (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4662, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=Video, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4667, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoCollectionReferenceList'), SoundRecordingCollectionReferenceList, scope=Video, documentation='A Composite containing details of one or more Collections. The referenced Collection has to be of CollectionType VideoChapter.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4672, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), ResourceMusicalWorkReferenceList, scope=Video, documentation='A Composite containing details of one or more MusicalWorks contained in the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4679, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), ResourceContainedResourceReferenceList, scope=Video, documentation='A Composite containing details of ResourceContainedResourceReferences referring to a Resource that is contained in the current Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4686, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), EventDate, scope=Video, documentation='A Composite containing details of the Date and Place of the Event in which the Video was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4693, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MasteredDate'), EventDate, scope=Video, documentation='A Composite containing details of the Date and Place of the Event in which the Video was originally mastered (in either analogue or digital form).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4698, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoDetailsByTerritory'), VideoDetailsByTerritory, scope=Video, documentation='A Composite containing details of Descriptors and other attributes of the Video which may vary according to Territory of release. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4703, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning'), _ImportedBinding__avs.TerritoryCode, scope=Video, documentation='The country of commissioning (represented by an ISO 3166-1 TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4710, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists'), pyxb.binding.datatypes.integer, scope=Video, documentation='The number of FeaturedArtists associated with the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4717, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists'), pyxb.binding.datatypes.integer, scope=Video, documentation='The number of NonFeaturedArtists associated with the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4722, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists'), pyxb.binding.datatypes.integer, scope=Video, documentation='The number of ContractedArtists associated with the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4727, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists'), pyxb.binding.datatypes.integer, scope=Video, documentation='The number of NonContractedArtists associated with the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4732, 9)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4513, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4518, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4523, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4531, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4549, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4563, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4568, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4576, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4583, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4588, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4593, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4598, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4603, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4608, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4613, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4618, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4623, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4628, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4633, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4638, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4646, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4654, 9))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4667, 9))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4672, 9))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4679, 9))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4686, 9))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4693, 9))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4698, 9))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4710, 9))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4717, 9))
    counters.add(cc_29)
    cc_30 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4722, 9))
    counters.add(cc_30)
    cc_31 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4727, 9))
    counters.add(cc_31)
    cc_32 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4732, 9))
    counters.add(cc_32)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4513, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4518, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4523, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectVideoId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4531, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4539, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoCueSheetReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4550, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'ReasonForCueSheetAbsence')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4557, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4563, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4568, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4576, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsMedley')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4583, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPotpourri')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4588, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsInstrumental')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4593, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBackground')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4598, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsHiddenResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4603, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBonusResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4608, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'HasPreOrderFulfillment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4613, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsRemastered')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4618, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4623, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4628, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4633, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4638, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageOfDubbing')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4646, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'SubTitleLanguage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4654, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4662, 9))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4667, 9))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoCollectionReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4672, 9))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4679, 9))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4686, 9))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4693, 9))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'MasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4698, 9))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4703, 9))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4710, 9))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4717, 9))
    st_33 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_30, False))
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4722, 9))
    st_34 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_34)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_31, False))
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4727, 9))
    st_35 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_35)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_32, False))
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4732, 9))
    st_36 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_36)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    transitions.append(fac.Transition(st_34, [
         ]))
    transitions.append(fac.Transition(st_35, [
         ]))
    transitions.append(fac.Transition(st_36, [
         ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_28, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_29, True) ]))
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_29, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_29, False) ]))
    st_33._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_34, [
        fac.UpdateInstruction(cc_30, True) ]))
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_30, False) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_30, False) ]))
    st_34._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_35, [
        fac.UpdateInstruction(cc_31, True) ]))
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_31, False) ]))
    st_35._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_36, [
        fac.UpdateInstruction(cc_32, True) ]))
    st_36._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Video._Automaton = _BuildAutomaton_57()




VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=VideoDetailsByTerritory, documentation='A Territory to which the SoundRecording details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4755, 12)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=VideoDetailsByTerritory, documentation='A Territory to which the SoundRecording details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4760, 12)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=VideoDetailsByTerritory, documentation='A Composite containing details of a Title of the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4768, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), Artist, scope=VideoDetailsByTerritory, documentation='A Composite containing details of the DisplayArtist for the SoundRecording. The DisplayArtist may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4776, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), Artist, scope=VideoDetailsByTerritory, documentation='A Composite containing details of a DisplayConductor for the Video. A DisplayConductor may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4784, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=VideoDetailsByTerritory, documentation='A Composite containing details of a Contributor to the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4792, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), IndirectResourceContributor, scope=VideoDetailsByTerritory, documentation='A Composite containing details of an indirect Contributor to the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4800, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=VideoDetailsByTerritory, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4808, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), LabelName, scope=VideoDetailsByTerritory, documentation='A Composite containing the Name of the Label under which the Release is to be marketed.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4813, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsController'), TypedRightsController, scope=VideoDetailsByTerritory, documentation='A Composite containing details of RightsController of Rights in the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4821, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), EventDate, scope=VideoDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the SoundRecording was re-mastered (usually digitally).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4829, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), EventDate, scope=VideoDetailsByTerritory, documentation='A Composite containing details of the Date and Place of the Event in which the SoundRecording was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4834, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), PLine, scope=VideoDetailsByTerritory, documentation='A Composite containing details of the PLine for the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4841, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), CourtesyLine, scope=VideoDetailsByTerritory, documentation='A Composite containing an Annotation Annotation which acknowledges record companies and/or other Parties giving permission for guests Artists or others featured on the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4849, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.string, scope=VideoDetailsByTerritory, documentation='The number indicating the order of the Video in a group of Videos in a Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4854, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), HostSoundCarrier, scope=VideoDetailsByTerritory, documentation='A Composite containing details of a HostSoundCarrier on which the Video appears (e.g., the CD on which it was originally released). This Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of Video information.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4859, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MarketingComment'), Comment, scope=VideoDetailsByTerritory, documentation='A Composite containing a Comment about the promotion and marketing of the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4867, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), Genre, scope=VideoDetailsByTerritory, documentation='A Composite containing details of a Genre to which the Video belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4872, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), ParentalWarningType, scope=VideoDetailsByTerritory, documentation='A Composite containing details of the classification of the Video according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4880, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AvRating'), AvRating, scope=VideoDetailsByTerritory, documentation='A Composite containing details of a rating for the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4888, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), FulfillmentDate, scope=VideoDetailsByTerritory, documentation='A Composite containing details of a FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4896, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), Keywords, scope=VideoDetailsByTerritory, documentation='A Composite containing details of a Description of the Video containing Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4901, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), Synopsis, scope=VideoDetailsByTerritory, documentation='A Composite containing details of a Synopsis of the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4909, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), CLine, scope=VideoDetailsByTerritory, documentation='A Composite containing details of the CLine for the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4914, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalVideoDetails'), TechnicalVideoDetails, scope=VideoDetailsByTerritory, documentation='A Composite containing technical details of the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4922, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Character'), Character, scope=VideoDetailsByTerritory, documentation='A Composite containing details of a Character in the Video. A Character may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4930, 9)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4768, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4776, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4784, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4792, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4800, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4808, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4813, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4821, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4829, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4834, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4841, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4849, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4854, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4859, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4867, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4872, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4880, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4888, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4896, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4901, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4909, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4914, 9))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4922, 9))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4930, 9))
    counters.add(cc_23)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4755, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4760, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4768, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4776, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayConductor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4784, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4792, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4800, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4808, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4813, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsController')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4821, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RemasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4829, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4834, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4841, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4849, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4854, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4859, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'MarketingComment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4867, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4872, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4880, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'AvRating')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4888, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4896, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4901, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4909, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4914, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalVideoDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4922, 9))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Character')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4930, 9))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VideoDetailsByTerritory._Automaton = _BuildAutomaton_58()




WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Condition'), Condition, scope=WebPolicy, documentation='A Composite containing details of conditions.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4950, 9)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AccessBlockingRequested'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A Flag indicating whether a MessageRecipient shall block all access to the Release (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4956, 12)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AccessLimitation'), _ImportedBinding__avs.AccessLimitation, scope=WebPolicy, documentation='A Type of limitation on the access of the UgcSite. This governs whether the content of UgcSites is only accessible to members/friends of the site or not.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4962, 15)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EmbeddingAllowed'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A Flag indicating whether a user is allowed to embed a Release on his website outside the UgcSite (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4967, 15)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserRatingAllowed'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A Flag indicating whether a user is allowed to provide a rating for the Release on the UgcSite (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4972, 15)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserCommentAllowed'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A Flag indicating whether a user is allowed to provide a Comment for the Release on the UgcSite (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4977, 15)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserResponsesAllowed'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A Flag indicating whether a user is allowed to provide a response to a Comment for the Release on the UgcSite (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4982, 15)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SyndicationAllowed'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A Flag indicating whether syndication is allowed (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4987, 15)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4962, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4967, 15))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4972, 15))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4977, 15))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4982, 15))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4987, 15))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'Condition')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4950, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'AccessBlockingRequested')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4956, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'AccessLimitation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4962, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'EmbeddingAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4967, 15))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'UserRatingAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4972, 15))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'UserCommentAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4977, 15))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'UserResponsesAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4982, 15))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'SyndicationAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 4987, 15))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
WebPolicy._Automaton = _BuildAutomaton_59()




Artist._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=Artist, documentation='A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5046, 12)))

Artist._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), PartyName, scope=Artist, documentation='A Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5052, 15)))

Artist._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ArtistRole'), ArtistRole, scope=Artist, documentation='A Composite containing details of a role played by the Artist in relation to other Artists.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5067, 9)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5057, 15))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Artist._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5046, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Artist._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5052, 15))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Artist._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5057, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Artist._UseForTag(pyxb.namespace.ExpandedName(None, 'ArtistRole')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5067, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Artist._Automaton = _BuildAutomaton_60()




ArtistDelegatedUsageRights._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UseType'), UseType, scope=ArtistDelegatedUsageRights, documentation='A Composite containing details of the use for which rights are delegated.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5084, 9)))

ArtistDelegatedUsageRights._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserInterfaceType'), UserInterfaceType, scope=ArtistDelegatedUsageRights, documentation='A Composite containing details of a physical interface by which a Consumer uses a Service or Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5089, 9)))

ArtistDelegatedUsageRights._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PeriodOfRightsDelegation'), Period, scope=ArtistDelegatedUsageRights, documentation='A Composite containing details about a Period of Time for which the delegation of usage rights applies. Periods are typically described by at least a StartDate or EndDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5097, 9)))

ArtistDelegatedUsageRights._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryOfRightsDelegation'), _ImportedBinding__avs.TerritoryCode, scope=ArtistDelegatedUsageRights, documentation='A Territory for which the delegation of usage rights applies (represented by an ISO 3166-1 TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5102, 9)))

ArtistDelegatedUsageRights._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MembershipType'), _ImportedBinding__avs.MembershipType, scope=ArtistDelegatedUsageRights, documentation='A Type of membership of the Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5109, 9)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5089, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ArtistDelegatedUsageRights._UseForTag(pyxb.namespace.ExpandedName(None, 'UseType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5084, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ArtistDelegatedUsageRights._UseForTag(pyxb.namespace.ExpandedName(None, 'UserInterfaceType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5089, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ArtistDelegatedUsageRights._UseForTag(pyxb.namespace.ExpandedName(None, 'PeriodOfRightsDelegation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5097, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ArtistDelegatedUsageRights._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryOfRightsDelegation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5102, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ArtistDelegatedUsageRights._UseForTag(pyxb.namespace.ExpandedName(None, 'MembershipType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5109, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ArtistDelegatedUsageRights._Automaton = _BuildAutomaton_61()




AvRating._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RatingText'), pyxb.binding.datatypes.string, scope=AvRating, documentation='The text of the AvRating.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5178, 9)))

AvRating._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RatingAgency'), RatingAgency, scope=AvRating, documentation='A Composite containing details of an Organization that issues the AvRating.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5183, 9)))

AvRating._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RatingSchemeDescription'), Description, scope=AvRating, documentation='A Composite containing details of a Description of the RatingText.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5188, 9)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5188, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AvRating._UseForTag(pyxb.namespace.ExpandedName(None, 'RatingText')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5178, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AvRating._UseForTag(pyxb.namespace.ExpandedName(None, 'RatingAgency')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5183, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AvRating._UseForTag(pyxb.namespace.ExpandedName(None, 'RatingSchemeDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5188, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AvRating._Automaton = _BuildAutomaton_62()




CLine._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Year'), pyxb.binding.datatypes.gYear, scope=CLine, documentation='The Year of the CLine.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5217, 9)))

CLine._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLineCompany'), pyxb.binding.datatypes.string, scope=CLine, documentation='The Name of the company releasing the Creation. This may be an owner or a licensee of the Creation.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5222, 9)))

CLine._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLineText'), pyxb.binding.datatypes.string, scope=CLine, documentation='The text of the CLine.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5227, 9)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5217, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5222, 9))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CLine._UseForTag(pyxb.namespace.ExpandedName(None, 'Year')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5217, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CLine._UseForTag(pyxb.namespace.ExpandedName(None, 'CLineCompany')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5222, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CLine._UseForTag(pyxb.namespace.ExpandedName(None, 'CLineText')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5227, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CLine._Automaton = _BuildAutomaton_63()




CollectionCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.integer, scope=CollectionCollectionReference, documentation='The number indicating the order of the Collection in a group of Collections within a Medley, SoundRecording or other Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5277, 9)))

CollectionCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReference'), STD_ANON_27, scope=CollectionCollectionReference, documentation='A Reference for a Collection (specific to this Message). This is a LocalCollectionAnchorReference starting with the letter X. The referenced Collection has to be of CollectionType Series, Season or Episode.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5282, 9)))

CollectionCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartTime'), pyxb.binding.datatypes.duration, scope=CollectionCollectionReference, documentation='The start time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5292, 9)))

CollectionCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=CollectionCollectionReference, documentation='The Duration of the use of the Creation that is referenced in the CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5297, 9)))

CollectionCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EndTime'), pyxb.binding.datatypes.duration, scope=CollectionCollectionReference, documentation='The end time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5302, 9)))

CollectionCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'InclusionDate'), pyxb.binding.datatypes.dateTime, scope=CollectionCollectionReference, documentation='A Date on which the Collection or Resource was included in the parent Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5307, 9)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5277, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5292, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5297, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5302, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5307, 9))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CollectionCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5277, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5282, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CollectionCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'StartTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5292, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CollectionCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5297, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CollectionCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'EndTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5302, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CollectionCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'InclusionDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5307, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionCollectionReference._Automaton = _BuildAutomaton_64()




CollectionCollectionReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfCollections'), pyxb.binding.datatypes.integer, scope=CollectionCollectionReferenceList, documentation='The number of referenced Collections (typically Chapters).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5319, 9)))

CollectionCollectionReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReference'), CollectionCollectionReference, scope=CollectionCollectionReferenceList, documentation='A Composite containing a CollectionCollectionReference for a Collection (specific to this Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5324, 9)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5319, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CollectionCollectionReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfCollections')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5319, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionCollectionReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5324, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionCollectionReferenceList._Automaton = _BuildAutomaton_65()




CollectionId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GRid'), pyxb.binding.datatypes.string, scope=CollectionId, documentation="The GRid identifying the Collection. This is the preferred Element and is mandatory if a GRid is available. A GRid comprises four parts: the xs:string 'A1', followed by five alphanumeric characters, ten alphanumeric characters and and one alphanumeric character.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5338, 9)))

CollectionId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISRC'), pyxb.binding.datatypes.string, scope=CollectionId, documentation='The ISRC (International Standard Recording Code as defined in  ISO 3901) for the Collection. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5343, 9)))

CollectionId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISAN'), pyxb.binding.datatypes.string, scope=CollectionId, documentation='The ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the Collection. An ISAN comprises four blocks of four hexadecimal charaters followed by a check character.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5348, 9)))

CollectionId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VISAN'), pyxb.binding.datatypes.string, scope=CollectionId, documentation='The V-ISAN (Version Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the Collection. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5353, 9)))

CollectionId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ICPN'), ICPN, scope=CollectionId, documentation='A Composite containing details of the ICPN used as proxy for identification of the Collection. Only applicable when the Collection is an abstraction of a complete PhysicalProduct. An ICPN comprises 12 or 13 digits, depending whether it is an EAN (13) or a UPC (12).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5358, 9)))

CollectionId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogNumber'), CatalogNumber, scope=CollectionId, documentation='A Composite containing details of the CatalogNumber of the Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5363, 9)))

CollectionId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=CollectionId, documentation='A Composite containing details of a ProprietaryIdentifier of the Collection (usually one per society involved in the messaging).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5368, 9)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5338, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5343, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5348, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5353, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5358, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5363, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5368, 9))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CollectionId._UseForTag(pyxb.namespace.ExpandedName(None, 'GRid')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5338, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CollectionId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISRC')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5343, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CollectionId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISAN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5348, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CollectionId._UseForTag(pyxb.namespace.ExpandedName(None, 'VISAN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5353, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CollectionId._UseForTag(pyxb.namespace.ExpandedName(None, 'ICPN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5358, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CollectionId._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5363, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CollectionId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5368, 9))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CollectionId._Automaton = _BuildAutomaton_66()




ContactId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EmailAddress'), pyxb.binding.datatypes.string, scope=ContactId, documentation='An EmailAddress of the Party.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5454, 9)))

ContactId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PhoneNumber'), pyxb.binding.datatypes.string, scope=ContactId, documentation='A PhoneNumber of the Party.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5462, 9)))

ContactId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FaxNumber'), pyxb.binding.datatypes.string, scope=ContactId, documentation='A FaxNumber of the Party.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5470, 9)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5454, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5462, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5470, 9))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ContactId._UseForTag(pyxb.namespace.ExpandedName(None, 'EmailAddress')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5454, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ContactId._UseForTag(pyxb.namespace.ExpandedName(None, 'PhoneNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5462, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ContactId._UseForTag(pyxb.namespace.ExpandedName(None, 'FaxNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5470, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ContactId._Automaton = _BuildAutomaton_67()




CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISWC'), pyxb.binding.datatypes.string, scope=CreationId, documentation="The ISWC (International Standard Musical Work Code defined in ISO 15707) identifying the MusicalWork. An ISWC comprises three parts: the letter 'T', followed by nine digits and then one check digit.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5518, 9)))

CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OpusNumber'), pyxb.binding.datatypes.string, scope=CreationId, documentation='The MusicalWorkId identifying the MusicalWork within the catalog of its Composer (typically of classical music) as an opus number.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5523, 9)))

CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ComposerCatalogNumber'), pyxb.binding.datatypes.string, scope=CreationId, documentation="A MusicalWorkId identifying a MusicalWork within the catalog of its Composer (typically of classical music) according to a standardized numbering (e.g. 'K' numbers for Koechel's catalog of Mozart).", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5528, 9)))

CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISRC'), pyxb.binding.datatypes.string, scope=CreationId, documentation='The ISRC (International Standard Recording Code as defined in  ISO 3901) for the Resource. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5536, 9)))

CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISMN'), pyxb.binding.datatypes.string, scope=CreationId, documentation="The ISMN (International Standard Music Number defined in ISO 10957) for the Resource. An ISMN is a thirteen-digit number. Pre-2008 ISMNs, which had 10 characters and are now deprecated, are converted by replacing the initial letter ('M') with '979-0'.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5541, 9)))

CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISAN'), pyxb.binding.datatypes.string, scope=CreationId, documentation='The ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the Resource. An ISAN comprises four blocks of four hexadecimal charaters followed by a check character.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5546, 9)))

CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VISAN'), pyxb.binding.datatypes.string, scope=CreationId, documentation='The V-ISAN (Version Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the Resource. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5551, 9)))

CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISBN'), pyxb.binding.datatypes.string, scope=CreationId, documentation="The ISBN (International Standard Book Number defined in ISO 2108) for the Resource. An ISBN is a 13-digit number. Pre-2007, ISBNs, which had 10-digits and are now deprecated, are converted by adding the prefix '978' and re-calculating the check character.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5556, 9)))

CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISSN'), pyxb.binding.datatypes.string, scope=CreationId, documentation='The ISSN (International Standard Serial Number defined in ISO 3297) for the Resource. An ISSN comprises two groups of four digits, separated by a hyphen and a control digit.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5561, 9)))

CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SICI'), pyxb.binding.datatypes.string, scope=CreationId, documentation='The SICI (Serial Item and Contribution Identifier defined in ANSI/NISO Z39.56-199)  for the Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5566, 9)))

CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogNumber'), CatalogNumber, scope=CreationId, documentation='A Composite containing details of the CatalogNumber of the Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5571, 9)))

CreationId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=CreationId, documentation='A Composite containing details of a ProprietaryIdentifier of the Creation.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5576, 9)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5518, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5523, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5528, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5536, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5541, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5546, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5551, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5556, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5561, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5566, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5571, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5576, 9))
    counters.add(cc_11)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISWC')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5518, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'OpusNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5523, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'ComposerCatalogNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5528, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISRC')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5536, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISMN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5541, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISAN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5546, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'VISAN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5551, 9))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISBN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5556, 9))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISSN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5561, 9))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'SICI')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5566, 9))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5571, 9))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CreationId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5576, 9))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CreationId._Automaton = _BuildAutomaton_68()




CueCreationReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueWorkReference'), STD_ANON_28, scope=CueCreationReference, documentation='A Reference for a Work (specific to this Message). This is a LocalMusicalWorkAnchorReference starting with the letter W.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5592, 12)))

CueCreationReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueResourceReference'), STD_ANON_29, scope=CueCreationReference, documentation='A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5602, 12)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CueCreationReference._UseForTag(pyxb.namespace.ExpandedName(None, 'CueWorkReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5592, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CueCreationReference._UseForTag(pyxb.namespace.ExpandedName(None, 'CueResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5602, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CueCreationReference._Automaton = _BuildAutomaton_69()




DSP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=DSP, documentation='A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5735, 12)))

DSP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), PartyName, scope=DSP, documentation='A Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5741, 15)))

DSP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TradingName'), Name, scope=DSP, documentation='A Composite containing a TradingName of the DSP.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5756, 9)))

DSP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'URL'), pyxb.binding.datatypes.string, scope=DSP, documentation="A URL for the DSP's web site.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5761, 9)))

DSP._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=DSP, documentation='The Territory from which the DSP operates (represented by an ISO 3166-1 TerritoryCode). This Territory may differ from the one in which SalesTransactions occur.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5766, 9)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5746, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5756, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5761, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5766, 9))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DSP._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5735, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DSP._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5741, 15))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DSP._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5746, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DSP._UseForTag(pyxb.namespace.ExpandedName(None, 'TradingName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5756, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DSP._UseForTag(pyxb.namespace.ExpandedName(None, 'URL')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5761, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DSP._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5766, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DSP._Automaton = _BuildAutomaton_70()




ExternalResourceLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'URL'), pyxb.binding.datatypes.string, scope=ExternalResourceLink, documentation='A URL of the linked external Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5946, 9)))

ExternalResourceLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ValidityPeriod'), Period, scope=ExternalResourceLink, documentation='A Composite containing details about the Period of Time during which the ExternalResourceLink is active.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5951, 9)))

ExternalResourceLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalLink'), pyxb.binding.datatypes.string, scope=ExternalResourceLink, documentation='The Identifier which provides a communication link to the related external Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5956, 9)))

ExternalResourceLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternallyLinkedResourceType'), ExternallyLinkedResourceType, scope=ExternalResourceLink, documentation='A Composite containing details of the Type of a Resource pointed to by the ExternalResourceLink.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5961, 9)))

ExternalResourceLink._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileFormat'), pyxb.binding.datatypes.string, scope=ExternalResourceLink, documentation='The FileFormat of the external Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5969, 9)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5951, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5956, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5961, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5969, 9))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ExternalResourceLink._UseForTag(pyxb.namespace.ExpandedName(None, 'URL')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5946, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ExternalResourceLink._UseForTag(pyxb.namespace.ExpandedName(None, 'ValidityPeriod')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5951, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ExternalResourceLink._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalLink')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5956, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ExternalResourceLink._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternallyLinkedResourceType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5961, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ExternalResourceLink._UseForTag(pyxb.namespace.ExpandedName(None, 'FileFormat')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5969, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ExternalResourceLink._Automaton = _BuildAutomaton_71()




File._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileName'), pyxb.binding.datatypes.string, scope=File, documentation='A Name of the File.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6002, 15)))

File._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FilePath'), pyxb.binding.datatypes.string, scope=File, documentation='A location of the File.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6007, 15)))

File._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'URL'), pyxb.binding.datatypes.string, scope=File, documentation='A URL of the File.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6013, 12)))

File._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HashSum'), HashSum, scope=File, documentation='A Composite containing a HashSum of the File and information about the algorithm with which it has been generated.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6019, 9)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6007, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6019, 9))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(File._UseForTag(pyxb.namespace.ExpandedName(None, 'FileName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6002, 15))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(File._UseForTag(pyxb.namespace.ExpandedName(None, 'FilePath')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6007, 15))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(File._UseForTag(pyxb.namespace.ExpandedName(None, 'URL')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6013, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(File._UseForTag(pyxb.namespace.ExpandedName(None, 'HashSum')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6019, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
File._Automaton = _BuildAutomaton_72()




Fingerprint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), pyxb.binding.datatypes.string, scope=Fingerprint, documentation='The value of the Fingerprint.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6031, 9)))

Fingerprint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FingerprintAlgorithmType'), FingerprintAlgorithmType, scope=Fingerprint, documentation='A Composite containing details of the Type of FingerprintAlgorithm governing the Fingerprint.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6036, 9)))

Fingerprint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FingerprintAlgorithmVersion'), pyxb.binding.datatypes.string, scope=Fingerprint, documentation='The Identifier of the Version of the FingerprintAlgorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6041, 9)))

Fingerprint._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FingerprintAlgorithmParameter'), pyxb.binding.datatypes.string, scope=Fingerprint, documentation='A parameter of the FingerprintAlgorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6046, 9)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6041, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6046, 9))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Fingerprint._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6031, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Fingerprint._UseForTag(pyxb.namespace.ExpandedName(None, 'FingerprintAlgorithmType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6036, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Fingerprint._UseForTag(pyxb.namespace.ExpandedName(None, 'FingerprintAlgorithmVersion')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6041, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Fingerprint._UseForTag(pyxb.namespace.ExpandedName(None, 'FingerprintAlgorithmParameter')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6046, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Fingerprint._Automaton = _BuildAutomaton_73()




FulfillmentDate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), pyxb.binding.datatypes.date, scope=FulfillmentDate, documentation='A Date after which an end user can receive the Resource (in ISO 8601:2004 format: YYYY-MM-DD). If no FulfillmentDate is provided the FulfillmentDate is the StartDate of the respective Deal. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6091, 9)))

FulfillmentDate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReleaseReference'), STD_ANON_30, scope=FulfillmentDate, documentation='The Identifier (specific to the Message) of a Release for a Resource. This is a LocalReleaseAnchorReference starting with the letter R.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6096, 9)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6096, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(FulfillmentDate._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6091, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(FulfillmentDate._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReleaseReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6096, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
FulfillmentDate._Automaton = _BuildAutomaton_74()




Genre._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GenreText'), Description, scope=Genre, documentation='A Composite containing a Description of a genre or style (such as Musical, literary or audio-visual) with which a Creation is associated.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6113, 9)))

Genre._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SubGenre'), Description, scope=Genre, documentation='A Composite containing a Description of a secondary genre or style with which a Creation is associated.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6118, 9)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6118, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Genre._UseForTag(pyxb.namespace.ExpandedName(None, 'GenreText')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6113, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Genre._UseForTag(pyxb.namespace.ExpandedName(None, 'SubGenre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6118, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Genre._Automaton = _BuildAutomaton_75()




HashSum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HashSum'), pyxb.binding.datatypes.string, scope=HashSum, documentation='The value of the HashSum.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6154, 9)))

HashSum._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HashSumAlgorithmType'), HashSumAlgorithmType, scope=HashSum, documentation='A Composite containing details of the Type of HashSumAlgorithm governing the HashSum.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6159, 9)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HashSum._UseForTag(pyxb.namespace.ExpandedName(None, 'HashSum')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6154, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HashSum._UseForTag(pyxb.namespace.ExpandedName(None, 'HashSumAlgorithmType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6159, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HashSum._Automaton = _BuildAutomaton_76()




HostSoundCarrier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), ReleaseId, scope=HostSoundCarrier, documentation='A Composite containing details of ReleaseIds of the HostSoundCarrier. If available, a GRid has to be used. If the HostSoundCarrier contains only one SoundRecording, the ISRC of the SoundRecording may be used instead.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6190, 9)))

HostSoundCarrier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=HostSoundCarrier, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the HostSoundCarrier.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6198, 9)))

HostSoundCarrier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), Title, scope=HostSoundCarrier, documentation='A Composite containing details of a Title of the HostSoundCarrier.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6203, 9)))

HostSoundCarrier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), Artist, scope=HostSoundCarrier, documentation='A Composite containing details of the DisplayArtist for the HostSoundCarrier. The DisplayArtist may be described through Name, Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6211, 9)))

HostSoundCarrier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdministratingRecordCompany'), AdministratingRecordCompany, scope=HostSoundCarrier, documentation='A Composite containing details of the AdministratingRecordCompany for the Rights in the HostSoundCarrier.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6219, 9)))

HostSoundCarrier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TrackNumber'), pyxb.binding.datatypes.string, scope=HostSoundCarrier, documentation='The TrackNumber of the SoundRecording within the HostSoundCarrier.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6227, 9)))

HostSoundCarrier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VolumeNumberInSet'), pyxb.binding.datatypes.string, scope=HostSoundCarrier, documentation="The SequenceNumber within the Set of the volume containing the SoundRecording, where the HostSoundCarrier is a Set (such as a 'box set' of CDs).", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6232, 9)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6190, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6198, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6203, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6211, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6219, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6227, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6232, 9))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(HostSoundCarrier._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6190, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(HostSoundCarrier._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6198, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(HostSoundCarrier._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6203, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(HostSoundCarrier._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6211, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(HostSoundCarrier._UseForTag(pyxb.namespace.ExpandedName(None, 'AdministratingRecordCompany')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6219, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(HostSoundCarrier._UseForTag(pyxb.namespace.ExpandedName(None, 'TrackNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6227, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(HostSoundCarrier._UseForTag(pyxb.namespace.ExpandedName(None, 'VolumeNumberInSet')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6232, 9))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
HostSoundCarrier._Automaton = _BuildAutomaton_77()




ImageId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=ImageId, documentation='A Composite containing details of a ProprietaryIdentifier of the Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6282, 9)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ImageId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6282, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ImageId._Automaton = _BuildAutomaton_78()




IndirectResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=IndirectResourceContributor, documentation='A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6319, 12)))

IndirectResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), PartyName, scope=IndirectResourceContributor, documentation='A Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6325, 15)))

IndirectResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributorRole'), MusicalWorkContributorRole, scope=IndirectResourceContributor, documentation='A Composite containing details of a role played by the indirect Contributor.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6340, 9)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6330, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6340, 9))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IndirectResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6319, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(IndirectResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6325, 15))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(IndirectResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6330, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(IndirectResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributorRole')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6340, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
IndirectResourceContributor._Automaton = _BuildAutomaton_79()




Membership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Organization'), PartyDescriptor, scope=Membership, documentation='A Composite containing details of the collective rights management organization.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6412, 9)))

Membership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MembershipType'), _ImportedBinding__avs.MembershipType, scope=Membership, documentation='A Type of membership.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6417, 9)))

Membership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartDate'), pyxb.binding.datatypes.date, scope=Membership, documentation='The StartDate of the membership.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6422, 9)))

Membership._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EndDate'), pyxb.binding.datatypes.date, scope=Membership, documentation='The EndDate of the membership.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6427, 9)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6422, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6427, 9))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Membership._UseForTag(pyxb.namespace.ExpandedName(None, 'Organization')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6412, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Membership._UseForTag(pyxb.namespace.ExpandedName(None, 'MembershipType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6417, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Membership._UseForTag(pyxb.namespace.ExpandedName(None, 'StartDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6422, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Membership._UseForTag(pyxb.namespace.ExpandedName(None, 'EndDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6427, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Membership._Automaton = _BuildAutomaton_80()




MessageAuditTrail._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageAuditTrailEvent'), MessageAuditTrailEvent, scope=MessageAuditTrail, documentation='A Composite containing details of a Party handling the Message and the Time at which the handling took place.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6439, 9)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MessageAuditTrail._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageAuditTrailEvent')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6439, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MessageAuditTrail._Automaton = _BuildAutomaton_81()




MessageAuditTrailEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessagingPartyDescriptor'), MessagingParty, scope=MessageAuditTrailEvent, documentation='A Composite containing details of a MessagingParty.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6458, 9)))

MessageAuditTrailEvent._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DateTime'), pyxb.binding.datatypes.dateTime, scope=MessageAuditTrailEvent, documentation='The DateTime at which the Message was handled by the MessagingParty (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6463, 9)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MessageAuditTrailEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'MessagingPartyDescriptor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6458, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MessageAuditTrailEvent._UseForTag(pyxb.namespace.ExpandedName(None, 'DateTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6463, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MessageAuditTrailEvent._Automaton = _BuildAutomaton_82()




MessageHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageThreadId'), pyxb.binding.datatypes.string, scope=MessageHeader, documentation="A xs:string used to uniquely identify the thread of Messages of which the current Message is a part. One example of such a 'thread' is the chain of NewReleaseMessages being sent from ReleaseCreator to wholesale ReleaseDistributor 1 to retail DSP when communicating information about the same Release(s). A common MessageThreadId will allow all these messages to be tied together.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6475, 9)))

MessageHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageId'), pyxb.binding.datatypes.string, scope=MessageHeader, documentation='A xs:string used to uniquely identify the current Message.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6480, 9)))

MessageHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageFileName'), pyxb.binding.datatypes.string, scope=MessageHeader, documentation='The FileName, possibly including the FilePath, of the XML File containing the current Message.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6485, 9)))

MessageHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageSender'), MessagingParty, scope=MessageHeader, documentation='A Composite containing details of the MessageSender.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6490, 9)))

MessageHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SentOnBehalfOf'), MessagingParty, scope=MessageHeader, documentation='A Composite containing details of the Party on whose behalf the Message is sent.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6495, 9)))

MessageHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageRecipient'), MessagingParty, scope=MessageHeader, documentation='A Composite containing details of the MessageRecipient.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6500, 9)))

MessageHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageCreatedDateTime'), pyxb.binding.datatypes.dateTime, scope=MessageHeader, documentation='The DateTime on which the Message was created (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6505, 9)))

MessageHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageAuditTrail'), MessageAuditTrail, scope=MessageHeader, documentation='A Composite containing information about Parties in between the original MessageSender and ultimate MessageRecipient.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6510, 9)))

MessageHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Comment'), Comment, scope=MessageHeader, documentation='A Composite containing a human-readable Comment about the Message.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6515, 9)))

MessageHeader._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageControlType'), _ImportedBinding__avs.MessageControlType, scope=MessageHeader, documentation='The indicator used to distinguish a live Message from a test Message.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6520, 9)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6485, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6495, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6510, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6515, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6520, 9))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MessageHeader._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageThreadId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6475, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MessageHeader._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6480, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MessageHeader._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageFileName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6485, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MessageHeader._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageSender')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6490, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MessageHeader._UseForTag(pyxb.namespace.ExpandedName(None, 'SentOnBehalfOf')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6495, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MessageHeader._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageRecipient')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6500, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MessageHeader._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageCreatedDateTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6505, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MessageHeader._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageAuditTrail')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6510, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MessageHeader._UseForTag(pyxb.namespace.ExpandedName(None, 'Comment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6515, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MessageHeader._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageControlType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6520, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MessageHeader._Automaton = _BuildAutomaton_83()




MessagingParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=MessagingParty, documentation='A Composite containing details of the PartyId for the Party handling the Message. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6539, 9)))

MessagingParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), PartyName, scope=MessagingParty, documentation='A Composite containing details of the PartyNames for the Party handling the Message.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6544, 9)))

MessagingParty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TradingName'), Name, scope=MessagingParty, documentation='A Composite containing a TradingName for the Party handling the Message.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6549, 9)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6544, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6549, 9))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MessagingParty._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6539, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MessagingParty._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6544, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MessagingParty._UseForTag(pyxb.namespace.ExpandedName(None, 'TradingName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6549, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MessagingParty._Automaton = _BuildAutomaton_84()




MidiId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=MidiId, documentation='A Composite containing details of a ProprietaryIdentifier of the Midi.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6566, 9)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MidiId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6566, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MidiId._Automaton = _BuildAutomaton_85()




MusicalWork._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MusicalWorkId'), MusicalWorkId, scope=MusicalWork, documentation='A Composite containing details of a MusicalWorkId of the MusicalWork.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6602, 9)))

MusicalWork._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MusicalWorkReference'), STD_ANON_31, scope=MusicalWork, documentation='The Identifier (specific to the Message) of the MusicalWork within the Release which contains it. This is a LocalMusicalWorkAnchor starting with the letter W.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6607, 9)))

MusicalWork._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), ReferenceTitle, scope=MusicalWork, documentation='A Composite containing details of a ReferenceTitle of the MusicalWork.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6617, 9)))

MusicalWork._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=MusicalWork, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6624, 9)))

MusicalWork._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MusicalWorkContributor'), MusicalWorkContributor, scope=MusicalWork, documentation='A Composite containing details a MusicalWorkContributor to the MusicalWork.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6629, 9)))

MusicalWork._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MusicalWorkType'), MusicalWorkType, scope=MusicalWork, documentation='A Composite containing details of the Type of the MusicalWork.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6636, 9)))

MusicalWork._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightShare'), RightShare, scope=MusicalWork, documentation='A Composite containing details of a RightShare for the MusicalWork.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6644, 9)))

MusicalWork._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MusicalWorkDetailsByTerritory'), MusicalWorkDetailsByTerritory, scope=MusicalWork, documentation='A Composite containing details of Descriptors and other attributes of the MusicalWork which may vary according to Territory of release. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6652, 9)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6624, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6636, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6644, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6652, 9))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MusicalWork._UseForTag(pyxb.namespace.ExpandedName(None, 'MusicalWorkId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6602, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MusicalWork._UseForTag(pyxb.namespace.ExpandedName(None, 'MusicalWorkReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6607, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MusicalWork._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6617, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MusicalWork._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6624, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MusicalWork._UseForTag(pyxb.namespace.ExpandedName(None, 'MusicalWorkContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6629, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MusicalWork._UseForTag(pyxb.namespace.ExpandedName(None, 'MusicalWorkType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6636, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MusicalWork._UseForTag(pyxb.namespace.ExpandedName(None, 'RightShare')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6644, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MusicalWork._UseForTag(pyxb.namespace.ExpandedName(None, 'MusicalWorkDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6652, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MusicalWork._Automaton = _BuildAutomaton_86()




MusicalWorkContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=MusicalWorkContributor, documentation='A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6678, 12)))

MusicalWorkContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), PartyName, scope=MusicalWorkContributor, documentation='A Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6684, 15)))

MusicalWorkContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MusicalWorkContributorRole'), MusicalWorkContributorRole, scope=MusicalWorkContributor, documentation="A Composite containing details of a role played by the Contributor in relation to the MusicalWork. Note: This can be used in a DdexMessage in relation to any Work, Performance or Fixation any of which may form the whole or part of the Resource itself. Example: if an 'AssociatedPerformer' is shown as a Contributor to a MusicalWork it refers to a performer of a Resource (e.g. a SoundRecording) expressing the MusicalWork.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6699, 9)))

MusicalWorkContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SocietyAffiliation'), SocietyAffiliation, scope=MusicalWorkContributor, documentation='A Composite containing details of a society affiliation for the MusicalWorkContributor.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6707, 9)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6689, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6699, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6707, 9))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MusicalWorkContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6678, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MusicalWorkContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6684, 15))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MusicalWorkContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6689, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MusicalWorkContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'MusicalWorkContributorRole')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6699, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MusicalWorkContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'SocietyAffiliation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6707, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MusicalWorkContributor._Automaton = _BuildAutomaton_87()




MusicalWorkDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=MusicalWorkDetailsByTerritory, documentation='A Territory to which the MusicalWork details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6747, 12)))

MusicalWorkDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=MusicalWorkDetailsByTerritory, documentation='A Territory to which the MusicalWork details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6752, 12)))

MusicalWorkDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MusicalWorkContributor'), MusicalWorkContributor, scope=MusicalWorkDetailsByTerritory, documentation='A Composite containing details a MusicalWorkContributor to the MusicalWork.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6760, 9)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MusicalWorkDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6747, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MusicalWorkDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6752, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MusicalWorkDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'MusicalWorkContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6760, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MusicalWorkDetailsByTerritory._Automaton = _BuildAutomaton_88()




MusicalWorkId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISWC'), pyxb.binding.datatypes.string, scope=MusicalWorkId, documentation="The ISWC (International Standard Musical Work Code defined in ISO 15707) identifying the MusicalWork. An ISWC comprises three parts: the letter 'T', followed by nine digits and then one check digit.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6779, 9)))

MusicalWorkId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OpusNumber'), pyxb.binding.datatypes.string, scope=MusicalWorkId, documentation='The MusicalWorkId identifying the MusicalWork within the catalog of its Composer (typically of classical music) as an opus number.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6784, 9)))

MusicalWorkId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ComposerCatalogNumber'), pyxb.binding.datatypes.string, scope=MusicalWorkId, documentation="A MusicalWorkId identifying a MusicalWork within the catalog of its Composer (typically of classical music) according to a standardized numbering (e.g. 'K' numbers for Koechel's catalog of Mozart).", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6789, 9)))

MusicalWorkId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=MusicalWorkId, documentation='A Composite containing details of a ProprietaryIdentifier of the MusicalWork.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6797, 9)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6779, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6784, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6789, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6797, 9))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MusicalWorkId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISWC')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6779, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MusicalWorkId._UseForTag(pyxb.namespace.ExpandedName(None, 'OpusNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6784, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MusicalWorkId._UseForTag(pyxb.namespace.ExpandedName(None, 'ComposerCatalogNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6789, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MusicalWorkId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6797, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MusicalWorkId._Automaton = _BuildAutomaton_89()




PartyDescriptor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=PartyDescriptor, documentation='A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6925, 9)))

PartyDescriptor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), PartyName, scope=PartyDescriptor, documentation='A Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6931, 12)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6936, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PartyDescriptor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6925, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PartyDescriptor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6931, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PartyDescriptor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6936, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PartyDescriptor._Automaton = _BuildAutomaton_90()




PartyName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FullName'), Name, scope=PartyName, documentation='A Composite containing the complete Name of the Party, in its normal form of presentation (e.g. John H. Smith, Acme Music Inc, A Composite containing the Beatles).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6976, 9)))

PartyName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FullNameAsciiTranscribed'), pyxb.binding.datatypes.string, scope=PartyName, documentation='The FullName transcribed using 7-bit ASCII code.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6981, 9)))

PartyName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FullNameIndexed'), Name, scope=PartyName, documentation='A Composite containing the complete Name of the Party in the form in which it normally appears in an alphabetic index, with the KeyName first (e.g. Smith, John H.; Beatles, A Composite containing the).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6986, 9)))

PartyName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NamesBeforeKeyName'), Name, scope=PartyName, documentation="A Composite containing the Name(s) preceding the KeyName in the FullName (and that is placed after it in a FullNameIndexed). Examples: 'George' in 'George Michael'; 'John Fitzgerald' in 'John Fitzgerald Kennedy'. Not all PartyNames have a NamesBeforeKeyName (e.g. Madonna, EMI Music Inc).", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6991, 9)))

PartyName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'KeyName'), Name, scope=PartyName, documentation="A Composite containing the Part of a Name of the Party normally used to index an entry in an alphabetical list, such as 'Smith' (in John Smith) or 'Garcia Marquez' or 'Madonna' or 'Francis de Sales' (in Saint Francis de Sales). For persons, this normally corresponds to the 'family name' or names, which in Western name forms usually comes as a surname at the end of a FullName, and in Asian name forms often at the beginning of a FullName. ", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6996, 9)))

PartyName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NamesAfterKeyName'), Name, scope=PartyName, documentation="A Composite containing the Name(s) following the KeyName. Example:'Ibrahim' (in Anwar Ibrahim). This is common, e.g., in many Asian personal name forms where a FullName begins with the KeyName, which is followed by other names.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7001, 9)))

PartyName._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AbbreviatedName'), Name, scope=PartyName, documentation='A Composite containing a short version of the PartyName (e.g. for use on devices with a small display).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7006, 9)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6981, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6986, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6991, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6996, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7001, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7006, 9))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PartyName._UseForTag(pyxb.namespace.ExpandedName(None, 'FullName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6976, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PartyName._UseForTag(pyxb.namespace.ExpandedName(None, 'FullNameAsciiTranscribed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6981, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PartyName._UseForTag(pyxb.namespace.ExpandedName(None, 'FullNameIndexed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6986, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PartyName._UseForTag(pyxb.namespace.ExpandedName(None, 'NamesBeforeKeyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6991, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PartyName._UseForTag(pyxb.namespace.ExpandedName(None, 'KeyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6996, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PartyName._UseForTag(pyxb.namespace.ExpandedName(None, 'NamesAfterKeyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7001, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PartyName._UseForTag(pyxb.namespace.ExpandedName(None, 'AbbreviatedName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7006, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PartyName._Automaton = _BuildAutomaton_91()




Period._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartDate'), EventDate, scope=Period, documentation='A Composite containing details of the Date and Place of an Event that marks the beginning of the Period (in ISO 8601:2004 format: YYYY-MM-DD). The StartDate must be earlier than the EndDate if both are provided.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7024, 12)))

Period._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EndDate'), EventDate, scope=Period, documentation='A Composite containing details of the Date and Place of an Event that marks the end of the Period (in ISO 8601:2004 format: YYYY-MM-DD). The EndDate must not be earlier than the StartDate if both are provided.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7029, 12)))

Period._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartDateTime'), EventDateTime, scope=Period, documentation='A Composite containing details of the DateTime and Place of an Event that marks the beginning of the Period (in ISO 8601:2004 format: YYYY-DD-MMThh:mm:ss). The StartDateTime must be earlier than the EndDateTime if both are provided.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7036, 12)))

Period._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EndDateTime'), EventDateTime, scope=Period, documentation='A Composite containing details of the DateTime and Place of an Event that marks the end of the Period (in ISO 8601:2004 format: YYYY-DD-MMThh:mm:ss). The EndDateTime must not be earlier than the StartDateTime if both are provided.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7041, 12)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7024, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7029, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7036, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7041, 12))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, 'StartDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7024, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, 'EndDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7029, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, 'StartDateTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7036, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Period._UseForTag(pyxb.namespace.ExpandedName(None, 'EndDateTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7041, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Period._Automaton = _BuildAutomaton_92()




ReferenceTitle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TitleText'), TitleText, scope=ReferenceTitle, documentation='A Composite containing the text of the ReferenceTitle.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7195, 9)))

ReferenceTitle._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SubTitle'), SubTitle, scope=ReferenceTitle, documentation='A Composite containing details of a SubTitle of the ReferenceTitle, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets (where the SubTitle is called Version Title).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7200, 9)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7200, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReferenceTitle._UseForTag(pyxb.namespace.ExpandedName(None, 'TitleText')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7195, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReferenceTitle._UseForTag(pyxb.namespace.ExpandedName(None, 'SubTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7200, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReferenceTitle._Automaton = _BuildAutomaton_93()




RelatedRelease._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), ReleaseId, scope=RelatedRelease, documentation='A Composite containing details of ReleaseIds. If available, a GRid shall always to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead. More than one of these identifiers may be provided.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7217, 9)))

RelatedRelease._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), ReferenceTitle, scope=RelatedRelease, documentation='A Composite containing details of the ReferenceTitle of the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7222, 9)))

RelatedRelease._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseSummaryDetailsByTerritory'), ReleaseSummaryDetailsByTerritory, scope=RelatedRelease, documentation='A Composite containing summary details of Descriptors and other attributes of the Release which may vary according to Territory of Release. Territory of Release may be the world.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7227, 9)))

RelatedRelease._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=RelatedRelease, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7235, 9)))

RelatedRelease._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseRelationshipType'), ReleaseRelationshipType, scope=RelatedRelease, documentation='A Composite containing details of the Type of the relationship between the two Releases.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7240, 9)))

RelatedRelease._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDate'), EventDate, scope=RelatedRelease, documentation='A Composite containing details of the Date and Place of the Event in which the related Release was or will be first made available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7245, 9)))

RelatedRelease._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate'), EventDate, scope=RelatedRelease, documentation='A Composite containing details of the Date and Place of the Event in which the collection of tracks for the Release (e.g. the equivalent physical album on vinyl) was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7250, 9)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7222, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7227, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7235, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7245, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7250, 9))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RelatedRelease._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7217, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RelatedRelease._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7222, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RelatedRelease._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseSummaryDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7227, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RelatedRelease._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7235, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RelatedRelease._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseRelationshipType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7240, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(RelatedRelease._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7245, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(RelatedRelease._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7250, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RelatedRelease._Automaton = _BuildAutomaton_94()




ReleaseCollectionReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfCollections'), pyxb.binding.datatypes.integer, scope=ReleaseCollectionReferenceList, documentation='The number of referenced Collections (typically Chapters).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7281, 9)))

ReleaseCollectionReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseCollectionReference'), ReleaseCollectionReference, scope=ReleaseCollectionReferenceList, documentation='A Composite containing a ReleaseCollectionReference for a Collection (specific to this Message). The referenced Collection has to be of CollectionType Series, Season or Episode.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7286, 9)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7281, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReleaseCollectionReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfCollections')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7281, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReleaseCollectionReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseCollectionReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7286, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReleaseCollectionReferenceList._Automaton = _BuildAutomaton_95()




ReleaseId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GRid'), pyxb.binding.datatypes.string, scope=ReleaseId, documentation="The GRid identifying the Release. This is the preferred Element and is mandatory if a GRid is available. A GRid comprises four parts: the xs:string 'A1', followed by five alphanumeric characters, ten alphanumeric characters and and one alphanumeric character.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7300, 9)))

ReleaseId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISRC'), pyxb.binding.datatypes.string, scope=ReleaseId, documentation='The ISRC (International Standard Recording Code as defined in  ISO 3901) used as proxy for identification of the Release. Only applicable when the Release only contains one SoundRecording or one MusicalWorkVideo. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7305, 9)))

ReleaseId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ICPN'), ICPN, scope=ReleaseId, documentation='A Composite containing details of the ICPN used as proxy for identification of the Release. Only applicable when the Release is an abstraction of a complete PhysicalProduct. An ICPN comprises 12 or 13 digits, depending whether it is an EAN (13) or a UPC (12).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7310, 9)))

ReleaseId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogNumber'), CatalogNumber, scope=ReleaseId, documentation='A Composite containing details of the CatalogNumber of the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7315, 9)))

ReleaseId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=ReleaseId, documentation='A Composite containing details of a ProprietaryIdentifier of the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7320, 9)))

def _BuildAutomaton_96 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_96
    del _BuildAutomaton_96
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7300, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7305, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7310, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7315, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7320, 9))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseId._UseForTag(pyxb.namespace.ExpandedName(None, 'GRid')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7300, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISRC')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7305, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseId._UseForTag(pyxb.namespace.ExpandedName(None, 'ICPN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7310, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseId._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7315, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7320, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReleaseId._Automaton = _BuildAutomaton_96()




ReleaseResourceReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReference'), ReleaseResourceReference, scope=ReleaseResourceReferenceList, documentation='A Composite containing a Reference for a Resource (specific to this Message). The LocalAnchorReference in this Composite is a xs:string starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7373, 9)))

def _BuildAutomaton_97 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_97
    del _BuildAutomaton_97
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReleaseResourceReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7373, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReleaseResourceReferenceList._Automaton = _BuildAutomaton_97()




ReleaseSummaryDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=ReleaseSummaryDetailsByTerritory, documentation='A Territory to which the ReleaseSummaryDetailsByTerritory apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7388, 12)))

ReleaseSummaryDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=ReleaseSummaryDetailsByTerritory, documentation='A Territory to which the ReleaseSummaryDetailsByTerritory do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7393, 12)))

ReleaseSummaryDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtistName'), Name, scope=ReleaseSummaryDetailsByTerritory, documentation='A Composite containing the Name to be used by a DSP when presenting Artist details of the Release to a Consumer.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7401, 9)))

ReleaseSummaryDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), LabelName, scope=ReleaseSummaryDetailsByTerritory, documentation='A Composite containing the Name of the Label for the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7409, 9)))

ReleaseSummaryDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), RightsAgreementId, scope=ReleaseSummaryDetailsByTerritory, documentation='A Composite containing details of Identifiers of a License, Claim, RightShare or contract for the MusicalWork(s) used in the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7417, 9)))

def _BuildAutomaton_98 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_98
    del _BuildAutomaton_98
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7401, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7409, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7417, 9))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReleaseSummaryDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7388, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReleaseSummaryDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7393, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseSummaryDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtistName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7401, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseSummaryDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7409, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseSummaryDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7417, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReleaseSummaryDetailsByTerritory._Automaton = _BuildAutomaton_98()




ResourceContainedResourceReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReference'), STD_ANON_32, scope=ResourceContainedResourceReference, documentation='A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7453, 9)))

ResourceContainedResourceReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DurationUsed'), pyxb.binding.datatypes.duration, scope=ResourceContainedResourceReference, documentation='The total Duration of the Resource that has been used in a specified context (this may be less than the total Duration of the Resource) (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7463, 9)))

ResourceContainedResourceReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartPoint'), pyxb.binding.datatypes.decimal, scope=ResourceContainedResourceReference, documentation='The start point of the preview given in seconds from the start of the referenced Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7468, 9)))

ResourceContainedResourceReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Purpose'), Purpose, scope=ResourceContainedResourceReference, documentation='A Composite containing details of the Purpose of the usage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7473, 9)))

def _BuildAutomaton_99 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_99
    del _BuildAutomaton_99
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7463, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7468, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7473, 9))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceContainedResourceReference._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7453, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContainedResourceReference._UseForTag(pyxb.namespace.ExpandedName(None, 'DurationUsed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7463, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContainedResourceReference._UseForTag(pyxb.namespace.ExpandedName(None, 'StartPoint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7468, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContainedResourceReference._UseForTag(pyxb.namespace.ExpandedName(None, 'Purpose')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7473, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResourceContainedResourceReference._Automaton = _BuildAutomaton_99()




ResourceContainedResourceReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReference'), ResourceContainedResourceReference, scope=ResourceContainedResourceReferenceList, documentation='A Composite containing details of a ResourceContainedResourceReference.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7485, 9)))

def _BuildAutomaton_100 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_100
    del _BuildAutomaton_100
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceContainedResourceReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7485, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResourceContainedResourceReferenceList._Automaton = _BuildAutomaton_100()




ResourceGroupContentItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.integer, scope=ResourceGroupContentItem, documentation='The number indicating the order of the ContentItem among all Resources within this ResourceGroup. This is analogous to the Track number on a SoundCarrier. Not all ResourceGroups necessarily have SequenceNumbers (it is most applicable to SoundRecordings and MusicalWorkVideos). The SequenceNumber is unique within its ResourceGroupLevelNumber.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7518, 9)))

ResourceGroupContentItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceSubNumber'), pyxb.binding.datatypes.integer, scope=ResourceGroupContentItem, documentation='The SequenceNumber within the SequenceNumber. Example: if a Track is subdivided into several numbered sections, these are numbered with a SequenceSubNumber. The SequenceSubNumber is unique within its SequenceNumber.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7523, 9)))

ResourceGroupContentItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceType'), ResourceType, scope=ResourceGroupContentItem, documentation='A Composite containing details of the Type of the ContentItem.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7528, 9)))

ResourceGroupContentItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReference'), ReleaseResourceReference, scope=ResourceGroupContentItem, documentation='A Composite containing a ReleaseResourceReference for the ContentItem (specific to this Message). The LocalAnchorReference in this Composite is a xs:string starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7536, 9)))

ResourceGroupContentItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LinkedReleaseResourceReference'), LinkedReleaseResourceReference, scope=ResourceGroupContentItem, documentation='A Composite containing details of a ReleaseResourceReference (specific to this Message) for a Resource which is linked to this ContentItem. Example: an Image, Text or NonMusicalWorkVideo associated with a SoundRecording. This LocalAnchorReference is a xs:string starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7541, 9)))

ResourceGroupContentItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroupContentItemReleaseReference'), STD_ANON_33, scope=ResourceGroupContentItem, documentation='The Identifier (specific to the Message) of a Release which has the same content as the ResourceGroupContentItem. This is a LocalReleaseAnchorReference starting with the letter R.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7550, 12)))

ResourceGroupContentItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), ReleaseId, scope=ResourceGroupContentItem, documentation='A Composite containing details of ReleaseIds of a Release which has the same content as the ResourceGroupContentItem. If available, a GRid has to be used. If the Release contains only one SoundRecording, the ISRC of the SoundRecording may be used instead. If the Release is an abstraction of a complete PhysicalProduct (such as a CD Album), the ICPN of the PhysicalProduct may be used instead.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7560, 12)))

ResourceGroupContentItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=ResourceGroupContentItem, documentation='The Duration of the ContentItem featured, if it is a SoundRecording or Video (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This Duration may be less than the normal Duration of the ContentItem, if only a part of it is included.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7566, 9)))

ResourceGroupContentItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), pyxb.binding.datatypes.boolean, scope=ResourceGroupContentItem, documentation='The Flag indicating whether a Resource in a Release is hidden in some way from the Consumer (=True) or not (=False). If this Element is not provided, it is assumed that this is False.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7571, 9)))

ResourceGroupContentItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), pyxb.binding.datatypes.boolean, scope=ResourceGroupContentItem, documentation='The Flag indicating whether a Resource in a Release is additional to those on the original Release of which this is a Version (=True) or not (=False). If this Element is not provided, it is assumed that this is False.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7576, 9)))

ResourceGroupContentItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsInstantGratificationResource'), pyxb.binding.datatypes.boolean, scope=ResourceGroupContentItem, documentation='The Flag indicating whether a Resource in a Release may be made available to consumers despite the distribution of the containing Release not having been permitted (=True) or not (=False). If this Element is not provided, it is assumed that this is False.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7581, 9)))

def _BuildAutomaton_101 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_101
    del _BuildAutomaton_101
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7518, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7523, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7528, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7541, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7549, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7566, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7571, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7576, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7581, 9))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResourceGroupContentItem._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7518, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResourceGroupContentItem._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceSubNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7523, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResourceGroupContentItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7528, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceGroupContentItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7536, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroupContentItem._UseForTag(pyxb.namespace.ExpandedName(None, 'LinkedReleaseResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7541, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroupContentItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroupContentItemReleaseReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7550, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroupContentItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7560, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroupContentItem._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7566, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroupContentItem._UseForTag(pyxb.namespace.ExpandedName(None, 'IsHiddenResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7571, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroupContentItem._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBonusResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7576, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroupContentItem._UseForTag(pyxb.namespace.ExpandedName(None, 'IsInstantGratificationResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7581, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResourceGroupContentItem._Automaton = _BuildAutomaton_101()




ResourceGroupResourceReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroupResourceReference'), STD_ANON_34, scope=ResourceGroupResourceReferenceList, documentation='A Reference for a Resource (specific to this Message). This is a LocalResourceAnchorReference starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7595, 9)))

def _BuildAutomaton_102 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_102
    del _BuildAutomaton_102
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceGroupResourceReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroupResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7595, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResourceGroupResourceReferenceList._Automaton = _BuildAutomaton_102()




ResourceMusicalWorkReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.integer, scope=ResourceMusicalWorkReference, documentation='The number indicating the order of the MusicalWork in a group of MusicalWorks within a Medley, SoundRecording or other Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7612, 9)))

ResourceMusicalWorkReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DurationUsed'), pyxb.binding.datatypes.duration, scope=ResourceMusicalWorkReference, documentation='The total Duration of the MusicalWork that has been used in a specified context (this may be less than the total Duration of the MusicalWork) (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7617, 9)))

ResourceMusicalWorkReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsFragment'), pyxb.binding.datatypes.boolean, scope=ResourceMusicalWorkReference, documentation='The Flag indicating whether the MusicalWork is a Fragment (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7622, 9)))

ResourceMusicalWorkReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReference'), STD_ANON_35, scope=ResourceMusicalWorkReference, documentation='A Reference for a MusicalWork (specific to this Message). This is a LocalMusicalWorkAnchorReference starting with the letter W.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7627, 9)))

def _BuildAutomaton_103 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_103
    del _BuildAutomaton_103
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7612, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7617, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7622, 9))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResourceMusicalWorkReference._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7612, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResourceMusicalWorkReference._UseForTag(pyxb.namespace.ExpandedName(None, 'DurationUsed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7617, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResourceMusicalWorkReference._UseForTag(pyxb.namespace.ExpandedName(None, 'IsFragment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7622, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceMusicalWorkReference._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7627, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResourceMusicalWorkReference._Automaton = _BuildAutomaton_103()




ResourceMusicalWorkReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReference'), ResourceMusicalWorkReference, scope=ResourceMusicalWorkReferenceList, documentation='A Composite containing a ResourceMusicalWorkReference for a MusicalWork (specific to this Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7644, 9)))

def _BuildAutomaton_104 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_104
    del _BuildAutomaton_104
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceMusicalWorkReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7644, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResourceMusicalWorkReferenceList._Automaton = _BuildAutomaton_104()




RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightShareId'), RightsAgreementId, scope=RightShare, documentation='A Composite containing details of Identifiers for the RightShare.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7696, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightShareReference'), STD_ANON_36, scope=RightShare, documentation='The Identifier (specific to the Message) of the RightShare within the Release which contains it. This is a LocalRightShareAnchor starting with the letter S.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7701, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightShareCreationReferenceList'), RightShareCreationReferenceList, scope=RightShare, documentation='A Composite containing details of one or more Creations contained in the RightShare.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7711, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=RightShare, documentation='A Territory to which the RightShare applies (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7719, 12)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=RightShare, documentation='A Territory to which the RightShare does not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7724, 12)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsType'), RightsType, scope=RightShare, documentation='A Type of Right covered by the RightShare. One of the Elements RightsType and UseType must be present. The RightsType is defined according to the jurisdiction of the Territory indicated in the TerritoryCode XmlAttribute.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7732, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UseType'), UseType, scope=RightShare, documentation='A Composite containing details of a nature of a Service, or a Release, as used by a Consumer. One of the Elements RightsType and UseType must be present.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7740, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserInterfaceType'), UserInterfaceType, scope=RightShare, documentation='A Composite containing details of a physical interface by which a Consumer uses a Service or Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7748, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DistributionChannelType'), DistributionChannelType, scope=RightShare, documentation='A Composite containing details of a distribution channel used to disseminate a Service or Release to a Consumer.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7756, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CarrierType'), CarrierType, scope=RightShare, documentation='A Composite containing details of a Carrier.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7764, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CommercialModelType'), CommercialModelType, scope=RightShare, documentation='A Composite containing details of the fundamental business model which applies (e.g. SubscriptionModel and PayAsYouGoModel). The CommercialModelType indicates how the Consumer pays for the Service or Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7772, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MusicalWorkRightsClaimType'), _ImportedBinding__avs.MusicalWorkRightsClaimType, scope=RightShare, documentation='A Type of the RightsClaim related to a MusicalWork.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7780, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsController'), RightsController, scope=RightShare, documentation='A Composite containing details of a RightsController of Rights in a Creation.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7788, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ValidityPeriod'), Period, scope=RightShare, documentation='A Composite containing details about the Period of Time for which the RightShare is valid.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7796, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightShareUnknown'), pyxb.binding.datatypes.boolean, scope=RightShare, documentation='The Flag indicating whether the RightSharePercentage is unknown (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7802, 12)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightSharePercentage'), pyxb.binding.datatypes.string, scope=RightShare, documentation="The share of the licensed Rights owned by the RightsController. RightShare information is given as a xs:decimal value (e.g. '0.125' represents 12.5%) or as a fraction (e.g. '1/8' represents 12.5%).", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7807, 12)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TariffReference'), TariffReference, scope=RightShare, documentation='A Composite containing details of a Reference to a TextDocument containing details of a Tariff (in the form of an Identifier, Name or Description) that is to be applied to the RightShare.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7813, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LicenseStatus'), _ImportedBinding__avs.LicenseStatus, scope=RightShare, documentation='The legal status of a License for the RightShare.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7818, 9)))

RightShare._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HasFirstLicenseRefusal'), pyxb.binding.datatypes.boolean, scope=RightShare, documentation='The Flag indicating whether a RightsController retains the right of refusal regarding the granting of the first licence for creating a SoundRecording of a Musical Work (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7823, 9)))

def _BuildAutomaton_105 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_105
    del _BuildAutomaton_105
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7696, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7711, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7732, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7740, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7748, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7756, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7764, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7772, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7780, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7788, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7796, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7807, 12))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7813, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7818, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7823, 9))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'RightShareId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7696, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'RightShareReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7701, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'RightShareCreationReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7711, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7719, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7724, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7732, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'UseType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7740, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'UserInterfaceType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7748, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'DistributionChannelType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7756, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'CarrierType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7764, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'CommercialModelType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7772, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'MusicalWorkRightsClaimType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7780, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsController')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7788, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'ValidityPeriod')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7796, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'RightShareUnknown')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7802, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'RightSharePercentage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7807, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'TariffReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7813, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'LicenseStatus')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7818, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(RightShare._UseForTag(pyxb.namespace.ExpandedName(None, 'HasFirstLicenseRefusal')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7823, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RightShare._Automaton = _BuildAutomaton_105()




RightShareCreationReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightShareWorkReference'), STD_ANON_37, scope=RightShareCreationReferenceList, documentation='A Reference for a Work (specific to this Message) that is part of the RightShare. This is a LocalMusicalWorkAnchorReference starting with the letter W.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7840, 9)))

RightShareCreationReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightShareResourceReference'), STD_ANON_38, scope=RightShareCreationReferenceList, documentation='A Reference for a Resource (specific to this Message) that is part of the RightShare. This is a LocalResourceAnchorReference starting with the letter A. The RightShare covers the Works used in the Resource(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7850, 9)))

RightShareCreationReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightShareReleaseReference'), STD_ANON_39, scope=RightShareCreationReferenceList, documentation='A Reference for a Release (specific to this Message) that is part of the RightShare. This is a LocalReleaseAnchorReference starting with the letter R. The RightShare covers the Works used in the Release(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7862, 9)))

def _BuildAutomaton_106 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_106
    del _BuildAutomaton_106
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7840, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7850, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7862, 9))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RightShareCreationReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'RightShareWorkReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7840, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RightShareCreationReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'RightShareResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7850, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RightShareCreationReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'RightShareReleaseReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7862, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RightShareCreationReferenceList._Automaton = _BuildAutomaton_106()




RightsAgreementId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MWLI'), pyxb.binding.datatypes.string, scope=RightsAgreementId, documentation="A MusicalWork License Identifier identifying a License. If the Composite is meant to describe a Claim, RightShare or contract, then the License relates to that Claim, RightShare or contract. A MWLI comprises four parts: one of the xs:strings 'M1' or 'M2' or 'M3' or 'M4', followed by five alphanumeric characters, ten alphanumeric characters and one alphanumeric check character.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7881, 9)))

RightsAgreementId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=RightsAgreementId, documentation='A Composite containing details of a ProprietaryIdentifier of the License, Claim, RightShare or contract.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7889, 9)))

def _BuildAutomaton_107 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_107
    del _BuildAutomaton_107
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7881, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7889, 9))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RightsAgreementId._UseForTag(pyxb.namespace.ExpandedName(None, 'MWLI')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7881, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RightsAgreementId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7889, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RightsAgreementId._Automaton = _BuildAutomaton_107()




RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=RightsController, documentation='A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7905, 12)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), PartyName, scope=RightsController, documentation='A Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7911, 15)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsControllerRole'), _ImportedBinding__avs.RightsControllerRole, scope=RightsController, documentation='A role that describes the Party involved in the administration of Rights.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7926, 9)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightShareUnknown'), pyxb.binding.datatypes.boolean, scope=RightsController, documentation='The Flag indicating whether the RightSharePercentage is unknown (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7935, 12)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightSharePercentage'), pyxb.binding.datatypes.string, scope=RightsController, documentation="The share of the licensed Rights owned by the RightsController. RightShare information is given as a xs:decimal value (e.g. '0.125' represents 12.5%). If no information is given, 100% is assumed.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7940, 12)))

def _BuildAutomaton_108 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_108
    del _BuildAutomaton_108
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7916, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7926, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7934, 9))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7905, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7911, 15))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7916, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsControllerRole')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7926, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'RightShareUnknown')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7935, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'RightSharePercentage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7940, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RightsController._Automaton = _BuildAutomaton_108()




SalesReportingProxyReleaseId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), ReleaseId, scope=SalesReportingProxyReleaseId, documentation='A Composite containing details of ReleaseIds. If available, a GRid should always be used.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7982, 9)))

SalesReportingProxyReleaseId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Reason'), Reason, scope=SalesReportingProxyReleaseId, documentation='A Composite containing the textual Description of the reason for the Identifier being used as a proxy.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7987, 9)))

SalesReportingProxyReleaseId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReasonType'), ReasonType, scope=SalesReportingProxyReleaseId, documentation='A Composite containing details of a ReasonType.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7992, 9)))

def _BuildAutomaton_109 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_109
    del _BuildAutomaton_109
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7987, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SalesReportingProxyReleaseId._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7982, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SalesReportingProxyReleaseId._UseForTag(pyxb.namespace.ExpandedName(None, 'Reason')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7987, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SalesReportingProxyReleaseId._UseForTag(pyxb.namespace.ExpandedName(None, 'ReasonType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 7992, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SalesReportingProxyReleaseId._Automaton = _BuildAutomaton_109()




SheetMusicId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISMN'), pyxb.binding.datatypes.string, scope=SheetMusicId, documentation="The ISMN (International Standard Music Number defined in ISO 10957) for the SheetMusic. An ISMN is a thirteen-digit number. Pre-2008 ISMNs, which had 10 characters and are now deprecated, are converted by replacing the initial letter ('M') with '979-0'.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8042, 9)))

SheetMusicId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=SheetMusicId, documentation='A Composite containing details of a ProprietaryIdentifier of the SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8047, 9)))

def _BuildAutomaton_110 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_110
    del _BuildAutomaton_110
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8042, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8047, 9))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISMN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8042, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8047, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SheetMusicId._Automaton = _BuildAutomaton_110()




SocietyAffiliation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=SocietyAffiliation, documentation='A Territory to which the affiliation details apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8087, 12)))

SocietyAffiliation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__avs.TerritoryCode, scope=SocietyAffiliation, documentation='A Territory to which the affiliation details do not apply (represented by an ISO 3166-1 TerritoryCode). Either this Element or Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8092, 12)))

SocietyAffiliation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MusicRightsSociety'), PartyDescriptor, scope=SocietyAffiliation, documentation='A Composite containing details of a MusicRightsSociety.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8100, 9)))

def _BuildAutomaton_111 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_111
    del _BuildAutomaton_111
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SocietyAffiliation._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8087, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SocietyAffiliation._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8092, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SocietyAffiliation._UseForTag(pyxb.namespace.ExpandedName(None, 'MusicRightsSociety')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8100, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SocietyAffiliation._Automaton = _BuildAutomaton_111()




SoftwareId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=SoftwareId, documentation='A Composite containing details of a ProprietaryIdentifier of the Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8112, 9)))

def _BuildAutomaton_112 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_112
    del _BuildAutomaton_112
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoftwareId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8112, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoftwareId._Automaton = _BuildAutomaton_112()




SoundRecordingCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.integer, scope=SoundRecordingCollectionReference, documentation='The number indicating the order of the Collection in a group of Collections within a Medley, SoundRecording or other Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8172, 9)))

SoundRecordingCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReference'), STD_ANON_40, scope=SoundRecordingCollectionReference, documentation='A Reference for a Collection (specific to this Message). This is a LocalCollectionAnchorReference starting with the letter X. The referenced Collection has to be of CollectionType Series, Season or Episode.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8177, 9)))

SoundRecordingCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartTime'), pyxb.binding.datatypes.duration, scope=SoundRecordingCollectionReference, documentation='The start time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8187, 9)))

SoundRecordingCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=SoundRecordingCollectionReference, documentation='The Duration of the use of the Creation that is referenced in the CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8192, 9)))

SoundRecordingCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EndTime'), pyxb.binding.datatypes.duration, scope=SoundRecordingCollectionReference, documentation='The end time of the Creation, measured from the start of the Resource from which the CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8197, 9)))

SoundRecordingCollectionReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseResourceType'), _ImportedBinding__avs.ReleaseResourceType, scope=SoundRecordingCollectionReference, documentation='A Type of Collection in the context of a Video. This is represented in an XML schema as an XML Attribute.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8202, 9)))

def _BuildAutomaton_113 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_113
    del _BuildAutomaton_113
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8172, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8187, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8192, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8197, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8202, 9))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8172, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoundRecordingCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8177, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'StartTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8187, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8192, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'EndTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8197, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingCollectionReference._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseResourceType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8202, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoundRecordingCollectionReference._Automaton = _BuildAutomaton_113()




SoundRecordingCollectionReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfCollections'), pyxb.binding.datatypes.integer, scope=SoundRecordingCollectionReferenceList, documentation='The number of referenced Collections (typically Chapters).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8216, 9)))

SoundRecordingCollectionReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReference'), SoundRecordingCollectionReference, scope=SoundRecordingCollectionReferenceList, documentation='A Composite containing a SoundRecordingCollectionReference for a Collection (specific to this Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8221, 9)))

def _BuildAutomaton_114 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_114
    del _BuildAutomaton_114
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8216, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingCollectionReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfCollections')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8216, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoundRecordingCollectionReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8221, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoundRecordingCollectionReferenceList._Automaton = _BuildAutomaton_114()




SoundRecordingId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISRC'), pyxb.binding.datatypes.string, scope=SoundRecordingId, documentation='The ISRC (International Standard Recording Code as defined in  ISO 3901) for the SoundRecording. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8235, 9)))

SoundRecordingId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogNumber'), CatalogNumber, scope=SoundRecordingId, documentation='A Composite containing details of the CatalogNumber of the SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8240, 9)))

SoundRecordingId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=SoundRecordingId, documentation='A Composite containing details of a ProprietaryIdentifier of the SoundRecording (usually one per society involved in the messaging).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8245, 9)))

def _BuildAutomaton_115 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_115
    del _BuildAutomaton_115
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8235, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8240, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8245, 9))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISRC')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8235, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingId._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8240, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8245, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SoundRecordingId._Automaton = _BuildAutomaton_115()




TechnicalInstantiation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmEnforcementType'), _ImportedBinding__avs.DrmEnforcementType, scope=TechnicalInstantiation, documentation='A Type of DRM enforcement.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8331, 9)))

TechnicalInstantiation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoDefinitionType'), _ImportedBinding__avs.VideoDefinitionType, scope=TechnicalInstantiation, documentation='A Type of resolution (or definition) in which a Video is provided.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8338, 9)))

TechnicalInstantiation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CodingType'), _ImportedBinding__avs.CodingType, scope=TechnicalInstantiation, documentation='A Type of coding used to encode a Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8345, 9)))

TechnicalInstantiation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BitRate'), BitRate, scope=TechnicalInstantiation, documentation='A Composite containing the BitRate for the audio data and a UnitOfMeasure (the default is kbps).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8350, 9)))

def _BuildAutomaton_116 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_116
    del _BuildAutomaton_116
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8331, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8338, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8345, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8350, 9))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalInstantiation._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmEnforcementType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8331, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalInstantiation._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoDefinitionType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8338, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalInstantiation._UseForTag(pyxb.namespace.ExpandedName(None, 'CodingType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8345, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalInstantiation._UseForTag(pyxb.namespace.ExpandedName(None, 'BitRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8350, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TechnicalInstantiation._Automaton = _BuildAutomaton_116()




TextId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISBN'), pyxb.binding.datatypes.string, scope=TextId, documentation="The ISBN (International Standard Book Number defined in ISO 2108) for the Text. An ISBN is a 13-digit number. Pre-2007, ISBNs, which had 10-digits and are now deprecated, are converted by adding the prefix '978' and re-calculating the check character.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8386, 9)))

TextId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISSN'), pyxb.binding.datatypes.string, scope=TextId, documentation='The ISSN (International Standard Serial Number defined in ISO 3297) identifying the Text. An ISSN comprises two groups of four digits, separated by a hyphen and a control digit.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8391, 9)))

TextId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SICI'), pyxb.binding.datatypes.string, scope=TextId, documentation='The SICI (Serial Item and Contribution Identifier defined in ANSI/NISO Z39.56-199)  for the Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8396, 9)))

TextId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=TextId, documentation='A Composite containing details of a ProprietaryIdentifier of the Text (usually one per society involved in the messaging).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8401, 9)))

def _BuildAutomaton_117 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_117
    del _BuildAutomaton_117
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8386, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8391, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8396, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8401, 9))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TextId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISBN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8386, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TextId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISSN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8391, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TextId._UseForTag(pyxb.namespace.ExpandedName(None, 'SICI')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8396, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TextId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8401, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
TextId._Automaton = _BuildAutomaton_117()




Usage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UseType'), UseType, scope=Usage, documentation='A Composite containing details of a nature of a Service, or a Release, as used by a Consumer.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8503, 9)))

Usage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserInterfaceType'), UserInterfaceType, scope=Usage, documentation='A Composite containing details of a physical interface by which a Consumer is intended to use a Service or Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8508, 9)))

Usage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DistributionChannelType'), DistributionChannelType, scope=Usage, documentation='A Composite containing details of a distribution channel intended to be used to disseminate a Service or Release to a Consumer.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8516, 9)))

Usage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CarrierType'), CarrierType, scope=Usage, documentation='A Composite containing details of a Carrier.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8524, 9)))

Usage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalInstantiation'), TechnicalInstantiation, scope=Usage, documentation='A Composite containing technical details of the Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8532, 9)))

Usage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfUsages'), pyxb.binding.datatypes.integer, scope=Usage, documentation='The number of times a Release can be used under the terms of the Deal.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8539, 9)))

def _BuildAutomaton_118 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_118
    del _BuildAutomaton_118
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8508, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8516, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8524, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8532, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8539, 9))
    counters.add(cc_4)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Usage._UseForTag(pyxb.namespace.ExpandedName(None, 'UseType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8503, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Usage._UseForTag(pyxb.namespace.ExpandedName(None, 'UserInterfaceType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8508, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Usage._UseForTag(pyxb.namespace.ExpandedName(None, 'DistributionChannelType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8516, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Usage._UseForTag(pyxb.namespace.ExpandedName(None, 'CarrierType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8524, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Usage._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalInstantiation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8532, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Usage._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfUsages')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8539, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Usage._Automaton = _BuildAutomaton_118()




UserDefinedResourceId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=UserDefinedResourceId, documentation='A Composite containing details of a ProprietaryIdentifier of the UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8570, 9)))

def _BuildAutomaton_119 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_119
    del _BuildAutomaton_119
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8570, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UserDefinedResourceId._Automaton = _BuildAutomaton_119()




VideoCueSheetReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoCueSheetReference'), STD_ANON_41, scope=VideoCueSheetReference, documentation='A Reference for a CueSheet (specific to this Message). This is a LocalCueSheetAnchorReference starting with the letter Q.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8668, 9)))

def _BuildAutomaton_120 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_120
    del _BuildAutomaton_120
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VideoCueSheetReference._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoCueSheetReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8668, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VideoCueSheetReference._Automaton = _BuildAutomaton_120()




VideoId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISRC'), pyxb.binding.datatypes.string, scope=VideoId, documentation='The ISRC (International Standard Recording Code as defined in  ISO 3901) for the Video. An ISRC comprises four parts: two characters, followed by three alphanumeric characters, then two digits and five digits. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8685, 9)))

VideoId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ISAN'), pyxb.binding.datatypes.string, scope=VideoId, documentation='The ISAN (International Standard Audiovisual Number as defined in ISO 15706) for the Video. An ISAN comprises four blocks of four hexadecimal charaters followed by a check character.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8690, 9)))

VideoId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VISAN'), pyxb.binding.datatypes.string, scope=VideoId, documentation='The V-ISAN (Version Identifier of a International Standard Audiovisual Number as defined in ISO 15706-2) for the Video. A V-ISAN comprises four blocks of four hexadecimal charaters followed by a check character, followed by two further blocks of four hexadecimal characters, followed by a further check character.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8695, 9)))

VideoId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogNumber'), CatalogNumber, scope=VideoId, documentation='A Composite containing details of the CatalogNumber of the Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8700, 9)))

VideoId._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProprietaryId'), ProprietaryId, scope=VideoId, documentation='A Composite containing details of a ProprietaryIdentifier of the Video (usually one per society involved in the messaging).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8705, 9)))

def _BuildAutomaton_121 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_121
    del _BuildAutomaton_121
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8685, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8690, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8695, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8700, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8705, 9))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VideoId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISRC')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8685, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VideoId._UseForTag(pyxb.namespace.ExpandedName(None, 'ISAN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8690, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VideoId._UseForTag(pyxb.namespace.ExpandedName(None, 'VISAN')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8695, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VideoId._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8700, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(VideoId._UseForTag(pyxb.namespace.ExpandedName(None, 'ProprietaryId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8705, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
VideoId._Automaton = _BuildAutomaton_121()




WebPage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=WebPage, documentation='A Composite containing details of the PartyId for a Party owning the WebPage. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8744, 9)))

WebPage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), ReleaseId, scope=WebPage, documentation='A Composite containing details of ReleaseIds. If available, a GRid should always be used.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8752, 9)))

WebPage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PageName'), Name, scope=WebPage, documentation='A Composite containing the Name of the WebPage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8760, 9)))

WebPage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'URL'), pyxb.binding.datatypes.string, scope=WebPage, documentation='A URL of the WebPage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8765, 9)))

WebPage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserName'), pyxb.binding.datatypes.string, scope=WebPage, documentation='An Identifier of a computer user who is granted maintenance access to the WebPage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8770, 9)))

WebPage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Password'), pyxb.binding.datatypes.string, scope=WebPage, documentation='A Password needed to grant a user maintenance access to the WebPage in combination with the UserName.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8775, 9)))

def _BuildAutomaton_122 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_122
    del _BuildAutomaton_122
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8744, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8752, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8760, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8765, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8770, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8775, 9))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(WebPage._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8744, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(WebPage._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8752, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(WebPage._UseForTag(pyxb.namespace.ExpandedName(None, 'PageName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8760, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(WebPage._UseForTag(pyxb.namespace.ExpandedName(None, 'URL')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8765, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(WebPage._UseForTag(pyxb.namespace.ExpandedName(None, 'UserName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8770, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(WebPage._UseForTag(pyxb.namespace.ExpandedName(None, 'Password')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8775, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
WebPage._Automaton = _BuildAutomaton_122()




WorkList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MusicalWork'), MusicalWork, scope=WorkList, documentation='A Composite containing details of a MusicalWork contained in a Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8787, 9)))

def _BuildAutomaton_123 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_123
    del _BuildAutomaton_123
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(WorkList._UseForTag(pyxb.namespace.ExpandedName(None, 'MusicalWork')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8787, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
WorkList._Automaton = _BuildAutomaton_123()




PriceInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), Description, scope=PriceInformation, documentation='A Composite containing a Description of the differences between multiple PriceInformation Composites.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1580, 9)))

PriceInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PriceRangeType'), PriceRangeType, scope=PriceInformation, documentation="A Composite containing a Type of Price according to its value range. Typical examples include 'budget' and 'front line'. This is an informative element which is not meant to be used to send instructions on the Price to be used by the DSP.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1585, 9)))

PriceInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PriceType'), PriceType, scope=PriceInformation, documentation='A Composite containing further details of the Price, including a Price code that informs the DSP of the Price the Release should be offered at, often in combination with a rate card. This element should not be combined with WholesalePricePerUnit or BulkOrderWholesalePricePerUnit.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1590, 9)))

PriceInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WholesalePricePerUnit'), Price, scope=PriceInformation, documentation='A Composite containing details of a wholesale Price for a single unit of Usage, which informs the informs the DSP of the Price the Release should be offered at. Note that this Price applies to all UseTypes referenced in a DealTerm Composite. This element should not be combined with PriceType.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1595, 9)))

PriceInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BulkOrderWholesalePricePerUnit'), Price, scope=PriceInformation, documentation='A Composite containing details of a wholesale Price for a single unit, which informs the informs the DSP of the Price the Release should be offered at. Note that the size of a bulk order is defined in the contract between MessageSender and the MessageRecipient. This element should not be combined with PriceType.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1600, 9)))

PriceInformation._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SuggestedRetailPrice'), Price, scope=PriceInformation, documentation='A Composite containing details of a suggested retail Price.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1607, 9)))

def _BuildAutomaton_124 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_124
    del _BuildAutomaton_124
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1580, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1585, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1590, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1595, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1600, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1607, 9))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PriceInformation._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1580, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PriceInformation._UseForTag(pyxb.namespace.ExpandedName(None, 'PriceRangeType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1585, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PriceInformation._UseForTag(pyxb.namespace.ExpandedName(None, 'PriceType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1590, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PriceInformation._UseForTag(pyxb.namespace.ExpandedName(None, 'WholesalePricePerUnit')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1595, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PriceInformation._UseForTag(pyxb.namespace.ExpandedName(None, 'BulkOrderWholesalePricePerUnit')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1600, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PriceInformation._UseForTag(pyxb.namespace.ExpandedName(None, 'SuggestedRetailPrice')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 1607, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PriceInformation._Automaton = _BuildAutomaton_124()




AdministratingRecordCompany._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), PartyId, scope=AdministratingRecordCompany, documentation='A Composite containing details of the PartyId for the Party. If no Namespace is given, the Identifier is a DdexPartyId (DPID). Note that DPIDs are not normally used to identify Artists, Producers or other Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5001, 9)))

AdministratingRecordCompany._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), PartyName, scope=AdministratingRecordCompany, documentation='A Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5007, 12)))

def _BuildAutomaton_125 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_125
    del _BuildAutomaton_125
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5012, 12))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AdministratingRecordCompany._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5001, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AdministratingRecordCompany._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5007, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AdministratingRecordCompany._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 5012, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AdministratingRecordCompany._Automaton = _BuildAutomaton_125()




PLine._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Year'), pyxb.binding.datatypes.gYear, scope=PLine, documentation='The Year of the PLine.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6874, 9)))

PLine._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLineCompany'), pyxb.binding.datatypes.string, scope=PLine, documentation='The Name of the company releasing the Creation. This may be an owner or a licensee of the Creation.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6879, 9)))

PLine._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLineText'), pyxb.binding.datatypes.string, scope=PLine, documentation='The text of the PLine.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6884, 9)))

def _BuildAutomaton_126 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_126
    del _BuildAutomaton_126
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6874, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6879, 9))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PLine._UseForTag(pyxb.namespace.ExpandedName(None, 'Year')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6874, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PLine._UseForTag(pyxb.namespace.ExpandedName(None, 'PLineCompany')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6879, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PLine._UseForTag(pyxb.namespace.ExpandedName(None, 'PLineText')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 6884, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PLine._Automaton = _BuildAutomaton_126()




Title._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TitleText'), TitleText, scope=Title, documentation='A Composite containing the text of the Title.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8440, 9)))

Title._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SubTitle'), TypedSubTitle, scope=Title, documentation='A Composite containing details of a SubTitle of the Title, including Titles of Versions used to differentiate different versions of the same Title, as required by the GRid and ISRC ReferenceDescriptiveMetadataSets.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8445, 9)))

def _BuildAutomaton_127 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_127
    del _BuildAutomaton_127
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8445, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Title._UseForTag(pyxb.namespace.ExpandedName(None, 'TitleText')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8440, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Title._UseForTag(pyxb.namespace.ExpandedName(None, 'SubTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/36/release-notification.xsd', 8445, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Title._Automaton = _BuildAutomaton_127()

