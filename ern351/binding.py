# ./binding.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:e737ec91b8fc78846439283e2ebe183115cad7bd
# Generated 2015-07-06 15:56:21.656196 by PyXB version 1.2.4 using Python 2.7.6.final.0
# Namespace http://ddex.net/xml/ern/351

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six

# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:74f1c0fe-23f7-11e5-bdf6-080027960975')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.4'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import _ddexC as _ImportedBinding__ddexC
import _iso639a2 as _ImportedBinding__iso639a2
import _ddex as _ImportedBinding__ddex

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.NamespaceForURI('http://ddex.net/xml/ern/351', create_if_missing=True)
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 211, 12)
    _Documentation = None
STD_ANON._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON._CF_pattern.addPattern(pattern='R[\\d\\-_a-zA-Z]+')
STD_ANON._InitializeFacetMap(STD_ANON._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 320, 12)
    _Documentation = None
STD_ANON_._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_._CF_pattern.addPattern(pattern='X[\\d\\-_a-zA-Z]+')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 400, 12)
    _Documentation = None
STD_ANON_2._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_2._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 490, 12)
    _Documentation = None
STD_ANON_3._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_3._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 525, 12)
    _Documentation = None
STD_ANON_4._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_4._CF_pattern.addPattern(pattern='W[\\d\\-_a-zA-Z]+')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 694, 12)
    _Documentation = None
STD_ANON_5._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_5._CF_pattern.addPattern(pattern='Q[\\d\\-_a-zA-Z]+')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 790, 12)
    _Documentation = None
STD_ANON_6._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_6._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_7 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 952, 12)
    _Documentation = None
STD_ANON_7._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_7._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_7._InitializeFacetMap(STD_ANON_7._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_8 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1105, 12)
    _Documentation = None
STD_ANON_8._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_8._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_8._InitializeFacetMap(STD_ANON_8._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_9 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1444, 12)
    _Documentation = None
STD_ANON_9._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_9._CF_pattern.addPattern(pattern='R[\\d\\-_a-zA-Z]+')
STD_ANON_9._InitializeFacetMap(STD_ANON_9._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_10 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1554, 12)
    _Documentation = None
STD_ANON_10._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_10._CF_pattern.addPattern(pattern='R[\\d\\-_a-zA-Z]+')
STD_ANON_10._InitializeFacetMap(STD_ANON_10._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_11 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1933, 15)
    _Documentation = None
STD_ANON_11._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_11._CF_pattern.addPattern(pattern='R[\\d\\-_a-zA-Z]+')
STD_ANON_11._InitializeFacetMap(STD_ANON_11._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_12 (pyxb.binding.datatypes.IDREF):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2015, 12)
    _Documentation = None
STD_ANON_12._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_12._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_12._InitializeFacetMap(STD_ANON_12._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_13 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2144, 12)
    _Documentation = None
STD_ANON_13._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_13._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_13._InitializeFacetMap(STD_ANON_13._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_14 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2309, 12)
    _Documentation = None
STD_ANON_14._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_14._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_14._InitializeFacetMap(STD_ANON_14._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_15 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2474, 12)
    _Documentation = None
STD_ANON_15._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_15._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_15._InitializeFacetMap(STD_ANON_15._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_16 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2823, 12)
    _Documentation = None
STD_ANON_16._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_16._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_16._InitializeFacetMap(STD_ANON_16._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_17 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2923, 12)
    _Documentation = None
STD_ANON_17._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_17._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_17._InitializeFacetMap(STD_ANON_17._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_18 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3008, 12)
    _Documentation = None
STD_ANON_18._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_18._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_18._InitializeFacetMap(STD_ANON_18._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_19 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3083, 12)
    _Documentation = None
STD_ANON_19._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_19._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_19._InitializeFacetMap(STD_ANON_19._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_20 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3153, 12)
    _Documentation = None
STD_ANON_20._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_20._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_20._InitializeFacetMap(STD_ANON_20._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_21 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3263, 12)
    _Documentation = None
STD_ANON_21._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_21._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_21._InitializeFacetMap(STD_ANON_21._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_22 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3338, 12)
    _Documentation = None
STD_ANON_22._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_22._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_22._InitializeFacetMap(STD_ANON_22._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_23 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3404, 12)
    _Documentation = None
STD_ANON_23._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_23._CF_pattern.addPattern(pattern='T[\\d\\-_a-zA-Z]+')
STD_ANON_23._InitializeFacetMap(STD_ANON_23._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_24 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3580, 12)
    _Documentation = None
STD_ANON_24._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_24._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_24._InitializeFacetMap(STD_ANON_24._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_25 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3742, 12)
    _Documentation = None
STD_ANON_25._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_25._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_25._InitializeFacetMap(STD_ANON_25._CF_pattern)

# Atomic simple type: [anonymous]
class STD_ANON_26 (pyxb.binding.datatypes.ID):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3909, 12)
    _Documentation = None
STD_ANON_26._CF_pattern = pyxb.binding.facets.CF_pattern()
STD_ANON_26._CF_pattern.addPattern(pattern='A[\\d\\-_a-zA-Z]+')
STD_ANON_26._InitializeFacetMap(STD_ANON_26._CF_pattern)

# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Message in the Release Notification Message Suite Standard, containing details of a new ddex:Release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 21, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MessageHeader uses Python identifier MessageHeader
    __MessageHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageHeader'), 'MessageHeader', '__httpddex_netxmlern351_CTD_ANON_MessageHeader', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 23, 12), )

    
    MessageHeader = property(__MessageHeader.value, __MessageHeader.set, None, 'The MessageHeader for the ern:NewReleaseMessage.')

    
    # Element UpdateIndicator uses Python identifier UpdateIndicator
    __UpdateIndicator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UpdateIndicator'), 'UpdateIndicator', '__httpddex_netxmlern351_CTD_ANON_UpdateIndicator', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 28, 12), )

    
    UpdateIndicator = property(__UpdateIndicator.value, __UpdateIndicator.set, None, 'The indicator which distinguishes whether the ddex:Message contains original data or updates to previously sent data.')

    
    # Element IsBackfill uses Python identifier IsBackfill
    __IsBackfill = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBackfill'), 'IsBackfill', '__httpddex_netxmlern351_CTD_ANON_IsBackfill', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 33, 12), )

    
    IsBackfill = property(__IsBackfill.value, __IsBackfill.set, None, 'A ddex:Flag indicating whether the ern:NewReleaseMessage is sent as part of a backfill activity (as opposed to providing ongoing deliveries of frontline ddex:Releases) (=True) or not (=False). When this element is not present, the context is assumed to be False.')

    
    # Element CatalogTransfer uses Python identifier CatalogTransfer
    __CatalogTransfer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogTransfer'), 'CatalogTransfer', '__httpddex_netxmlern351_CTD_ANON_CatalogTransfer', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 38, 12), )

    
    CatalogTransfer = property(__CatalogTransfer.value, __CatalogTransfer.set, None, 'A ddex:Composite containing details of a ddex:Price change.')

    
    # Element WorkList uses Python identifier WorkList
    __WorkList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WorkList'), 'WorkList', '__httpddex_netxmlern351_CTD_ANON_WorkList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 43, 12), )

    
    WorkList = property(__WorkList.value, __WorkList.set, None, 'A ddex:Composite containing details of one or more ddex:MusicalWorks, a ddex:Performance of which is contained in the ddex:Resources of the ern:NewReleaseMessage.')

    
    # Element CueSheetList uses Python identifier CueSheetList
    __CueSheetList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueSheetList'), 'CueSheetList', '__httpddex_netxmlern351_CTD_ANON_CueSheetList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 48, 12), )

    
    CueSheetList = property(__CueSheetList.value, __CueSheetList.set, None, 'A ddex:Composite containing details of one or more ddex:CueSheets contained in ddex:Releases for which data is provided in the ern:NewReleaseMessage.')

    
    # Element ResourceList uses Python identifier ResourceList
    __ResourceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceList'), 'ResourceList', '__httpddex_netxmlern351_CTD_ANON_ResourceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 53, 12), )

    
    ResourceList = property(__ResourceList.value, __ResourceList.set, None, 'A ddex:Composite containing details of one or more ddex:Resources.')

    
    # Element CollectionList uses Python identifier CollectionList
    __CollectionList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionList'), 'CollectionList', '__httpddex_netxmlern351_CTD_ANON_CollectionList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 58, 12), )

    
    CollectionList = property(__CollectionList.value, __CollectionList.set, None, 'A ddex:Composite containing details of one or more ddex:Collections contained in ddex:Releases for which data is provided in the ern:NewReleaseMessage.')

    
    # Element ReleaseList uses Python identifier ReleaseList
    __ReleaseList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseList'), 'ReleaseList', '__httpddex_netxmlern351_CTD_ANON_ReleaseList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 63, 12), )

    
    ReleaseList = property(__ReleaseList.value, __ReleaseList.set, None, 'A ddex:Composite containing details of one or more ddex:DDEX ddex:Releases contained in the ern:NewReleaseMessage.')

    
    # Element DealList uses Python identifier DealList
    __DealList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealList'), 'DealList', '__httpddex_netxmlern351_CTD_ANON_DealList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 68, 12), )

    
    DealList = property(__DealList.value, __DealList.set, None, 'A ddex:Composite containing details of one or more ddex:Deals governing the Usage of the ddex:Releases in the ddex:Message.')

    
    # Attribute MessageSchemaVersionId uses Python identifier MessageSchemaVersionId
    __MessageSchemaVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MessageSchemaVersionId'), 'MessageSchemaVersionId', '__httpddex_netxmlern351_CTD_ANON_MessageSchemaVersionId', pyxb.binding.datatypes.string, required=True)
    __MessageSchemaVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 74, 9)
    __MessageSchemaVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 74, 9)
    
    MessageSchemaVersionId = property(__MessageSchemaVersionId.value, __MessageSchemaVersionId.set, None, 'The ddex:Identifier of the ddex:Version of the XML schema used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.')

    
    # Attribute BusinessProfileVersionId uses Python identifier BusinessProfileVersionId
    __BusinessProfileVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BusinessProfileVersionId'), 'BusinessProfileVersionId', '__httpddex_netxmlern351_CTD_ANON_BusinessProfileVersionId', pyxb.binding.datatypes.string)
    __BusinessProfileVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 79, 9)
    __BusinessProfileVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 79, 9)
    
    BusinessProfileVersionId = property(__BusinessProfileVersionId.value, __BusinessProfileVersionId.set, None, 'The ddex:Identifier of the ddex:Version of the business profile used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.')

    
    # Attribute ReleaseProfileVersionId uses Python identifier ReleaseProfileVersionId
    __ReleaseProfileVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReleaseProfileVersionId'), 'ReleaseProfileVersionId', '__httpddex_netxmlern351_CTD_ANON_ReleaseProfileVersionId', pyxb.binding.datatypes.string)
    __ReleaseProfileVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 84, 9)
    __ReleaseProfileVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 84, 9)
    
    ReleaseProfileVersionId = property(__ReleaseProfileVersionId.value, __ReleaseProfileVersionId.set, None, 'The ddex:Identifier of the ddex:Version of the release profile used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_CTD_ANON_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 89, 9)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 89, 9)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:NewReleaseMessage as defined in IETF RfC 4646. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __MessageHeader.name() : __MessageHeader,
        __UpdateIndicator.name() : __UpdateIndicator,
        __IsBackfill.name() : __IsBackfill,
        __CatalogTransfer.name() : __CatalogTransfer,
        __WorkList.name() : __WorkList,
        __CueSheetList.name() : __CueSheetList,
        __ResourceList.name() : __ResourceList,
        __CollectionList.name() : __CollectionList,
        __ReleaseList.name() : __ReleaseList,
        __DealList.name() : __DealList
    })
    _AttributeMap.update({
        __MessageSchemaVersionId.name() : __MessageSchemaVersionId,
        __BusinessProfileVersionId.name() : __BusinessProfileVersionId,
        __ReleaseProfileVersionId.name() : __ReleaseProfileVersionId,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })



# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Message in the Release Notification Message Suite Standard, containing a list of ddex:Releases that form part of a catalog."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 100, 6)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MessageHeader uses Python identifier MessageHeader
    __MessageHeader = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MessageHeader'), 'MessageHeader', '__httpddex_netxmlern351_CTD_ANON__MessageHeader', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 102, 12), )

    
    MessageHeader = property(__MessageHeader.value, __MessageHeader.set, None, 'The MessageHeader for the ern:CatalogListMessage.')

    
    # Element PublicationDate uses Python identifier PublicationDate
    __PublicationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PublicationDate'), 'PublicationDate', '__httpddex_netxmlern351_CTD_ANON__PublicationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 107, 12), )

    
    PublicationDate = property(__PublicationDate.value, __PublicationDate.set, None, 'The ddex:DateTime at which the catalog will become available (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD).')

    
    # Element CatalogItem uses Python identifier CatalogItem
    __CatalogItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogItem'), 'CatalogItem', '__httpddex_netxmlern351_CTD_ANON__CatalogItem', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 112, 12), )

    
    CatalogItem = property(__CatalogItem.value, __CatalogItem.set, None, 'A ddex:Composite containing details of a ddex:Release which is an item of the catalog.')

    
    # Attribute MessageSchemaVersionId uses Python identifier MessageSchemaVersionId
    __MessageSchemaVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'MessageSchemaVersionId'), 'MessageSchemaVersionId', '__httpddex_netxmlern351_CTD_ANON__MessageSchemaVersionId', pyxb.binding.datatypes.string, required=True)
    __MessageSchemaVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 118, 9)
    __MessageSchemaVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 118, 9)
    
    MessageSchemaVersionId = property(__MessageSchemaVersionId.value, __MessageSchemaVersionId.set, None, 'The ddex:Identifier of the ddex:Version of the XML schema used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.')

    
    # Attribute BusinessProfileVersionId uses Python identifier BusinessProfileVersionId
    __BusinessProfileVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'BusinessProfileVersionId'), 'BusinessProfileVersionId', '__httpddex_netxmlern351_CTD_ANON__BusinessProfileVersionId', pyxb.binding.datatypes.string)
    __BusinessProfileVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 123, 9)
    __BusinessProfileVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 123, 9)
    
    BusinessProfileVersionId = property(__BusinessProfileVersionId.value, __BusinessProfileVersionId.set, None, 'The ddex:Identifier of the ddex:Version of the business profile used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.')

    
    # Attribute ReleaseProfileVersionId uses Python identifier ReleaseProfileVersionId
    __ReleaseProfileVersionId = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'ReleaseProfileVersionId'), 'ReleaseProfileVersionId', '__httpddex_netxmlern351_CTD_ANON__ReleaseProfileVersionId', pyxb.binding.datatypes.string)
    __ReleaseProfileVersionId._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 128, 9)
    __ReleaseProfileVersionId._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 128, 9)
    
    ReleaseProfileVersionId = property(__ReleaseProfileVersionId.value, __ReleaseProfileVersionId.set, None, 'The ddex:Identifier of the ddex:Version of the release profile used for the ddex:Message. This is represented in an XML schema as an XML ddex:Attribute.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_CTD_ANON__LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 133, 9)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 133, 9)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:CatalogListMessage as defined in IETF RfC 4646. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __MessageHeader.name() : __MessageHeader,
        __PublicationDate.name() : __PublicationDate,
        __CatalogItem.name() : __CatalogItem
    })
    _AttributeMap.update({
        __MessageSchemaVersionId.name() : __MessageSchemaVersionId,
        __BusinessProfileVersionId.name() : __BusinessProfileVersionId,
        __ReleaseProfileVersionId.name() : __ReleaseProfileVersionId,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })



# Complex type {http://ddex.net/xml/ern/351}CatalogItem with content type ELEMENT_ONLY
class CatalogItem (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:Release which is an item of a catalog."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CatalogItem')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 140, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_CatalogItem_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 145, 9), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory for the ddex:Release (represented by an ISO 3166-1 iso3166a2:TerritoryCode).')

    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern351_CatalogItem_ReleaseId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 150, 9), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A ddex:Composite containing details of ddex:ReleaseIds. If available, a ddex:GRid has to be used. If the ern:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ern:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_CatalogItem_Title', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 155, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ddex:Release.')

    
    # Element DisplayArtistName uses Python identifier DisplayArtistName
    __DisplayArtistName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtistName'), 'DisplayArtistName', '__httpddex_netxmlern351_CatalogItem_DisplayArtistName', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 160, 9), )

    
    DisplayArtistName = property(__DisplayArtistName.value, __DisplayArtistName.set, None, 'A ddex:Composite containing the ddex:Name to be used by a ddex:DSP when presenting ddex:Artist details of the ddex:Release to a ddex:Consumer.')

    
    # Element ContributorName uses Python identifier ContributorName
    __ContributorName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContributorName'), 'ContributorName', '__httpddex_netxmlern351_CatalogItem_ContributorName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 165, 9), )

    
    ContributorName = property(__ContributorName.value, __ContributorName.set, None, 'A ddex:Composite containing details of a ddex:Contributor to the catalog, i.e. to at least one of the included ddex:Releases.')

    
    # Element DisplayTitle uses Python identifier DisplayTitle
    __DisplayTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayTitle'), 'DisplayTitle', '__httpddex_netxmlern351_CatalogItem_DisplayTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 170, 9), )

    
    DisplayTitle = property(__DisplayTitle.value, __DisplayTitle.set, None, 'A ddex:Composite containing details of a ddex:DisplayTitle of the ddex:Release.')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpddex_netxmlern351_CatalogItem_LabelName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 175, 9), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'A ddex:Composite containing the ddex:Name of the ddex:Label for the ddex:Release.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern351_CatalogItem_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 180, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A ddex:Composite containing details of a ddex:Genre to which the ddex:Release belongs.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern351_CatalogItem_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 185, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A ddex:Composite containing details of the ddex:PLine for the ern:Release.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern351_CatalogItem_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 190, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A ddex:Composite containing details of the ddex:CLine for the ern:Release.')

    
    # Element ReleaseDate uses Python identifier ReleaseDate
    __ReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDate'), 'ReleaseDate', '__httpddex_netxmlern351_CatalogItem_ReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 195, 9), )

    
    ReleaseDate = property(__ReleaseDate.value, __ReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Release was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ReleaseId.name() : __ReleaseId,
        __Title.name() : __Title,
        __DisplayArtistName.name() : __DisplayArtistName,
        __ContributorName.name() : __ContributorName,
        __DisplayTitle.name() : __DisplayTitle,
        __LabelName.name() : __LabelName,
        __Genre.name() : __Genre,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine,
        __ReleaseDate.name() : __ReleaseDate
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CatalogItem', CatalogItem)


# Complex type {http://ddex.net/xml/ern/351}CatalogReleaseReferenceList with content type ELEMENT_ONLY
class CatalogReleaseReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing a list of CatalogReleaseReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CatalogReleaseReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 202, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CatalogReleaseReference uses Python identifier CatalogReleaseReference
    __CatalogReleaseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReference'), 'CatalogReleaseReference', '__httpddex_netxmlern351_CatalogReleaseReferenceList_CatalogReleaseReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 207, 9), )

    
    CatalogReleaseReference = property(__CatalogReleaseReference.value, __CatalogReleaseReference.set, None, 'A ddex:Reference for a ddex:Release (specific to this ddex:Message) that is part of the catalog. This is a ddex:LocalReleaseAnchorReference starting with the letter R.')

    _ElementMap.update({
        __CatalogReleaseReference.name() : __CatalogReleaseReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CatalogReleaseReferenceList', CatalogReleaseReferenceList)


# Complex type {http://ddex.net/xml/ern/351}CatalogTransfer with content type ELEMENT_ONLY
class CatalogTransfer (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:CatalogTransfer."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CatalogTransfer')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 219, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CatalogTransferCompleted uses Python identifier CatalogTransferCompleted
    __CatalogTransferCompleted = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogTransferCompleted'), 'CatalogTransferCompleted', '__httpddex_netxmlern351_CatalogTransfer_CatalogTransferCompleted', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 224, 9), )

    
    CatalogTransferCompleted = property(__CatalogTransferCompleted.value, __CatalogTransferCompleted.set, None, 'A ddex:Flag indicating whether the ddex:CatalogTransfer has been made (=True) or still needs to be made (=False).')

    
    # Element EffectiveTransferDate uses Python identifier EffectiveTransferDate
    __EffectiveTransferDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EffectiveTransferDate'), 'EffectiveTransferDate', '__httpddex_netxmlern351_CatalogTransfer_EffectiveTransferDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 229, 9), )

    
    EffectiveTransferDate = property(__EffectiveTransferDate.value, __EffectiveTransferDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the catalog is or was transferred.')

    
    # Element CatalogReleaseReferenceList uses Python identifier CatalogReleaseReferenceList
    __CatalogReleaseReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReferenceList'), 'CatalogReleaseReferenceList', '__httpddex_netxmlern351_CatalogTransfer_CatalogReleaseReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 234, 9), )

    
    CatalogReleaseReferenceList = property(__CatalogReleaseReferenceList.value, __CatalogReleaseReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:Releases contained in the catalog that is or was transferred.')

    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_CatalogTransfer_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 240, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory to which the ddex:CatalogTransfer applies (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory must be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_CatalogTransfer_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 245, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory to which the ddex:CatalogTransfer does not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory must be present, but not both.')

    
    # Element TransferringFrom uses Python identifier TransferringFrom
    __TransferringFrom = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TransferringFrom'), 'TransferringFrom', '__httpddex_netxmlern351_CatalogTransfer_TransferringFrom', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 252, 9), )

    
    TransferringFrom = property(__TransferringFrom.value, __TransferringFrom.set, None, 'A ddex:Composite containing details of the old ddex:RightsController.')

    
    # Element TransferringTo uses Python identifier TransferringTo
    __TransferringTo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TransferringTo'), 'TransferringTo', '__httpddex_netxmlern351_CatalogTransfer_TransferringTo', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 257, 9), )

    
    TransferringTo = property(__TransferringTo.value, __TransferringTo.set, None, 'A ddex:Composite containing details of the new ddex:RightsController.')

    _ElementMap.update({
        __CatalogTransferCompleted.name() : __CatalogTransferCompleted,
        __EffectiveTransferDate.name() : __EffectiveTransferDate,
        __CatalogReleaseReferenceList.name() : __CatalogReleaseReferenceList,
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __TransferringFrom.name() : __TransferringFrom,
        __TransferringTo.name() : __TransferringTo
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CatalogTransfer', CatalogTransfer)


# Complex type {http://ddex.net/xml/ern/351}Character with content type ELEMENT_ONLY
class Character (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:Character. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Character')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 264, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern351_Character_PartyId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 270, 12), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern351_Character_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 276, 15), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A ddex:Composite containing details of the PartyName(s).')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern351_Character_ResourceContributor', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 288, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A ddex:Composite containing details of the ddex:Name, ddex:Identifier and role(s) of a ddex:Contributor.')

    
    # Attribute SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern351_Character_SequenceNumber', pyxb.binding.datatypes.integer)
    __SequenceNumber._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 294, 6)
    __SequenceNumber._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 294, 6)
    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the ddexC:Character in a group of ddex:Characters. This is represented in an XML schema as an XML ddex:Attribute. ')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __ResourceContributor.name() : __ResourceContributor
    })
    _AttributeMap.update({
        __SequenceNumber.name() : __SequenceNumber
    })
Namespace.addCategoryObject('typeBinding', 'Character', Character)


# Complex type {http://ddex.net/xml/ern/351}Collection with content type ELEMENT_ONLY
class Collection (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:Collection. ddex:Collections referenced from ddex:Video ddex:Resources are of ddex:CollectionType ddex:VideoChapter . ddex:Collections referenced from a ddex:Release composite are of ddex:CollectionType ddex:Series, ddex:Season or ddex:Episode."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Collection')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 300, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CollectionId uses Python identifier CollectionId
    __CollectionId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionId'), 'CollectionId', '__httpddex_netxmlern351_Collection_CollectionId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 305, 9), )

    
    CollectionId = property(__CollectionId.value, __CollectionId.set, None, 'A ddex:Composite containing details of an ddex:Identifier of the ddex:Collection.')

    
    # Element CollectionType uses Python identifier CollectionType
    __CollectionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionType'), 'CollectionType', '__httpddex_netxmlern351_Collection_CollectionType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 310, 9), )

    
    CollectionType = property(__CollectionType.value, __CollectionType.set, None, 'A ddex:Composite containing details of the ddex:Type of the ddex:Collection.')

    
    # Element CollectionReference uses Python identifier CollectionReference
    __CollectionReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionReference'), 'CollectionReference', '__httpddex_netxmlern351_Collection_CollectionReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 316, 9), )

    
    CollectionReference = property(__CollectionReference.value, __CollectionReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ddex:Collection within the ddex:Release which contains it. This is a ddex:LocalCollectionAnchor starting with the letter X.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_Collection_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 326, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ddex:Collection.')

    
    # Element Contributor uses Python identifier Contributor
    __Contributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Contributor'), 'Contributor', '__httpddex_netxmlern351_Collection_Contributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 331, 9), )

    
    Contributor = property(__Contributor.value, __Contributor.set, None, 'A ddex:Composite containing details a ddex:Contributor to the ddex:Collection.')

    
    # Element Character uses Python identifier Character
    __Character = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Character'), 'Character', '__httpddex_netxmlern351_Collection_Character', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 337, 9), )

    
    Character = property(__Character.value, __Character.set, None, 'A ddex:Composite containing details of a ddex:Character in the ddex:Collection. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element CollectionCollectionReferenceList uses Python identifier CollectionCollectionReferenceList
    __CollectionCollectionReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReferenceList'), 'CollectionCollectionReferenceList', '__httpddex_netxmlern351_Collection_CollectionCollectionReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 342, 9), )

    
    CollectionCollectionReferenceList = property(__CollectionCollectionReferenceList.value, __CollectionCollectionReferenceList.set, None, 'A ddex:Composite containing a list of ddex:CollectionCollectionReferences for a ddex:Collection (specific to this ddex:Message).')

    
    # Element IsComplete uses Python identifier IsComplete
    __IsComplete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsComplete'), 'IsComplete', '__httpddex_netxmlern351_Collection_IsComplete', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 348, 9), )

    
    IsComplete = property(__IsComplete.value, __IsComplete.set, None, 'The ddex:Flag indicating whether the ddex:Collection is complete (=True) or not (=False). Only one of the Elements ddex:IsComplete here and in the ern:CollectionDetailsByTerritory is valid for a given ern:Collection.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_Collection_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 353, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The sum of the ddex:Durations of all ddex:Resources contained in the ddexC:Collection (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element DurationOfMusicalContent uses Python identifier DurationOfMusicalContent
    __DurationOfMusicalContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DurationOfMusicalContent'), 'DurationOfMusicalContent', '__httpddex_netxmlern351_Collection_DurationOfMusicalContent', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 358, 9), )

    
    DurationOfMusicalContent = property(__DurationOfMusicalContent.value, __DurationOfMusicalContent.set, None, 'The ddex:Duration of the musical content (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern351_Collection_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 363, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Collection was created.')

    
    # Element OriginalReleaseDate uses Python identifier OriginalReleaseDate
    __OriginalReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate'), 'OriginalReleaseDate', '__httpddex_netxmlern351_Collection_OriginalReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 368, 9), )

    
    OriginalReleaseDate = property(__OriginalReleaseDate.value, __OriginalReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Collection was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element OriginalLanguage uses Python identifier OriginalLanguage
    __OriginalLanguage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalLanguage'), 'OriginalLanguage', '__httpddex_netxmlern351_Collection_OriginalLanguage', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 373, 9), )

    
    OriginalLanguage = property(__OriginalLanguage.value, __OriginalLanguage.set, None, 'The orignal ddex:Language of the ddex:Collection (represented by an ISO 639-2 iso639a2:LanguageCode).')

    
    # Element CollectionDetailsByTerritory uses Python identifier CollectionDetailsByTerritory
    __CollectionDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionDetailsByTerritory'), 'CollectionDetailsByTerritory', '__httpddex_netxmlern351_Collection_CollectionDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 378, 9), )

    
    CollectionDetailsByTerritory = property(__CollectionDetailsByTerritory.value, __CollectionDetailsByTerritory.set, None, 'A ddex:Composite containing details of ddex:Descriptors and other attributes of the ddex:Collection which may vary according to ddex:Territory of release.')

    
    # Element CollectionResourceReferenceList uses Python identifier CollectionResourceReferenceList
    __CollectionResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionResourceReferenceList'), 'CollectionResourceReferenceList', '__httpddex_netxmlern351_Collection_CollectionResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 384, 9), )

    
    CollectionResourceReferenceList = property(__CollectionResourceReferenceList.value, __CollectionResourceReferenceList.set, None, 'A ddex:Composite containing a list of ddex:CollectionResourceReferences for a ddex:Resource (specific to this ddex:Message).')

    
    # Element CollectionWorkReferenceList uses Python identifier CollectionWorkReferenceList
    __CollectionWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionWorkReferenceList'), 'CollectionWorkReferenceList', '__httpddex_netxmlern351_Collection_CollectionWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 390, 9), )

    
    CollectionWorkReferenceList = property(__CollectionWorkReferenceList.value, __CollectionWorkReferenceList.set, None, 'A ddex:Composite containing a list of ddex:CollectionWorkReferences for a ddex:Work (specific to this ddex:Message).')

    
    # Element RepresentativeImageReference uses Python identifier RepresentativeImageReference
    __RepresentativeImageReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RepresentativeImageReference'), 'RepresentativeImageReference', '__httpddex_netxmlern351_Collection_RepresentativeImageReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 396, 9), )

    
    RepresentativeImageReference = property(__RepresentativeImageReference.value, __RepresentativeImageReference.set, None, 'A ddex:Reference for an ddex:Image (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern351_Collection_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 406, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A ddex:Composite containing details of the ddex:PLine for the ern:Collection.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern351_Collection_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 411, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A ddex:Composite containing details of the ddex:CLine for the ern:Collection.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_Collection_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 417, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 417, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ddex:Collection as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __CollectionId.name() : __CollectionId,
        __CollectionType.name() : __CollectionType,
        __CollectionReference.name() : __CollectionReference,
        __Title.name() : __Title,
        __Contributor.name() : __Contributor,
        __Character.name() : __Character,
        __CollectionCollectionReferenceList.name() : __CollectionCollectionReferenceList,
        __IsComplete.name() : __IsComplete,
        __Duration.name() : __Duration,
        __DurationOfMusicalContent.name() : __DurationOfMusicalContent,
        __CreationDate.name() : __CreationDate,
        __OriginalReleaseDate.name() : __OriginalReleaseDate,
        __OriginalLanguage.name() : __OriginalLanguage,
        __CollectionDetailsByTerritory.name() : __CollectionDetailsByTerritory,
        __CollectionResourceReferenceList.name() : __CollectionResourceReferenceList,
        __CollectionWorkReferenceList.name() : __CollectionWorkReferenceList,
        __RepresentativeImageReference.name() : __RepresentativeImageReference,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Collection', Collection)


# Complex type {http://ddex.net/xml/ern/351}CollectionDetailsByTerritory with content type ELEMENT_ONLY
class CollectionDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Collection which may vary according to ddex:Territory of release. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 423, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_CollectionDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 429, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory to which the ddex:Collection details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_CollectionDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 434, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory to which the ddex:Collection details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_CollectionDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 441, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ddex:Collection.')

    
    # Element Contributor uses Python identifier Contributor
    __Contributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Contributor'), 'Contributor', '__httpddex_netxmlern351_CollectionDetailsByTerritory_Contributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 446, 9), )

    
    Contributor = property(__Contributor.value, __Contributor.set, None, 'A ddex:Composite containing details of a ddex:Contributor to the ddex:Collection.')

    
    # Element IsComplete uses Python identifier IsComplete
    __IsComplete = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsComplete'), 'IsComplete', '__httpddex_netxmlern351_CollectionDetailsByTerritory_IsComplete', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 452, 9), )

    
    IsComplete = property(__IsComplete.value, __IsComplete.set, None, 'The ddex:Flag indicating whether the ddex:Collection is complete (=True) or not (=False). Only one of the Elements ddex:IsComplete here and in the Collection is valid for a given Collection.')

    
    # Element Character uses Python identifier Character
    __Character = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Character'), 'Character', '__httpddex_netxmlern351_CollectionDetailsByTerritory_Character', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 457, 9), )

    
    Character = property(__Character.value, __Character.set, None, 'A ddex:Composite containing details of a ddex:Character in the ddex:Collection. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __Title.name() : __Title,
        __Contributor.name() : __Contributor,
        __IsComplete.name() : __IsComplete,
        __Character.name() : __Character
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionDetailsByTerritory', CollectionDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/351}CollectionList with content type ELEMENT_ONLY
class CollectionList (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of one or more ddex:Collections."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 464, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Collection uses Python identifier Collection
    __Collection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Collection'), 'Collection', '__httpddex_netxmlern351_CollectionList_Collection', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 469, 9), )

    
    Collection = property(__Collection.value, __Collection.set, None, 'A ddex:Composite containing details of a ddex:Collection contained in a ddex:Resource.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_CollectionList_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 475, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 475, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the CollectionList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __Collection.name() : __Collection
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'CollectionList', CollectionList)


# Complex type {http://ddex.net/xml/ern/351}CollectionResourceReference with content type ELEMENT_ONLY
class CollectionResourceReference (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing a ddex:CollectionResourceReference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionResourceReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 481, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CollectionResourceReference uses Python identifier CollectionResourceReference
    __CollectionResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference'), 'CollectionResourceReference', '__httpddex_netxmlern351_CollectionResourceReference_CollectionResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 486, 9), )

    
    CollectionResourceReference = property(__CollectionResourceReference.value, __CollectionResourceReference.set, None, 'A ddex:Reference for a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_CollectionResourceReference_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 496, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The ddex:Duration of the use of the ddex:Resource that is referenced in the ddex:CollectionResourceReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    _ElementMap.update({
        __CollectionResourceReference.name() : __CollectionResourceReference,
        __Duration.name() : __Duration
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionResourceReference', CollectionResourceReference)


# Complex type {http://ddex.net/xml/ern/351}CollectionResourceReferenceList with content type ELEMENT_ONLY
class CollectionResourceReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing a list of ddex:CollectionResourceReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionResourceReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 503, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CollectionResourceReference uses Python identifier CollectionResourceReference
    __CollectionResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference'), 'CollectionResourceReference', '__httpddex_netxmlern351_CollectionResourceReferenceList_CollectionResourceReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 508, 9), )

    
    CollectionResourceReference = property(__CollectionResourceReference.value, __CollectionResourceReference.set, None, 'A ddex:Composite containing a ddex:CollectionResourceReference for a ddex:Collection (specific to this ddex:Message).')

    _ElementMap.update({
        __CollectionResourceReference.name() : __CollectionResourceReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionResourceReferenceList', CollectionResourceReferenceList)


# Complex type {http://ddex.net/xml/ern/351}CollectionWorkReference with content type ELEMENT_ONLY
class CollectionWorkReference (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing a ddex:CollectionWorkReference."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionWorkReference')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 516, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CollectionWorkReference uses Python identifier CollectionWorkReference
    __CollectionWorkReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference'), 'CollectionWorkReference', '__httpddex_netxmlern351_CollectionWorkReference_CollectionWorkReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 521, 9), )

    
    CollectionWorkReference = property(__CollectionWorkReference.value, __CollectionWorkReference.set, None, 'A ddex:Reference for a ddex:Work (specific to this ddex:Message). This is a ddex:LocalMusicalWorkAnchorReference starting with the letter W.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_CollectionWorkReference_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 531, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The ddex:Duration of the use of the ddex:Work that is referenced in the ddex:CollectionWorkReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    _ElementMap.update({
        __CollectionWorkReference.name() : __CollectionWorkReference,
        __Duration.name() : __Duration
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionWorkReference', CollectionWorkReference)


# Complex type {http://ddex.net/xml/ern/351}CollectionWorkReferenceList with content type ELEMENT_ONLY
class CollectionWorkReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing a list of ddex:CollectionWorkReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CollectionWorkReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 538, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CollectionWorkReference uses Python identifier CollectionWorkReference
    __CollectionWorkReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference'), 'CollectionWorkReference', '__httpddex_netxmlern351_CollectionWorkReferenceList_CollectionWorkReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 543, 9), )

    
    CollectionWorkReference = property(__CollectionWorkReference.value, __CollectionWorkReference.set, None, 'A ddex:Composite containing a ddex:CollectionWorkReference for a ddex:Collection (specific to this ddex:Message).')

    _ElementMap.update({
        __CollectionWorkReference.name() : __CollectionWorkReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CollectionWorkReferenceList', CollectionWorkReferenceList)


# Complex type {http://ddex.net/xml/ern/351}Condition with content type ELEMENT_ONLY
class Condition (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a condition."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Condition')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 551, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Value uses Python identifier Value
    __Value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Value'), 'Value', '__httpddex_netxmlern351_Condition_Value', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 556, 9), )

    
    Value = property(__Value.value, __Value.set, None, 'The numeric value of the condition.')

    
    # Element Unit uses Python identifier Unit
    __Unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Unit'), 'Unit', '__httpddex_netxmlern351_Condition_Unit', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 561, 9), )

    
    Unit = property(__Unit.value, __Unit.set, None, 'A ddex:UnitOfMeasure for the condition value.')

    
    # Element RelationalRelator uses Python identifier RelationalRelator
    __RelationalRelator = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RelationalRelator'), 'RelationalRelator', '__httpddex_netxmlern351_Condition_RelationalRelator', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 566, 9), )

    
    RelationalRelator = property(__RelationalRelator.value, __RelationalRelator.set, None, 'A ddex:Relator expressing the accuracy of the condition value.')

    _ElementMap.update({
        __Value.name() : __Value,
        __Unit.name() : __Unit,
        __RelationalRelator.name() : __RelationalRelator
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Condition', Condition)


# Complex type {http://ddex.net/xml/ern/351}Cue with content type ELEMENT_ONLY
class Cue (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:Cue."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Cue')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 573, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CueUseType uses Python identifier CueUseType
    __CueUseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueUseType'), 'CueUseType', '__httpddex_netxmlern351_Cue_CueUseType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 578, 9), )

    
    CueUseType = property(__CueUseType.value, __CueUseType.set, None, 'A ddex:Composite containing details of a ddex:UseType of the ddexC:Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.')

    
    # Element CueThemeType uses Python identifier CueThemeType
    __CueThemeType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueThemeType'), 'CueThemeType', '__httpddex_netxmlern351_Cue_CueThemeType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 583, 9), )

    
    CueThemeType = property(__CueThemeType.value, __CueThemeType.set, None, 'A ddex:Composite containing details of a ddex:ThemeType for the ddex:Creation referenced in the ddexC:Cue.')

    
    # Element CueVocalType uses Python identifier CueVocalType
    __CueVocalType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueVocalType'), 'CueVocalType', '__httpddex_netxmlern351_Cue_CueVocalType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 588, 9), )

    
    CueVocalType = property(__CueVocalType.value, __CueVocalType.set, None, 'A ddex:Composite containing details of a ddex:VocalType for the ddex:Creation referenced in the ddexC:Cue.')

    
    # Element IsDance uses Python identifier IsDance
    __IsDance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsDance'), 'IsDance', '__httpddex_netxmlern351_Cue_IsDance', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 593, 9), )

    
    IsDance = property(__IsDance.value, __IsDance.set, None, 'A ddex:Flag indicating whether a ddex:Creation contains dancing (=True) or not (=False).')

    
    # Element CueVisualPerceptionType uses Python identifier CueVisualPerceptionType
    __CueVisualPerceptionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueVisualPerceptionType'), 'CueVisualPerceptionType', '__httpddex_netxmlern351_Cue_CueVisualPerceptionType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 598, 9), )

    
    CueVisualPerceptionType = property(__CueVisualPerceptionType.value, __CueVisualPerceptionType.set, None, 'A ddex:Composite containing details of a ddex:VisualPerceptionType for the ddex:Creation referenced in the ddexC:Cue.')

    
    # Element CueOrigin uses Python identifier CueOrigin
    __CueOrigin = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueOrigin'), 'CueOrigin', '__httpddex_netxmlern351_Cue_CueOrigin', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 604, 9), )

    
    CueOrigin = property(__CueOrigin.value, __CueOrigin.set, None, 'A ddex:Composite containing details of a ddex:CueOrigin for the ddexC:Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.')

    
    # Element CueCreationReference uses Python identifier CueCreationReference
    __CueCreationReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueCreationReference'), 'CueCreationReference', '__httpddex_netxmlern351_Cue_CueCreationReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 610, 12), )

    
    CueCreationReference = property(__CueCreationReference.value, __CueCreationReference.set, None, 'A ddex:Composite containing a ddex:CueCreationReference for a ddex:Creation (specific to this ddex:Message).')

    
    # Element ReferencedCreationType uses Python identifier ReferencedCreationType
    __ReferencedCreationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferencedCreationType'), 'ReferencedCreationType', '__httpddex_netxmlern351_Cue_ReferencedCreationType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 617, 15), )

    
    ReferencedCreationType = property(__ReferencedCreationType.value, __ReferencedCreationType.set, None, 'A ddex:Type of the ddex:Creation referenced in the ddexC:Cue.')

    
    # Element ReferencedCreationId uses Python identifier ReferencedCreationId
    __ReferencedCreationId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferencedCreationId'), 'ReferencedCreationId', '__httpddex_netxmlern351_Cue_ReferencedCreationId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 622, 15), )

    
    ReferencedCreationId = property(__ReferencedCreationId.value, __ReferencedCreationId.set, None, 'A ddex:Composite containing details of a ddex:CreationIds.')

    
    # Element ReferencedCreationTitle uses Python identifier ReferencedCreationTitle
    __ReferencedCreationTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferencedCreationTitle'), 'ReferencedCreationTitle', '__httpddex_netxmlern351_Cue_ReferencedCreationTitle', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 627, 15), )

    
    ReferencedCreationTitle = property(__ReferencedCreationTitle.value, __ReferencedCreationTitle.set, None, 'A ddex:Composite containing details of a ddex:Title of the ddex:Creation referenced in the ddexC:Cue.')

    
    # Element ReferencedCreationContributor uses Python identifier ReferencedCreationContributor
    __ReferencedCreationContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferencedCreationContributor'), 'ReferencedCreationContributor', '__httpddex_netxmlern351_Cue_ReferencedCreationContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 633, 15), )

    
    ReferencedCreationContributor = property(__ReferencedCreationContributor.value, __ReferencedCreationContributor.set, None, 'A ddex:Composite containing details a ddex:Contributor of the ddex:Creation referenced in the ddexC:Cue.')

    
    # Element ReferencedCreationCharacter uses Python identifier ReferencedCreationCharacter
    __ReferencedCreationCharacter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferencedCreationCharacter'), 'ReferencedCreationCharacter', '__httpddex_netxmlern351_Cue_ReferencedCreationCharacter', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 639, 15), )

    
    ReferencedCreationCharacter = property(__ReferencedCreationCharacter.value, __ReferencedCreationCharacter.set, None, 'A ddex:Composite containing details of a ddex:Character in the ddex:Creation referenced in the ddexC:Cue. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element HasMusicalContent uses Python identifier HasMusicalContent
    __HasMusicalContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HasMusicalContent'), 'HasMusicalContent', '__httpddex_netxmlern351_Cue_HasMusicalContent', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 647, 9), )

    
    HasMusicalContent = property(__HasMusicalContent.value, __HasMusicalContent.set, None, 'A ddex:Flag indicating whether whether the ddex:Creation referenced in the ddexC:Cue contains musical content such as a ddex:SoundRecording or a ddex:MusicalWork (=True) or not (=False).')

    
    # Element StartTime uses Python identifier StartTime
    __StartTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartTime'), 'StartTime', '__httpddex_netxmlern351_Cue_StartTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 652, 9), )

    
    StartTime = property(__StartTime.value, __StartTime.set, None, 'The start time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_Cue_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 657, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The ddex:Duration of the use of the ddex:Creation that is referenced in the ddex:CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element EndTime uses Python identifier EndTime
    __EndTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EndTime'), 'EndTime', '__httpddex_netxmlern351_Cue_EndTime', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 662, 9), )

    
    EndTime = property(__EndTime.value, __EndTime.set, None, 'The end time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern351_Cue_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 667, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A ddex:Composite containing details of the ddex:PLine for the ern:Cue.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern351_Cue_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 672, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A ddex:Composite containing details of the ddex:CLine for the ern:Cue.')

    _ElementMap.update({
        __CueUseType.name() : __CueUseType,
        __CueThemeType.name() : __CueThemeType,
        __CueVocalType.name() : __CueVocalType,
        __IsDance.name() : __IsDance,
        __CueVisualPerceptionType.name() : __CueVisualPerceptionType,
        __CueOrigin.name() : __CueOrigin,
        __CueCreationReference.name() : __CueCreationReference,
        __ReferencedCreationType.name() : __ReferencedCreationType,
        __ReferencedCreationId.name() : __ReferencedCreationId,
        __ReferencedCreationTitle.name() : __ReferencedCreationTitle,
        __ReferencedCreationContributor.name() : __ReferencedCreationContributor,
        __ReferencedCreationCharacter.name() : __ReferencedCreationCharacter,
        __HasMusicalContent.name() : __HasMusicalContent,
        __StartTime.name() : __StartTime,
        __Duration.name() : __Duration,
        __EndTime.name() : __EndTime,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'Cue', Cue)


# Complex type {http://ddex.net/xml/ern/351}CueSheet with content type ELEMENT_ONLY
class CueSheet (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:CueSheet."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CueSheet')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 679, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CueSheetId uses Python identifier CueSheetId
    __CueSheetId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueSheetId'), 'CueSheetId', '__httpddex_netxmlern351_CueSheet_CueSheetId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 684, 9), )

    
    CueSheetId = property(__CueSheetId.value, __CueSheetId.set, None, 'A ddex:Composite containing details of a ddex:CueSheetId of the ddexC:CueSheet.')

    
    # Element CueSheetReference uses Python identifier CueSheetReference
    __CueSheetReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueSheetReference'), 'CueSheetReference', '__httpddex_netxmlern351_CueSheet_CueSheetReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 690, 9), )

    
    CueSheetReference = property(__CueSheetReference.value, __CueSheetReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ddexC:CueSheet within the ddex:Release which contains it. This is a ddex:LocalCueSheetAnchor starting with the letter Q.')

    
    # Element CueSheetType uses Python identifier CueSheetType
    __CueSheetType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueSheetType'), 'CueSheetType', '__httpddex_netxmlern351_CueSheet_CueSheetType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 700, 9), )

    
    CueSheetType = property(__CueSheetType.value, __CueSheetType.set, None, 'A ddex:Composite containing details of a ddex:Type of the ddexC:CueSheet.')

    
    # Element Cue uses Python identifier Cue
    __Cue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Cue'), 'Cue', '__httpddex_netxmlern351_CueSheet_Cue', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 705, 9), )

    
    Cue = property(__Cue.value, __Cue.set, None, 'A ddex:Composite containing details of a ddex:Cue.')

    _ElementMap.update({
        __CueSheetId.name() : __CueSheetId,
        __CueSheetReference.name() : __CueSheetReference,
        __CueSheetType.name() : __CueSheetType,
        __Cue.name() : __Cue
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CueSheet', CueSheet)


# Complex type {http://ddex.net/xml/ern/351}CueSheetList with content type ELEMENT_ONLY
class CueSheetList (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of one or more ddex:CueSheets."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CueSheetList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 712, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CueSheet uses Python identifier CueSheet
    __CueSheet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CueSheet'), 'CueSheet', '__httpddex_netxmlern351_CueSheetList_CueSheet', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 717, 9), )

    
    CueSheet = property(__CueSheet.value, __CueSheet.set, None, 'A ddex:Composite containing details of a ddex:CueSheet contained in a ddex:Resource.')

    _ElementMap.update({
        __CueSheet.name() : __CueSheet
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'CueSheetList', CueSheetList)


# Complex type {http://ddex.net/xml/ern/351}Deal with content type ELEMENT_ONLY
class Deal (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details (in full or in summary) of a ddex:Deal made between a ddex:DSP (as ddex:Licensee) and a ddex:Licensor of ddex:Works or ddex:Releases. When any new DealTerms are added or removed from an existing ddex:Deal (different ddex:UseTypes, ddex:Prices, Territories, ddex:DistributionChannels) then a new ddex:Deal is created, and (if appropriate) the ddex:ValidityPeriod of the existing ddex:Deal should be terminated. The only changes which should be made to the DealTerms of an existing ddex:Deal are corrections required because of an earlier error or omission, or the addition of an ddex:EndDate to the Deal's ddex:ValidityPeriod."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Deal')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 724, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DealReference uses Python identifier DealReference
    __DealReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealReference'), 'DealReference', '__httpddex_netxmlern351_Deal_DealReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 729, 9), )

    
    DealReference = property(__DealReference.value, __DealReference.set, None, 'A ddex:Composite containing a ddex:Reference to a ddex:TextDocument containing details of the ern:Deal (in the form of an ddex:Identifier, ddex:Name or ddex:Description).')

    
    # Element DealTerms uses Python identifier DealTerms
    __DealTerms = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealTerms'), 'DealTerms', '__httpddex_netxmlern351_Deal_DealTerms', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 735, 9), )

    
    DealTerms = property(__DealTerms.value, __DealTerms.set, None, 'A ddex:Composite containing details of the terms of the ern:Deal.')

    
    # Element ResourceUsage uses Python identifier ResourceUsage
    __ResourceUsage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceUsage'), 'ResourceUsage', '__httpddex_netxmlern351_Deal_ResourceUsage', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 740, 9), )

    
    ResourceUsage = property(__ResourceUsage.value, __ResourceUsage.set, None, 'A ddex:Composite containing details of one or more Usages that govern a ddex:Resource in the ern:Deal where the Usage of the ddex:Resource differs from the Usage of the other ddex:Resources in the same ddex:Release.')

    
    # Element DealTechnicalResourceDetailsReferenceList uses Python identifier DealTechnicalResourceDetailsReferenceList
    __DealTechnicalResourceDetailsReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReferenceList'), 'DealTechnicalResourceDetailsReferenceList', '__httpddex_netxmlern351_Deal_DealTechnicalResourceDetailsReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 745, 9), )

    
    DealTechnicalResourceDetailsReferenceList = property(__DealTechnicalResourceDetailsReferenceList.value, __DealTechnicalResourceDetailsReferenceList.set, None, 'A ddex:Composite containing a list of ddex:DealTechnicalResourceDetailsReferences for the ern:Deal.')

    
    # Element DistributionChannelPage uses Python identifier DistributionChannelPage
    __DistributionChannelPage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DistributionChannelPage'), 'DistributionChannelPage', '__httpddex_netxmlern351_Deal_DistributionChannelPage', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 751, 9), )

    
    DistributionChannelPage = property(__DistributionChannelPage.value, __DistributionChannelPage.set, None, 'A ddex:Composite containing details of a ddex:WebPage for the ddex:DistributionChannel.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_Deal_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 758, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 758, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:Deal as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __DealReference.name() : __DealReference,
        __DealTerms.name() : __DealTerms,
        __ResourceUsage.name() : __ResourceUsage,
        __DealTechnicalResourceDetailsReferenceList.name() : __DealTechnicalResourceDetailsReferenceList,
        __DistributionChannelPage.name() : __DistributionChannelPage
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Deal', Deal)


# Complex type {http://ddex.net/xml/ern/351}DealList with content type ELEMENT_ONLY
class DealList (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of one or more ddex:Deals."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DealList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 764, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReleaseDeal uses Python identifier ReleaseDeal
    __ReleaseDeal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDeal'), 'ReleaseDeal', '__httpddex_netxmlern351_DealList_ReleaseDeal', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 769, 9), )

    
    ReleaseDeal = property(__ReleaseDeal.value, __ReleaseDeal.set, None, 'A ddex:Composite containing details of one or more ddex:Deals pertaining to one or more ddex:Releases.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_DealList_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 775, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 775, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:DealList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __ReleaseDeal.name() : __ReleaseDeal
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'DealList', DealList)


# Complex type {http://ddex.net/xml/ern/351}DealTechnicalResourceDetailsReferenceList with content type ELEMENT_ONLY
class DealTechnicalResourceDetailsReferenceList (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing a list of ddex:DealTechnicalResourceDetailsReferences."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DealTechnicalResourceDetailsReferenceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 781, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DealTechnicalResourceDetailsReference uses Python identifier DealTechnicalResourceDetailsReference
    __DealTechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReference'), 'DealTechnicalResourceDetailsReference', '__httpddex_netxmlern351_DealTechnicalResourceDetailsReferenceList_DealTechnicalResourceDetailsReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 786, 9), )

    
    DealTechnicalResourceDetailsReference = property(__DealTechnicalResourceDetailsReference.value, __DealTechnicalResourceDetailsReference.set, None, 'A ddex:Reference for a ddex:Composite specifying technical details of a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalTechnicalResourceDetailsAnchorReference starting with the letter T.')

    _ElementMap.update({
        __DealTechnicalResourceDetailsReference.name() : __DealTechnicalResourceDetailsReference
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'DealTechnicalResourceDetailsReferenceList', DealTechnicalResourceDetailsReferenceList)


# Complex type {http://ddex.net/xml/ern/351}DealTerms with content type ELEMENT_ONLY
class DealTerms (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of the terms of a ddex:Deal."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DealTerms')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 798, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CommercialModelType uses Python identifier CommercialModelType
    __CommercialModelType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CommercialModelType'), 'CommercialModelType', '__httpddex_netxmlern351_DealTerms_CommercialModelType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 803, 9), )

    
    CommercialModelType = property(__CommercialModelType.value, __CommercialModelType.set, None, 'A ddex:Composite containing details of the fundamental business model which applies to the ddex:Deal (e.g. ddex:SubscriptionModel and ddex:PayAsYouGoModel). The ddex:CommercialModelType indicates how the ddex:Consumer pays for the ddex:Service or ddex:Release.')

    
    # Element Usage uses Python identifier Usage
    __Usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Usage'), 'Usage', '__httpddex_netxmlern351_DealTerms_Usage', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 810, 12), )

    
    Usage = property(__Usage.value, __Usage.set, None, 'A ddex:Composite containing the ddex:Types and number of Usages applicable to a ddex:Release to which the ddex:Deal applies.')

    
    # Element AllDealsCancelled uses Python identifier AllDealsCancelled
    __AllDealsCancelled = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AllDealsCancelled'), 'AllDealsCancelled', '__httpddex_netxmlern351_DealTerms_AllDealsCancelled', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 815, 12), )

    
    AllDealsCancelled = property(__AllDealsCancelled.value, __AllDealsCancelled.set, None, 'The ddex:Flag indicating whether all ddex:Deals are cancelled for the given Territories (=True) or not (=False). This ddex:Flag can be used in conjunction with a ddex:StartDate of a ddex:ValidityPeriod to indicate the point in time from which all ddex:Deals are cancelled.')

    
    # Element TakeDown uses Python identifier TakeDown
    __TakeDown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TakeDown'), 'TakeDown', '__httpddex_netxmlern351_DealTerms_TakeDown', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 820, 12), )

    
    TakeDown = property(__TakeDown.value, __TakeDown.set, None, "The ddex:Flag indicating whether all ddex:Releases referred to are to be taken down by the ddex:MessageRecipient. This includes that all ddex:Deals referred to in a specific ddex:Composite are cancelled and no information about the ddex:Releases should be displayed to the end user on the DSP's website (=True) or not (=False). This ddex:Flag can be used in conjunction with a ddex:StartDate of a ddex:ValidityPeriod to indicate the point in time from which all ddex:Deals are cancelled.")

    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_DealTerms_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 827, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory in which the ddex:Deal applies (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory must be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_DealTerms_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 832, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory in which the ddex:Deal does not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory must be present, but not both.')

    
    # Element DistributionChannel uses Python identifier DistributionChannel
    __DistributionChannel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DistributionChannel'), 'DistributionChannel', '__httpddex_netxmlern351_DealTerms_DistributionChannel', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 840, 12), )

    
    DistributionChannel = property(__DistributionChannel.value, __DistributionChannel.set, None, 'A ddex:Composite containing details of the ddex:DSP through whose ddex:DistributionChannel the sales are permitted. If none are provided no limitations on the ddex:DistributionChannels are given.')

    
    # Element ExcludedDistributionChannel uses Python identifier ExcludedDistributionChannel
    __ExcludedDistributionChannel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedDistributionChannel'), 'ExcludedDistributionChannel', '__httpddex_netxmlern351_DealTerms_ExcludedDistributionChannel', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 845, 12), )

    
    ExcludedDistributionChannel = property(__ExcludedDistributionChannel.value, __ExcludedDistributionChannel.set, None, 'A ddex:Composite containing details of excluded ddex:DSP. This is used in an aggregator model where all agreed partners of the aggregators may use a ddex:ReleaseDeal, except those that are listed herein.')

    
    # Element PriceInformation uses Python identifier PriceInformation
    __PriceInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PriceInformation'), 'PriceInformation', '__httpddex_netxmlern351_DealTerms_PriceInformation', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 851, 9), )

    
    PriceInformation = property(__PriceInformation.value, __PriceInformation.set, None, 'A ddex:Composite containing details of a ddex:Price. Note that this ddex:Price applies to all ddex:UseTypes referenced in this ddex:Composite.')

    
    # Element IsPromotional uses Python identifier IsPromotional
    __IsPromotional = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPromotional'), 'IsPromotional', '__httpddex_netxmlern351_DealTerms_IsPromotional', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 858, 12), )

    
    IsPromotional = property(__IsPromotional.value, __IsPromotional.set, None, 'The ddex:Flag indicating whether a special ddex:Deal is made between the ddex:Licensor and the ddex:Licensee (=True) or not (=False) regarding the royalties or payments due to be paid for Releases distributed under this ddex:Deal.')

    
    # Element PromotionalCode uses Python identifier PromotionalCode
    __PromotionalCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PromotionalCode'), 'PromotionalCode', '__httpddex_netxmlern351_DealTerms_PromotionalCode', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 863, 12), )

    
    PromotionalCode = property(__PromotionalCode.value, __PromotionalCode.set, None, 'A ddex:Composite containing details of a ddex:PromotionalCode.')

    
    # Element ValidityPeriod uses Python identifier ValidityPeriod
    __ValidityPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ValidityPeriod'), 'ValidityPeriod', '__httpddex_netxmlern351_DealTerms_ValidityPeriod', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 869, 9), )

    
    ValidityPeriod = property(__ValidityPeriod.value, __ValidityPeriod.set, None, 'A ddex:Composite containing details about a ddex:Period of ddex:Time during which the ddex:Deal is valid. No ddex:StartDate in this ddex:Composite means that the ddex:Deal is valid as per contractual relationship between ddex:MessageSender and ddex:MessageRecipient. No ddex:EndDate in this ddex:Composite means that the ddex:Deal is valid until further notice.')

    
    # Element ConsumerRentalPeriod uses Python identifier ConsumerRentalPeriod
    __ConsumerRentalPeriod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerRentalPeriod'), 'ConsumerRentalPeriod', '__httpddex_netxmlern351_DealTerms_ConsumerRentalPeriod', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 874, 9), )

    
    ConsumerRentalPeriod = property(__ConsumerRentalPeriod.value, __ConsumerRentalPeriod.set, None, 'A ddex:Composite containing details of a ddex:Period the ddex:DSP may rent something to a ddex:Customer.')

    
    # Element PreOrderReleaseDate uses Python identifier PreOrderReleaseDate
    __PreOrderReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreOrderReleaseDate'), 'PreOrderReleaseDate', '__httpddex_netxmlern351_DealTerms_PreOrderReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 879, 9), )

    
    PreOrderReleaseDate = property(__PreOrderReleaseDate.value, __PreOrderReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the related ddex:Release is made available for pre-ordering.')

    
    # Element PreOrderPreviewDate uses Python identifier PreOrderPreviewDate
    __PreOrderPreviewDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreOrderPreviewDate'), 'PreOrderPreviewDate', '__httpddex_netxmlern351_DealTerms_PreOrderPreviewDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 884, 9), )

    
    PreOrderPreviewDate = property(__PreOrderPreviewDate.value, __PreOrderPreviewDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the pre-ordered ddex:Release is made first available for previewing.')

    
    # Element IsExclusive uses Python identifier IsExclusive
    __IsExclusive = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsExclusive'), 'IsExclusive', '__httpddex_netxmlern351_DealTerms_IsExclusive', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 889, 9), )

    
    IsExclusive = property(__IsExclusive.value, __IsExclusive.set, None, 'The ddex:Flag indicating whether the ddex:Deal is exclusive (=True) or not (=False) to the ddex:MessageRecipient with respect to the relevant Territory(ies), Time(s) and Release(s). For other Territory(ies), or Time(s), other ddex:DSPs might be able to sell the Release(s). The exclusivity is in accordance with the agreement between the ddex:MessageSender and ddex:MessageRecipient.')

    
    # Element RelatedReleaseOfferSet uses Python identifier RelatedReleaseOfferSet
    __RelatedReleaseOfferSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RelatedReleaseOfferSet'), 'RelatedReleaseOfferSet', '__httpddex_netxmlern351_DealTerms_RelatedReleaseOfferSet', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 894, 9), )

    
    RelatedReleaseOfferSet = property(__RelatedReleaseOfferSet.value, __RelatedReleaseOfferSet.set, None, 'A ddex:Composite containing details of one or more offers related to the ddex:Release.')

    
    # Element PhysicalReturns uses Python identifier PhysicalReturns
    __PhysicalReturns = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PhysicalReturns'), 'PhysicalReturns', '__httpddex_netxmlern351_DealTerms_PhysicalReturns', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 900, 9), )

    
    PhysicalReturns = property(__PhysicalReturns.value, __PhysicalReturns.set, None, 'A ddex:Composite containing details of physical returns.')

    
    # Element NumberOfProductsPerCarton uses Python identifier NumberOfProductsPerCarton
    __NumberOfProductsPerCarton = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfProductsPerCarton'), 'NumberOfProductsPerCarton', '__httpddex_netxmlern351_DealTerms_NumberOfProductsPerCarton', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 905, 9), )

    
    NumberOfProductsPerCarton = property(__NumberOfProductsPerCarton.value, __NumberOfProductsPerCarton.set, None, 'A number of ddex:Products per carton. This is the smallest number of ddex:Products that can be ordered.')

    
    # Element RightsClaimPolicy uses Python identifier RightsClaimPolicy
    __RightsClaimPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicy'), 'RightsClaimPolicy', '__httpddex_netxmlern351_DealTerms_RightsClaimPolicy', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 910, 9), )

    
    RightsClaimPolicy = property(__RightsClaimPolicy.value, __RightsClaimPolicy.set, None, 'A ddex:Composite containing details of a rights claim policy.')

    
    # Element WebPolicy uses Python identifier WebPolicy
    __WebPolicy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'WebPolicy'), 'WebPolicy', '__httpddex_netxmlern351_DealTerms_WebPolicy', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 916, 9), )

    
    WebPolicy = property(__WebPolicy.value, __WebPolicy.set, None, 'A ddex:Composite containing details of ddex:UserGeneratedContent permissions.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_DealTerms_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 922, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 922, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:DealTerms as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __CommercialModelType.name() : __CommercialModelType,
        __Usage.name() : __Usage,
        __AllDealsCancelled.name() : __AllDealsCancelled,
        __TakeDown.name() : __TakeDown,
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __DistributionChannel.name() : __DistributionChannel,
        __ExcludedDistributionChannel.name() : __ExcludedDistributionChannel,
        __PriceInformation.name() : __PriceInformation,
        __IsPromotional.name() : __IsPromotional,
        __PromotionalCode.name() : __PromotionalCode,
        __ValidityPeriod.name() : __ValidityPeriod,
        __ConsumerRentalPeriod.name() : __ConsumerRentalPeriod,
        __PreOrderReleaseDate.name() : __PreOrderReleaseDate,
        __PreOrderPreviewDate.name() : __PreOrderPreviewDate,
        __IsExclusive.name() : __IsExclusive,
        __RelatedReleaseOfferSet.name() : __RelatedReleaseOfferSet,
        __PhysicalReturns.name() : __PhysicalReturns,
        __NumberOfProductsPerCarton.name() : __NumberOfProductsPerCarton,
        __RightsClaimPolicy.name() : __RightsClaimPolicy,
        __WebPolicy.name() : __WebPolicy
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'DealTerms', DealTerms)


# Complex type {http://ddex.net/xml/ern/351}Image with content type ELEMENT_ONLY
class Image (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of an ddex:Image. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Image')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 928, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ImageType uses Python identifier ImageType
    __ImageType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageType'), 'ImageType', '__httpddex_netxmlern351_Image_ImageType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 933, 9), )

    
    ImageType = property(__ImageType.value, __ImageType.set, None, 'A ddex:Composite containing details of the ddex:Type of the ern:Image.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern351_Image_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 938, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The ddex:Flag indicating whether the ern:Image is related to an ddex:Artist (=True) or not (=False).')

    
    # Element ImageId uses Python identifier ImageId
    __ImageId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageId'), 'ImageId', '__httpddex_netxmlern351_Image_ImageId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 943, 9), )

    
    ImageId = property(__ImageId.value, __ImageId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of the ern:Image.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern351_Image_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 948, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:Image within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_Image_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 958, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ern:Image.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern351_Image_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 963, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Image was created.')

    
    # Element ImageDetailsByTerritory uses Python identifier ImageDetailsByTerritory
    __ImageDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageDetailsByTerritory'), 'ImageDetailsByTerritory', '__httpddex_netxmlern351_Image_ImageDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 968, 9), )

    
    ImageDetailsByTerritory = property(__ImageDetailsByTerritory.value, __ImageDetailsByTerritory.set, None, 'A ddex:Composite containing details of the ern:Image which may vary according to ddex:Territory of release.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern351_Image_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 975, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 975, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The ddex:Flag indicating whether the ern:Image ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:Image data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_Image_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 980, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 980, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:Image as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __ImageType.name() : __ImageType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __ImageId.name() : __ImageId,
        __ResourceReference.name() : __ResourceReference,
        __Title.name() : __Title,
        __CreationDate.name() : __CreationDate,
        __ImageDetailsByTerritory.name() : __ImageDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Image', Image)


# Complex type {http://ddex.net/xml/ern/351}ImageDetailsByTerritory with content type ELEMENT_ONLY
class ImageDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of an ddex:Image which may vary according to ddex:Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ImageDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 986, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_ImageDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 992, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory to which the ddex:Image details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_ImageDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 997, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory to which the ddex:Image details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern351_ImageDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1004, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A ddex:Composite containing details of a ddex:Contributor to the ddex:Image.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern351_ImageDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1010, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Image.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern351_ImageDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1016, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A ddex:Composite containing details of the ddex:CLine for the ddex:Image.')

    
    # Element Description uses Python identifier Description
    __Description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Description'), 'Description', '__httpddex_netxmlern351_ImageDetailsByTerritory_Description', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1021, 9), )

    
    Description = property(__Description.value, __Description.set, None, 'A ddex:Composite containing a ddex:Description of the subject of the ddex:Image.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern351_ImageDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1026, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured on the ddex:Image.')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern351_ImageDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1031, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Image was originally published, whether for physical or electronic/online distribution.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_ImageDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1036, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern351_ImageDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1041, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A ddex:Composite containing details of a ddex:Description of the ddex:Image containing ddex:Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern351_ImageDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1046, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A ddex:Composite containing details of a ddex:Synopsis of the ddex:Image.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern351_ImageDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1051, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A ddex:Composite containing details of a ddex:Genre to which the ddex:Image belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern351_ImageDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1056, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A ddex:Composite containing details of the classification of the ddex:Image according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element TechnicalImageDetails uses Python identifier TechnicalImageDetails
    __TechnicalImageDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalImageDetails'), 'TechnicalImageDetails', '__httpddex_netxmlern351_ImageDetailsByTerritory_TechnicalImageDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1062, 9), )

    
    TechnicalImageDetails = property(__TechnicalImageDetails.value, __TechnicalImageDetails.set, None, 'A ddex:Composite containing technical details of the ddex:Image.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_ImageDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1069, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1069, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ddexC:ImageDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __CLine.name() : __CLine,
        __Description.name() : __Description,
        __CourtesyLine.name() : __CourtesyLine,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __TechnicalImageDetails.name() : __TechnicalImageDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ImageDetailsByTerritory', ImageDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/351}MIDI with content type ELEMENT_ONLY
class MIDI (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:MIDI."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MIDI')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1075, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MidiType uses Python identifier MidiType
    __MidiType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MidiType'), 'MidiType', '__httpddex_netxmlern351_MIDI_MidiType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1080, 9), )

    
    MidiType = property(__MidiType.value, __MidiType.set, None, 'A ddex:Composite containing details of the ddex:Type of the ern:MIDI.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern351_MIDI_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1085, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The ddex:Flag indicating whether the ern:MIDI is related to an ddex:Artist (=True) or not (=False).')

    
    # Element MidiId uses Python identifier MidiId
    __MidiId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MidiId'), 'MidiId', '__httpddex_netxmlern351_MIDI_MidiId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1090, 9), )

    
    MidiId = property(__MidiId.value, __MidiId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of the Midi.')

    
    # Element IndirectMidiId uses Python identifier IndirectMidiId
    __IndirectMidiId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectMidiId'), 'IndirectMidiId', '__httpddex_netxmlern351_MIDI_IndirectMidiId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1095, 9), )

    
    IndirectMidiId = property(__IndirectMidiId.value, __IndirectMidiId.set, None, 'A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:MIDI.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern351_MIDI_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1101, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:MIDI within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern351_MIDI_ReferenceTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1111, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:MIDI.')

    
    # Element InstrumentationDescription uses Python identifier InstrumentationDescription
    __InstrumentationDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), 'InstrumentationDescription', '__httpddex_netxmlern351_MIDI_InstrumentationDescription', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1116, 9), )

    
    InstrumentationDescription = property(__InstrumentationDescription.value, __InstrumentationDescription.set, None, 'A ddex:Composite containing a ddex:Description of the ddex:Type of instrumentation of the MusicalWork(s) in the ern:MIDI.')

    
    # Element IsMedley uses Python identifier IsMedley
    __IsMedley = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsMedley'), 'IsMedley', '__httpddex_netxmlern351_MIDI_IsMedley', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1121, 9), )

    
    IsMedley = property(__IsMedley.value, __IsMedley.set, None, 'The ddex:Flag indicating whether the ern:MIDI is a ddex:Medley (=True) or not (=False).')

    
    # Element IsPotpourri uses Python identifier IsPotpourri
    __IsPotpourri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), 'IsPotpourri', '__httpddex_netxmlern351_MIDI_IsPotpourri', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1126, 9), )

    
    IsPotpourri = property(__IsPotpourri.value, __IsPotpourri.set, None, 'The ddex:Flag indicating whether the ern:MIDI is a ddex:Potpourri (=True) or not (=False).')

    
    # Element IsInstrumental uses Python identifier IsInstrumental
    __IsInstrumental = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), 'IsInstrumental', '__httpddex_netxmlern351_MIDI_IsInstrumental', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1131, 9), )

    
    IsInstrumental = property(__IsInstrumental.value, __IsInstrumental.set, None, 'The ddex:Flag indicating whether the ern:MIDI is instrumental (=True) or not (=False).')

    
    # Element IsBackground uses Python identifier IsBackground
    __IsBackground = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBackground'), 'IsBackground', '__httpddex_netxmlern351_MIDI_IsBackground', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1136, 9), )

    
    IsBackground = property(__IsBackground.value, __IsBackground.set, None, 'The ddex:Flag indicating whether the ern:MIDI is used as background to other audio or audiovisual material (=True) or not (=False).')

    
    # Element IsHiddenResource uses Python identifier IsHiddenResource
    __IsHiddenResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), 'IsHiddenResource', '__httpddex_netxmlern351_MIDI_IsHiddenResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1141, 9), )

    
    IsHiddenResource = property(__IsHiddenResource.value, __IsHiddenResource.set, None, 'The ddex:Flag indicating whether the ern:MIDI is hidden in some way from the ddex:Consumer (=True) or not (=False).')

    
    # Element IsBonusResource uses Python identifier IsBonusResource
    __IsBonusResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), 'IsBonusResource', '__httpddex_netxmlern351_MIDI_IsBonusResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1146, 9), )

    
    IsBonusResource = property(__IsBonusResource.value, __IsBonusResource.set, None, 'The ddex:Flag indicating whether the ern:MIDI is additional to those on the original ddex:Release of which this is a ddex:Version (=True) or not (=False).')

    
    # Element IsComputerGenerated uses Python identifier IsComputerGenerated
    __IsComputerGenerated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated'), 'IsComputerGenerated', '__httpddex_netxmlern351_MIDI_IsComputerGenerated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1151, 9), )

    
    IsComputerGenerated = property(__IsComputerGenerated.value, __IsComputerGenerated.set, None, 'The ddex:Flag indicating whether the ern:MIDI is generated by a computer (=True) or not (=False).')

    
    # Element NoSilenceBefore uses Python identifier NoSilenceBefore
    __NoSilenceBefore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), 'NoSilenceBefore', '__httpddex_netxmlern351_MIDI_NoSilenceBefore', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1156, 9), )

    
    NoSilenceBefore = property(__NoSilenceBefore.value, __NoSilenceBefore.set, None, 'The ddex:Flag indicating whether the ern:MIDI is preceded by a period of silence (=False) or not (=True). ')

    
    # Element NoSilenceAfter uses Python identifier NoSilenceAfter
    __NoSilenceAfter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), 'NoSilenceAfter', '__httpddex_netxmlern351_MIDI_NoSilenceAfter', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1161, 9), )

    
    NoSilenceAfter = property(__NoSilenceAfter.value, __NoSilenceAfter.set, None, 'The ddex:Flag indicating whether the ern:MIDI is followed by a period of silence (=False) or not (=True). ')

    
    # Element PerformerInformationRequired uses Python identifier PerformerInformationRequired
    __PerformerInformationRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), 'PerformerInformationRequired', '__httpddex_netxmlern351_MIDI_PerformerInformationRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1166, 9), )

    
    PerformerInformationRequired = property(__PerformerInformationRequired.value, __PerformerInformationRequired.set, None, 'A ddex:Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the ern:MIDI.')

    
    # Element LanguageOfPerformance uses Python identifier LanguageOfPerformance
    __LanguageOfPerformance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), 'LanguageOfPerformance', '__httpddex_netxmlern351_MIDI_LanguageOfPerformance', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1171, 9), )

    
    LanguageOfPerformance = property(__LanguageOfPerformance.value, __LanguageOfPerformance.set, None, 'The ddex:Language of the ddex:Performance recorded in the ern:MIDI (represented by an ISO 639-2 iso639a2:LanguageCode).')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_MIDI_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1176, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The ddex:Duration of the ern:MIDI (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern351_MIDI_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1181, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:MIDI.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern351_MIDI_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1186, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:MIDI.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern351_MIDI_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1192, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:MIDI.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern351_MIDI_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1198, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:MIDI was created.')

    
    # Element MasteredDate uses Python identifier MasteredDate
    __MasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MasteredDate'), 'MasteredDate', '__httpddex_netxmlern351_MIDI_MasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1203, 9), )

    
    MasteredDate = property(__MasteredDate.value, __MasteredDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:MIDI was originally mastered (in either analogue or digital form).')

    
    # Element MidiDetailsByTerritory uses Python identifier MidiDetailsByTerritory
    __MidiDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MidiDetailsByTerritory'), 'MidiDetailsByTerritory', '__httpddex_netxmlern351_MIDI_MidiDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1208, 9), )

    
    MidiDetailsByTerritory = property(__MidiDetailsByTerritory.value, __MidiDetailsByTerritory.set, None, 'A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:MIDI which may vary according to ddex:Territory of release. ')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern351_MIDI_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1215, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1215, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The ddex:Flag indicating whether the ern:MIDI ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:MIDI data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_MIDI_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1220, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1220, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:MIDI as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __MidiType.name() : __MidiType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __MidiId.name() : __MidiId,
        __IndirectMidiId.name() : __IndirectMidiId,
        __ResourceReference.name() : __ResourceReference,
        __ReferenceTitle.name() : __ReferenceTitle,
        __InstrumentationDescription.name() : __InstrumentationDescription,
        __IsMedley.name() : __IsMedley,
        __IsPotpourri.name() : __IsPotpourri,
        __IsInstrumental.name() : __IsInstrumental,
        __IsBackground.name() : __IsBackground,
        __IsHiddenResource.name() : __IsHiddenResource,
        __IsBonusResource.name() : __IsBonusResource,
        __IsComputerGenerated.name() : __IsComputerGenerated,
        __NoSilenceBefore.name() : __NoSilenceBefore,
        __NoSilenceAfter.name() : __NoSilenceAfter,
        __PerformerInformationRequired.name() : __PerformerInformationRequired,
        __LanguageOfPerformance.name() : __LanguageOfPerformance,
        __Duration.name() : __Duration,
        __RightsAgreementId.name() : __RightsAgreementId,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __CreationDate.name() : __CreationDate,
        __MasteredDate.name() : __MasteredDate,
        __MidiDetailsByTerritory.name() : __MidiDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'MIDI', MIDI)


# Complex type {http://ddex.net/xml/ern/351}MidiDetailsByTerritory with content type ELEMENT_ONLY
class MidiDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:MIDI which may vary according to ddex:Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MidiDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1226, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_MidiDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1232, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory to which the ddex:MIDI details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_MidiDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1237, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory to which the ddex:MIDI details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_MidiDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1244, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ddex:MIDI.')

    
    # Element DisplayArtist uses Python identifier DisplayArtist
    __DisplayArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), 'DisplayArtist', '__httpddex_netxmlern351_MidiDetailsByTerritory_DisplayArtist', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1249, 9), )

    
    DisplayArtist = property(__DisplayArtist.value, __DisplayArtist.set, None, 'A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:MIDI. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern351_MidiDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1254, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A ddex:Composite containing details of a ddex:Contributor to the ddex:MIDI.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern351_MidiDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1260, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:MIDI.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern351_MidiDetailsByTerritory_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1266, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:MIDI.')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpddex_netxmlern351_MidiDetailsByTerritory_LabelName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1271, 9), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.')

    
    # Element RightsController uses Python identifier RightsController
    __RightsController = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsController'), 'RightsController', '__httpddex_netxmlern351_MidiDetailsByTerritory_RightsController', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1276, 9), )

    
    RightsController = property(__RightsController.value, __RightsController.set, None, 'A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:MIDI.')

    
    # Element RemasteredDate uses Python identifier RemasteredDate
    __RemasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), 'RemasteredDate', '__httpddex_netxmlern351_MidiDetailsByTerritory_RemasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1282, 9), )

    
    RemasteredDate = property(__RemasteredDate.value, __RemasteredDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:MIDI was re-mastered (usually digitally).')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern351_MidiDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1287, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:MIDI was originally published, whether for physical or electronic/online distribution.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern351_MidiDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1292, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A ddex:Composite containing details of the ddex:CLine for the ddex:MIDI.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern351_MidiDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1297, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for guests ddex:Artists or others featured on the ddex:MIDI.')

    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern351_MidiDetailsByTerritory_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1302, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the ddex:MIDI in a group of ddex:MIDIs in a ddex:Release.')

    
    # Element HostSoundCarrier uses Python identifier HostSoundCarrier
    __HostSoundCarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), 'HostSoundCarrier', '__httpddex_netxmlern351_MidiDetailsByTerritory_HostSoundCarrier', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1307, 9), )

    
    HostSoundCarrier = property(__HostSoundCarrier.value, __HostSoundCarrier.set, None, 'A ddex:Composite containing details of a ddex:HostSoundCarrier on which the ddex:MIDI appears (e.g., the CD on which it was originally released). This ddex:Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of ddex:MIDI information.')

    
    # Element MarketingComment uses Python identifier MarketingComment
    __MarketingComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MarketingComment'), 'MarketingComment', '__httpddex_netxmlern351_MidiDetailsByTerritory_MarketingComment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1313, 9), )

    
    MarketingComment = property(__MarketingComment.value, __MarketingComment.set, None, 'A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:MIDI.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern351_MidiDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1318, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A ddex:Composite containing details of a ddex:Genre to which the ddex:MIDI belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern351_MidiDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1323, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A ddex:Composite containing details of the classification of the ddex:MIDI according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_MidiDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1329, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern351_MidiDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1334, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A ddex:Composite containing details of a ddex:Description of the ddex:MIDI containing ddex:Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern351_MidiDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1339, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A ddex:Composite containing details of a ddex:Synopsis of the ddex:MIDI.')

    
    # Element TechnicalMidiDetails uses Python identifier TechnicalMidiDetails
    __TechnicalMidiDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalMidiDetails'), 'TechnicalMidiDetails', '__httpddex_netxmlern351_MidiDetailsByTerritory_TechnicalMidiDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1344, 9), )

    
    TechnicalMidiDetails = property(__TechnicalMidiDetails.value, __TechnicalMidiDetails.set, None, 'A ddex:Composite containing technical details of the ddex:MIDI.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_MidiDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1351, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1351, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ddexC:MidiDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __Title.name() : __Title,
        __DisplayArtist.name() : __DisplayArtist,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __RightsAgreementId.name() : __RightsAgreementId,
        __LabelName.name() : __LabelName,
        __RightsController.name() : __RightsController,
        __RemasteredDate.name() : __RemasteredDate,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __CLine.name() : __CLine,
        __CourtesyLine.name() : __CourtesyLine,
        __SequenceNumber.name() : __SequenceNumber,
        __HostSoundCarrier.name() : __HostSoundCarrier,
        __MarketingComment.name() : __MarketingComment,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __TechnicalMidiDetails.name() : __TechnicalMidiDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'MidiDetailsByTerritory', MidiDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/351}PhysicalReturns with content type ELEMENT_ONLY
class PhysicalReturns (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of physical returns."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PhysicalReturns')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1357, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PhysicalReturnsAllowed uses Python identifier PhysicalReturnsAllowed
    __PhysicalReturnsAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PhysicalReturnsAllowed'), 'PhysicalReturnsAllowed', '__httpddex_netxmlern351_PhysicalReturns_PhysicalReturnsAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1362, 9), )

    
    PhysicalReturnsAllowed = property(__PhysicalReturnsAllowed.value, __PhysicalReturnsAllowed.set, None, 'The ddex:Flag indicating whether physical returns are allowed (=True) or not (=False).')

    
    # Element LatestDateForPhysicalReturns uses Python identifier LatestDateForPhysicalReturns
    __LatestDateForPhysicalReturns = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LatestDateForPhysicalReturns'), 'LatestDateForPhysicalReturns', '__httpddex_netxmlern351_PhysicalReturns_LatestDateForPhysicalReturns', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1367, 9), )

    
    LatestDateForPhysicalReturns = property(__LatestDateForPhysicalReturns.value, __LatestDateForPhysicalReturns.set, None, 'A Date which is the latest one for physical returns (in ISO 8601:2004 format: YYYY-MM-DD).')

    _ElementMap.update({
        __PhysicalReturnsAllowed.name() : __PhysicalReturnsAllowed,
        __LatestDateForPhysicalReturns.name() : __LatestDateForPhysicalReturns
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PhysicalReturns', PhysicalReturns)


# Complex type {http://ddex.net/xml/ern/351}PreviewDetails with content type ELEMENT_ONLY
class PreviewDetails (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a preview."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PreviewDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1374, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartType uses Python identifier PartType
    __PartType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartType'), 'PartType', '__httpddex_netxmlern351_PreviewDetails_PartType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1379, 9), )

    
    PartType = property(__PartType.value, __PartType.set, None, 'A ddex:Composite containing a ddex:Description of the ddex:Type of ddex:Part that the preview relates to, e.g. chorus or intro.')

    
    # Element TopLeftCorner uses Python identifier TopLeftCorner
    __TopLeftCorner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TopLeftCorner'), 'TopLeftCorner', '__httpddex_netxmlern351_PreviewDetails_TopLeftCorner', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1384, 9), )

    
    TopLeftCorner = property(__TopLeftCorner.value, __TopLeftCorner.set, None, 'The position of the preview measured in ddex:Pixels or millimetres from the top left corner of the ddex:Resource.')

    
    # Element BottomRightCorner uses Python identifier BottomRightCorner
    __BottomRightCorner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BottomRightCorner'), 'BottomRightCorner', '__httpddex_netxmlern351_PreviewDetails_BottomRightCorner', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1389, 9), )

    
    BottomRightCorner = property(__BottomRightCorner.value, __BottomRightCorner.set, None, 'The position of the preview measured in ddex:Pixels or millimetres  from the bottom right corner of the ddex:Resource.')

    
    # Element ExpressionType uses Python identifier ExpressionType
    __ExpressionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExpressionType'), 'ExpressionType', '__httpddex_netxmlern351_PreviewDetails_ExpressionType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1394, 9), )

    
    ExpressionType = property(__ExpressionType.value, __ExpressionType.set, None, 'A ddex:Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview).')

    _ElementMap.update({
        __PartType.name() : __PartType,
        __TopLeftCorner.name() : __TopLeftCorner,
        __BottomRightCorner.name() : __BottomRightCorner,
        __ExpressionType.name() : __ExpressionType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'PreviewDetails', PreviewDetails)


# Complex type {http://ddex.net/xml/ern/351}RelatedReleaseOfferSet with content type ELEMENT_ONLY
class RelatedReleaseOfferSet (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of one or more offers related to one or more ddex:Releases."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RelatedReleaseOfferSet')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1401, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern351_RelatedReleaseOfferSet_ReleaseId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1407, 12), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A ddex:Composite containing details of ddex:ReleaseIds of the Release(s) for which the offer(s) are available.')

    
    # Element ReleaseDescription uses Python identifier ReleaseDescription
    __ReleaseDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDescription'), 'ReleaseDescription', '__httpddex_netxmlern351_RelatedReleaseOfferSet_ReleaseDescription', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1412, 12), )

    
    ReleaseDescription = property(__ReleaseDescription.value, __ReleaseDescription.set, None, 'A ddex:Composite containing a ddex:Description of the Release(s) for which the offer(s) are available.This ddex:Element is designed to be used to describe entire collections or repertoires, and is not to be used to list individual ddex:Releases by xs:ID or ddex:Title.')

    
    # Element Deal uses Python identifier Deal
    __Deal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Deal'), 'Deal', '__httpddex_netxmlern351_RelatedReleaseOfferSet_Deal', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1418, 9), )

    
    Deal = property(__Deal.value, __Deal.set, None, 'A ddex:Composite containing details of a ddex:Deal that is available as an offer related to the Release(s). If no ddex:Deal is provided, the parent ddex:Release and the ddex:Releases listed in the ern:RelatedReleaseOfferSet are bundled and offered under the ddex:ReleaseOffer associated with the parent ddex:Release.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_RelatedReleaseOfferSet_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1424, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1424, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:RelatedReleaseOfferSet as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __ReleaseId.name() : __ReleaseId,
        __ReleaseDescription.name() : __ReleaseDescription,
        __Deal.name() : __Deal
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'RelatedReleaseOfferSet', RelatedReleaseOfferSet)


# Complex type {http://ddex.net/xml/ern/351}Release with content type ELEMENT_ONLY
class Release (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:DDEX ddex:Release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Release')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1430, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern351_Release_ReleaseId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1435, 9), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A ddex:Composite containing details of ddex:ReleaseIds. If available, a ddex:GRid has to be used. If the ern:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ern:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.')

    
    # Element ReleaseReference uses Python identifier ReleaseReference
    __ReleaseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseReference'), 'ReleaseReference', '__httpddex_netxmlern351_Release_ReleaseReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1440, 9), )

    
    ReleaseReference = property(__ReleaseReference.value, __ReleaseReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:Release. Used to link the ern:Release to one or more Deal(s). This is a ddex:LocalReleaseAnchor starting with the letter R.')

    
    # Element ExternalResourceLink uses Python identifier ExternalResourceLink
    __ExternalResourceLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExternalResourceLink'), 'ExternalResourceLink', '__httpddex_netxmlern351_Release_ExternalResourceLink', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1450, 9), )

    
    ExternalResourceLink = property(__ExternalResourceLink.value, __ExternalResourceLink.set, None, 'A ddex:Composite containing details of promotional or other material related to the ern:Release.')

    
    # Element SalesReportingProxyReleaseId uses Python identifier SalesReportingProxyReleaseId
    __SalesReportingProxyReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SalesReportingProxyReleaseId'), 'SalesReportingProxyReleaseId', '__httpddex_netxmlern351_Release_SalesReportingProxyReleaseId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1456, 9), )

    
    SalesReportingProxyReleaseId = property(__SalesReportingProxyReleaseId.value, __SalesReportingProxyReleaseId.set, None, 'A ddex:Composite containing details of the A ddex:Composite containing details of the ddex:SalesReportingProxyReleaseId.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern351_Release_ReferenceTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1462, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:Release.')

    
    # Element ReleaseResourceReferenceList uses Python identifier ReleaseResourceReferenceList
    __ReleaseResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReferenceList'), 'ReleaseResourceReferenceList', '__httpddex_netxmlern351_Release_ReleaseResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1468, 12), )

    
    ReleaseResourceReferenceList = property(__ReleaseResourceReferenceList.value, __ReleaseResourceReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:Resources contained in the ern:Release.')

    
    # Element ResourceOmissionReason uses Python identifier ResourceOmissionReason
    __ResourceOmissionReason = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceOmissionReason'), 'ResourceOmissionReason', '__httpddex_netxmlern351_Release_ResourceOmissionReason', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1474, 12), )

    
    ResourceOmissionReason = property(__ResourceOmissionReason.value, __ResourceOmissionReason.set, None, 'A ddex:Composite containing details of a ddex:ResourceOmissionReason.')

    
    # Element ReleaseCollectionReferenceList uses Python identifier ReleaseCollectionReferenceList
    __ReleaseCollectionReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseCollectionReferenceList'), 'ReleaseCollectionReferenceList', '__httpddex_netxmlern351_Release_ReleaseCollectionReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1480, 9), )

    
    ReleaseCollectionReferenceList = property(__ReleaseCollectionReferenceList.value, __ReleaseCollectionReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:Collections contained in the ern:Release.')

    
    # Element ReleaseType uses Python identifier ReleaseType
    __ReleaseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseType'), 'ReleaseType', '__httpddex_netxmlern351_Release_ReleaseType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1486, 9), )

    
    ReleaseType = property(__ReleaseType.value, __ReleaseType.set, None, 'A ddex:Composite containing details of the form in which a ddex:ReleaseCreator anticipates offering the ern:Release to ddex:Consumers. This may be overridden by the ddex:ReleaseType for specific Territories as specified in the ReleaseDetailsByTerritory ddex:Composite.')

    
    # Element ReleaseDetailsByTerritory uses Python identifier ReleaseDetailsByTerritory
    __ReleaseDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDetailsByTerritory'), 'ReleaseDetailsByTerritory', '__httpddex_netxmlern351_Release_ReleaseDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1491, 9), )

    
    ReleaseDetailsByTerritory = property(__ReleaseDetailsByTerritory.value, __ReleaseDetailsByTerritory.set, None, 'A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:Release which may vary according to ddex:Territory of release.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_Release_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1497, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The sum of the ddex:Durations of all ddex:Resources contained in the ern:Release (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern351_Release_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1502, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:Release.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern351_Release_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1507, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A ddex:Composite containing details of the ddex:PLine for the ern:Release.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern351_Release_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1512, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A ddex:Composite containing details of the ddex:CLine for the ern:Release.')

    
    # Element ArtistProfilePage uses Python identifier ArtistProfilePage
    __ArtistProfilePage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ArtistProfilePage'), 'ArtistProfilePage', '__httpddex_netxmlern351_Release_ArtistProfilePage', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1517, 9), )

    
    ArtistProfilePage = property(__ArtistProfilePage.value, __ArtistProfilePage.set, None, 'A ddex:Composite containing details of a ddex:WebPage for the ddex:Artist.')

    
    # Element GlobalReleaseDate uses Python identifier GlobalReleaseDate
    __GlobalReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GlobalReleaseDate'), 'GlobalReleaseDate', '__httpddex_netxmlern351_Release_GlobalReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1523, 9), )

    
    GlobalReleaseDate = property(__GlobalReleaseDate.value, __GlobalReleaseDate.set, None, 'A ddex:Composite containing details of the Date of the ddex:Event in which the ddex:Release was or will be first made globally available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element GlobalOriginalReleaseDate uses Python identifier GlobalOriginalReleaseDate
    __GlobalOriginalReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GlobalOriginalReleaseDate'), 'GlobalOriginalReleaseDate', '__httpddex_netxmlern351_Release_GlobalOriginalReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1528, 9), )

    
    GlobalOriginalReleaseDate = property(__GlobalOriginalReleaseDate.value, __GlobalOriginalReleaseDate.set, None, 'A ddex:Composite containing details of the Date of the ddex:Event in which the collection of tracks for the ddex:Release (e.g. the equivalent physical album on vinyl) was or will be first made globally available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_Release_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1534, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1534, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:Release as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    
    # Attribute IsMainRelease uses Python identifier IsMainRelease
    __IsMainRelease = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsMainRelease'), 'IsMainRelease', '__httpddex_netxmlern351_Release_IsMainRelease', pyxb.binding.datatypes.boolean)
    __IsMainRelease._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1539, 6)
    __IsMainRelease._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1539, 6)
    
    IsMainRelease = property(__IsMainRelease.value, __IsMainRelease.set, None, 'The ddex:Flag indicating whether the ddex:Release is a main one as defined in the relevant Profile Standard (=True) or not (=False). This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __ReleaseId.name() : __ReleaseId,
        __ReleaseReference.name() : __ReleaseReference,
        __ExternalResourceLink.name() : __ExternalResourceLink,
        __SalesReportingProxyReleaseId.name() : __SalesReportingProxyReleaseId,
        __ReferenceTitle.name() : __ReferenceTitle,
        __ReleaseResourceReferenceList.name() : __ReleaseResourceReferenceList,
        __ResourceOmissionReason.name() : __ResourceOmissionReason,
        __ReleaseCollectionReferenceList.name() : __ReleaseCollectionReferenceList,
        __ReleaseType.name() : __ReleaseType,
        __ReleaseDetailsByTerritory.name() : __ReleaseDetailsByTerritory,
        __Duration.name() : __Duration,
        __RightsAgreementId.name() : __RightsAgreementId,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine,
        __ArtistProfilePage.name() : __ArtistProfilePage,
        __GlobalReleaseDate.name() : __GlobalReleaseDate,
        __GlobalOriginalReleaseDate.name() : __GlobalOriginalReleaseDate
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode,
        __IsMainRelease.name() : __IsMainRelease
    })
Namespace.addCategoryObject('typeBinding', 'Release', Release)


# Complex type {http://ddex.net/xml/ern/351}ReleaseDeal with content type ELEMENT_ONLY
class ReleaseDeal (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of one or more ddex:Deals pertaining to one or more ddex:Releases."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseDeal')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1545, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DealReleaseReference uses Python identifier DealReleaseReference
    __DealReleaseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealReleaseReference'), 'DealReleaseReference', '__httpddex_netxmlern351_ReleaseDeal_DealReleaseReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1550, 9), )

    
    DealReleaseReference = property(__DealReleaseReference.value, __DealReleaseReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of a ddex:Release in the ddex:Deal. This is a ddex:LocalReleaseAnchorReference starting with the letter R.')

    
    # Element Deal uses Python identifier Deal
    __Deal = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Deal'), 'Deal', '__httpddex_netxmlern351_ReleaseDeal_Deal', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1560, 9), )

    
    Deal = property(__Deal.value, __Deal.set, None, 'A ddex:Composite containing details of a ddex:Deal governing the Usage of all ddex:Releases identified in the ern:ReleaseDeal ddex:Composite.')

    
    # Element EffectiveDate uses Python identifier EffectiveDate
    __EffectiveDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EffectiveDate'), 'EffectiveDate', '__httpddex_netxmlern351_ReleaseDeal_EffectiveDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1565, 9), )

    
    EffectiveDate = property(__EffectiveDate.value, __EffectiveDate.set, None, 'The Date at which the ddex:MessageRecipient is expected to cancel all ddex:Deals for the ddex:Release and replace them with the ddex:Deals provided within the current ddex:Message. The EffectiveDate is typically the date on which the ern:NewReleaseMessage is being sent.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_ReleaseDeal_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1571, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1571, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:ReleaseDeal as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __DealReleaseReference.name() : __DealReleaseReference,
        __Deal.name() : __Deal,
        __EffectiveDate.name() : __EffectiveDate
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseDeal', ReleaseDeal)


# Complex type {http://ddex.net/xml/ern/351}ReleaseDetailsByTerritory with content type ELEMENT_ONLY
class ReleaseDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Release which may vary according to ddex:Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1577, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1583, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory to which the ddexC:ReleaseSummaryDetailsByTerritory apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1588, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory to which the ddexC:ReleaseSummaryDetailsByTerritory do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.')

    
    # Element DisplayArtistName uses Python identifier DisplayArtistName
    __DisplayArtistName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtistName'), 'DisplayArtistName', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_DisplayArtistName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1595, 9), )

    
    DisplayArtistName = property(__DisplayArtistName.value, __DisplayArtistName.set, None, 'A ddex:Composite containing the ddex:Name to be used by a ddex:DSP when presenting ddex:Artist details of the ddex:Release to a ddex:Consumer.')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_LabelName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1600, 9), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'A ddex:Composite containing the ddex:Name of the ddex:Label for the ddex:Release.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1605, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:Release.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1610, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ddex:Release.')

    
    # Element DisplayArtist uses Python identifier DisplayArtist
    __DisplayArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), 'DisplayArtist', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_DisplayArtist', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1615, 9), )

    
    DisplayArtist = property(__DisplayArtist.value, __DisplayArtist.set, None, 'A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:Release. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element IsMultiArtistCompilation uses Python identifier IsMultiArtistCompilation
    __IsMultiArtistCompilation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsMultiArtistCompilation'), 'IsMultiArtistCompilation', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_IsMultiArtistCompilation', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1620, 9), )

    
    IsMultiArtistCompilation = property(__IsMultiArtistCompilation.value, __IsMultiArtistCompilation.set, None, 'The ddex:Flag indicating whether the ddex:Release is a multiartist compilation (=True) or not (=False).')

    
    # Element AdministratingRecordCompany uses Python identifier AdministratingRecordCompany
    __AdministratingRecordCompany = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdministratingRecordCompany'), 'AdministratingRecordCompany', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_AdministratingRecordCompany', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1625, 9), )

    
    AdministratingRecordCompany = property(__AdministratingRecordCompany.value, __AdministratingRecordCompany.set, None, 'A ddex:Composite containing details of the ddex:AdministratingRecordCompany for the ddex:Release. ')

    
    # Element ReleaseType uses Python identifier ReleaseType
    __ReleaseType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseType'), 'ReleaseType', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_ReleaseType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1631, 9), )

    
    ReleaseType = property(__ReleaseType.value, __ReleaseType.set, None, 'A ddex:Composite containing details of the form in which a ddex:ReleaseCreator anticipates offering the ddex:Release to ddex:Consumers. This overrides the ddex:ReleaseType specified globally for the ddex:Release.')

    
    # Element RelatedRelease uses Python identifier RelatedRelease
    __RelatedRelease = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RelatedRelease'), 'RelatedRelease', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_RelatedRelease', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1636, 9), )

    
    RelatedRelease = property(__RelatedRelease.value, __RelatedRelease.set, None, 'A ddex:Composite containing details of a ddex:Release (or a ddex:PhysicalProduct or a ddex:DigitalProduct derived from such a ddex:Release) which is related to this ddex:Release.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1642, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A ddex:Composite containing details of the classification of the ddex:Release according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element AvRating uses Python identifier AvRating
    __AvRating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AvRating'), 'AvRating', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_AvRating', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1648, 9), )

    
    AvRating = property(__AvRating.value, __AvRating.set, None, 'A ddex:Composite containing details of a rating for the ddex:Release.')

    
    # Element MarketingComment uses Python identifier MarketingComment
    __MarketingComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MarketingComment'), 'MarketingComment', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_MarketingComment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1653, 9), )

    
    MarketingComment = property(__MarketingComment.value, __MarketingComment.set, None, 'A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:Release.')

    
    # Element ResourceGroup uses Python identifier ResourceGroup
    __ResourceGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroup'), 'ResourceGroup', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_ResourceGroup', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1658, 9), )

    
    ResourceGroup = property(__ResourceGroup.value, __ResourceGroup.set, None, 'A ddex:Composite containing details of a group of some or all of the ddex:Resources in the ddex:Release. ResourceGroups are used to signal groupings or sequences of ddex:Resources within a ddex:Release. Examples include individual carriers in a multi-carrier ddex:Release or classical ddex:Work groupings as well as the default order of ddex:Resources within a ddex:Release.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1664, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A ddex:Composite containing details of a ddex:Genre to which the ddex:Release belongs.')

    
    # Element ReleaseDate uses Python identifier ReleaseDate
    __ReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseDate'), 'ReleaseDate', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_ReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1669, 9), )

    
    ReleaseDate = property(__ReleaseDate.value, __ReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Release was or will be first made available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element OriginalReleaseDate uses Python identifier OriginalReleaseDate
    __OriginalReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate'), 'OriginalReleaseDate', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_OriginalReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1674, 9), )

    
    OriginalReleaseDate = property(__OriginalReleaseDate.value, __OriginalReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the collection of tracks for the ddex:Release (e.g. the equivalent physical album on vinyl) was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element OriginalDigitalReleaseDate uses Python identifier OriginalDigitalReleaseDate
    __OriginalDigitalReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalDigitalReleaseDate'), 'OriginalDigitalReleaseDate', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_OriginalDigitalReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1679, 9), )

    
    OriginalDigitalReleaseDate = property(__OriginalDigitalReleaseDate.value, __OriginalDigitalReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Release was or will be first made available in electronic/online format for Usage (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1685, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain any related ddex:Release ddex:File.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1691, 12), )

    
    File = property(__File.value, __File.set, None, 'A ddex:Composite containing details of a related ddex:Release ddex:File that a ddex:DSP can obtain.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1697, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A ddex:Composite containing details of a ddex:Description of the ddex:Release containing ddex:Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1702, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A ddex:Composite containing details of a ddex:Synopsis of the ddex:Release.')

    
    # Element Character uses Python identifier Character
    __Character = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Character'), 'Character', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_Character', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1707, 9), )

    
    Character = property(__Character.value, __Character.set, None, 'A ddex:Composite containing details of a ddex:Character in the ddex:Release. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element NumberOfUnitsPerPhysicalRelease uses Python identifier NumberOfUnitsPerPhysicalRelease
    __NumberOfUnitsPerPhysicalRelease = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfUnitsPerPhysicalRelease'), 'NumberOfUnitsPerPhysicalRelease', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_NumberOfUnitsPerPhysicalRelease', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1712, 9), )

    
    NumberOfUnitsPerPhysicalRelease = property(__NumberOfUnitsPerPhysicalRelease.value, __NumberOfUnitsPerPhysicalRelease.set, None, 'A number of units (typically a CD or a DVD) contained in a physical ddex:Release. This Element is for boxed sets.')

    
    # Element DisplayConductor uses Python identifier DisplayConductor
    __DisplayConductor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), 'DisplayConductor', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_DisplayConductor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1717, 9), )

    
    DisplayConductor = property(__DisplayConductor.value, __DisplayConductor.set, None, 'A ddex:Composite containing details of a ddex:DisplayConductor for the ddex:Release. A ddex:DisplayConductor may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_ReleaseDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1723, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1723, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ddexC:ReleaseSummaryDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __DisplayArtistName.name() : __DisplayArtistName,
        __LabelName.name() : __LabelName,
        __RightsAgreementId.name() : __RightsAgreementId,
        __Title.name() : __Title,
        __DisplayArtist.name() : __DisplayArtist,
        __IsMultiArtistCompilation.name() : __IsMultiArtistCompilation,
        __AdministratingRecordCompany.name() : __AdministratingRecordCompany,
        __ReleaseType.name() : __ReleaseType,
        __RelatedRelease.name() : __RelatedRelease,
        __ParentalWarningType.name() : __ParentalWarningType,
        __AvRating.name() : __AvRating,
        __MarketingComment.name() : __MarketingComment,
        __ResourceGroup.name() : __ResourceGroup,
        __Genre.name() : __Genre,
        __ReleaseDate.name() : __ReleaseDate,
        __OriginalReleaseDate.name() : __OriginalReleaseDate,
        __OriginalDigitalReleaseDate.name() : __OriginalDigitalReleaseDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __Character.name() : __Character,
        __NumberOfUnitsPerPhysicalRelease.name() : __NumberOfUnitsPerPhysicalRelease,
        __DisplayConductor.name() : __DisplayConductor
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseDetailsByTerritory', ReleaseDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/351}ReleaseList with content type ELEMENT_ONLY
class ReleaseList (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of one or more ddex:Releases."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReleaseList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1729, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Release uses Python identifier Release
    __Release = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Release'), 'Release', '__httpddex_netxmlern351_ReleaseList_Release', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1734, 9), )

    
    Release = property(__Release.value, __Release.set, None, 'A ddex:Composite containing details of a ddex:DDEX ddex:Release.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_ReleaseList_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1740, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1740, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:ReleaseList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __Release.name() : __Release
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ReleaseList', ReleaseList)


# Complex type {http://ddex.net/xml/ern/351}ResourceContributor with content type ELEMENT_ONLY
class ResourceContributor (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of the ddex:Name, ddex:Identifier and role(s) of a ddex:Contributor to a ddex:Resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceContributor')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1746, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern351_ResourceContributor_PartyId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1752, 12), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern351_ResourceContributor_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1758, 15), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A ddex:Composite containing details of the PartyName(s).')

    
    # Element ResourceContributorRole uses Python identifier ResourceContributorRole
    __ResourceContributorRole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributorRole'), 'ResourceContributorRole', '__httpddex_netxmlern351_ResourceContributor_ResourceContributorRole', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1770, 9), )

    
    ResourceContributorRole = property(__ResourceContributorRole.value, __ResourceContributorRole.set, None, 'A ddex:Composite containing details of a role played by the ddex:Contributor.')

    
    # Element IsFeaturedArtist uses Python identifier IsFeaturedArtist
    __IsFeaturedArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsFeaturedArtist'), 'IsFeaturedArtist', '__httpddex_netxmlern351_ResourceContributor_IsFeaturedArtist', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1776, 9), )

    
    IsFeaturedArtist = property(__IsFeaturedArtist.value, __IsFeaturedArtist.set, None, 'A ddex:Flag indicating whether the ddex:Contributor is a featured ddex:Artist (=True) or not (=False).')

    
    # Element IsContractedArtist uses Python identifier IsContractedArtist
    __IsContractedArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsContractedArtist'), 'IsContractedArtist', '__httpddex_netxmlern351_ResourceContributor_IsContractedArtist', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1781, 9), )

    
    IsContractedArtist = property(__IsContractedArtist.value, __IsContractedArtist.set, None, 'A ddex:Flag indicating whether the ddex:Contributor is an ddex:Artist that has a contract for its part in creating the ddex:Resource (=True) or not (=False).')

    
    # Element TerritoryOfPerformance uses Python identifier TerritoryOfPerformance
    __TerritoryOfPerformance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryOfPerformance'), 'TerritoryOfPerformance', '__httpddex_netxmlern351_ResourceContributor_TerritoryOfPerformance', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1786, 9), )

    
    TerritoryOfPerformance = property(__TerritoryOfPerformance.value, __TerritoryOfPerformance.set, None, 'A country of performance (represented by an ISO 3166-1 iso3166a2:TerritoryCode).')

    
    # Element InstrumentType uses Python identifier InstrumentType
    __InstrumentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'InstrumentType'), 'InstrumentType', '__httpddex_netxmlern351_ResourceContributor_InstrumentType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1792, 9), )

    
    InstrumentType = property(__InstrumentType.value, __InstrumentType.set, None, 'A ddex:Type of musical instrument played by the ddex:Artist.')

    
    # Element ArtistDelegatedUsageRights uses Python identifier ArtistDelegatedUsageRights
    __ArtistDelegatedUsageRights = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ArtistDelegatedUsageRights'), 'ArtistDelegatedUsageRights', '__httpddex_netxmlern351_ResourceContributor_ArtistDelegatedUsageRights', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1797, 9), )

    
    ArtistDelegatedUsageRights = property(__ArtistDelegatedUsageRights.value, __ArtistDelegatedUsageRights.set, None, 'A ddex:Composite containing details of the kinds of usage for which rights have been delegated by the ddex:Artist.')

    
    # Element Sex uses Python identifier Sex
    __Sex = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Sex'), 'Sex', '__httpddex_netxmlern351_ResourceContributor_Sex', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1803, 9), )

    
    Sex = property(__Sex.value, __Sex.set, None, 'Sex')

    
    # Element DateAndPlaceOfBirth uses Python identifier DateAndPlaceOfBirth
    __DateAndPlaceOfBirth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfBirth'), 'DateAndPlaceOfBirth', '__httpddex_netxmlern351_ResourceContributor_DateAndPlaceOfBirth', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1808, 9), )

    
    DateAndPlaceOfBirth = property(__DateAndPlaceOfBirth.value, __DateAndPlaceOfBirth.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of birth.')

    
    # Element DateAndPlaceOfDeath uses Python identifier DateAndPlaceOfDeath
    __DateAndPlaceOfDeath = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfDeath'), 'DateAndPlaceOfDeath', '__httpddex_netxmlern351_ResourceContributor_DateAndPlaceOfDeath', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1813, 9), )

    
    DateAndPlaceOfDeath = property(__DateAndPlaceOfDeath.value, __DateAndPlaceOfDeath.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of death.')

    
    # Element PrimaryRole uses Python identifier PrimaryRole
    __PrimaryRole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PrimaryRole'), 'PrimaryRole', '__httpddex_netxmlern351_ResourceContributor_PrimaryRole', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1818, 9), )

    
    PrimaryRole = property(__PrimaryRole.value, __PrimaryRole.set, None, 'A ddex:Composite containing details of the primary role played by the ddex:Artist in relation to other ddex:Artists.')

    
    # Element PrimaryInstrumentType uses Python identifier PrimaryInstrumentType
    __PrimaryInstrumentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PrimaryInstrumentType'), 'PrimaryInstrumentType', '__httpddex_netxmlern351_ResourceContributor_PrimaryInstrumentType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1823, 9), )

    
    PrimaryInstrumentType = property(__PrimaryInstrumentType.value, __PrimaryInstrumentType.set, None, 'A ddex:Type of (musical) instrument primarily played by the ddex:Artist.')

    
    # Element GoverningAgreementType uses Python identifier GoverningAgreementType
    __GoverningAgreementType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GoverningAgreementType'), 'GoverningAgreementType', '__httpddex_netxmlern351_ResourceContributor_GoverningAgreementType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1828, 9), )

    
    GoverningAgreementType = property(__GoverningAgreementType.value, __GoverningAgreementType.set, None, "A ddex:Composite containing details of a ddex:Type of an agreement that covers the ddex:Artist's participation in making a ddex:SoundRecording.")

    
    # Element ContactInformation uses Python identifier ContactInformation
    __ContactInformation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContactInformation'), 'ContactInformation', '__httpddex_netxmlern351_ResourceContributor_ContactInformation', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1833, 9), )

    
    ContactInformation = property(__ContactInformation.value, __ContactInformation.set, None, 'A ddex:Composite containing details of contact ddex:Identifiers of the ddex:Artist.')

    
    # Element TerritoryOfResidency uses Python identifier TerritoryOfResidency
    __TerritoryOfResidency = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryOfResidency'), 'TerritoryOfResidency', '__httpddex_netxmlern351_ResourceContributor_TerritoryOfResidency', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1838, 9), )

    
    TerritoryOfResidency = property(__TerritoryOfResidency.value, __TerritoryOfResidency.set, None, 'The country of main residency of the ddex:Artist (represented by an ISO 3166-1 iso3166a2:TerritoryCode).')

    
    # Element AdditionalRoles uses Python identifier AdditionalRoles
    __AdditionalRoles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AdditionalRoles'), 'AdditionalRoles', '__httpddex_netxmlern351_ResourceContributor_AdditionalRoles', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1843, 9), )

    
    AdditionalRoles = property(__AdditionalRoles.value, __AdditionalRoles.set, None, 'A ddex:Composite containing details of the additional roles played by the ddex:Artist.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern351_ResourceContributor_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1849, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A ddex:Composite containing details of a typical or main ddex:Genre relating to the ddex:Artist.')

    
    # Element Membership uses Python identifier Membership
    __Membership = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Membership'), 'Membership', '__httpddex_netxmlern351_ResourceContributor_Membership', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1854, 9), )

    
    Membership = property(__Membership.value, __Membership.set, None, 'A ddex:Composite containing details of a membership in a collective rights management organization.')

    
    # Attribute SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern351_ResourceContributor_SequenceNumber', pyxb.binding.datatypes.integer)
    __SequenceNumber._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1860, 6)
    __SequenceNumber._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1860, 6)
    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the ddexC:ResourceContributor in a group of ResourceContributors that have contributed to a ddex:Resource. This is represented in an XML schema as an XML ddex:Attribute. ')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __ResourceContributorRole.name() : __ResourceContributorRole,
        __IsFeaturedArtist.name() : __IsFeaturedArtist,
        __IsContractedArtist.name() : __IsContractedArtist,
        __TerritoryOfPerformance.name() : __TerritoryOfPerformance,
        __InstrumentType.name() : __InstrumentType,
        __ArtistDelegatedUsageRights.name() : __ArtistDelegatedUsageRights,
        __Sex.name() : __Sex,
        __DateAndPlaceOfBirth.name() : __DateAndPlaceOfBirth,
        __DateAndPlaceOfDeath.name() : __DateAndPlaceOfDeath,
        __PrimaryRole.name() : __PrimaryRole,
        __PrimaryInstrumentType.name() : __PrimaryInstrumentType,
        __GoverningAgreementType.name() : __GoverningAgreementType,
        __ContactInformation.name() : __ContactInformation,
        __TerritoryOfResidency.name() : __TerritoryOfResidency,
        __AdditionalRoles.name() : __AdditionalRoles,
        __Genre.name() : __Genre,
        __Membership.name() : __Membership
    })
    _AttributeMap.update({
        __SequenceNumber.name() : __SequenceNumber
    })
Namespace.addCategoryObject('typeBinding', 'ResourceContributor', ResourceContributor)


# Complex type {http://ddex.net/xml/ern/351}ResourceGroup with content type ELEMENT_ONLY
class ResourceGroup (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:ResourceGroup. ResourceGroups are used to signal groupings or sequences of ddex:Resources within a ddex:Release. Examples include individual carriers in a multi-carrier ddex:Release or classical ddex:Work groupings as well as the default order of ddex:Resources within a ddex:Release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceGroup')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1866, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_ResourceGroup_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1871, 9), )

    
    Title = property(__Title.value, __Title.set, None, "A ddex:Composite containing details of a ddex:Title of the ern:ResourceGroup. Typically this will apply to 'sub' ddex:ResourceGroups within a hierarchy, e.g., different ddex:Albums in a ddex:Set.")

    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern351_ResourceGroup_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1876, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the ern:ResourceGroup within all ddex:ResourceGroups at this level. The default value is 1, and the value must be incremented by 1 for each ern:ResourceGroup occurring at a particular level. The ddex:SequenceNumber is unique within its ddex:ResourceGroupLevelNumber.')

    
    # Element DisplayArtist uses Python identifier DisplayArtist
    __DisplayArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), 'DisplayArtist', '__httpddex_netxmlern351_ResourceGroup_DisplayArtist', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1881, 9), )

    
    DisplayArtist = property(__DisplayArtist.value, __DisplayArtist.set, None, 'A ddex:Composite containing details of the ddex:DisplayArtist for the ern:ResourceGroup. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element DisplayConductor uses Python identifier DisplayConductor
    __DisplayConductor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), 'DisplayConductor', '__httpddex_netxmlern351_ResourceGroup_DisplayConductor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1886, 9), )

    
    DisplayConductor = property(__DisplayConductor.value, __DisplayConductor.set, None, 'A ddex:Composite containing details of a ddex:DisplayConductor for the ern:ResourceGroup. A ddex:DisplayConductor may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element DisplayComposer uses Python identifier DisplayComposer
    __DisplayComposer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayComposer'), 'DisplayComposer', '__httpddex_netxmlern351_ResourceGroup_DisplayComposer', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1891, 9), )

    
    DisplayComposer = property(__DisplayComposer.value, __DisplayComposer.set, None, 'A ddex:Composite containing details of a ddex:DisplayComposer for the ern:ResourceGroup. A ddex:DisplayComposer may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern351_ResourceGroup_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1896, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A ddex:Composite containing details of a ddex:Contributor to this ern:ResourceGroup. This includes roles such as the compiler of the ern:ResourceGroup, and may summarize details of ddex:Contributors to individual ddex:SoundRecordings or other content.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern351_ResourceGroup_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1902, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A ddex:Composite containing details of an indirect ddex:Contributor to this ern:ResourceGroup.')

    
    # Element ResourceGroup uses Python identifier ResourceGroup
    __ResourceGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroup'), 'ResourceGroup', '__httpddex_netxmlern351_ResourceGroup_ResourceGroup', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1908, 9), )

    
    ResourceGroup = property(__ResourceGroup.value, __ResourceGroup.set, None, 'A ern:ResourceGroup contained within this ern:ResourceGroup. ResourceGroups are used to signal groupings or sequences of ddex:Resources within a ddex:Release. Examples include individual carriers in a multi-carrier ddex:Release or classical ddex:Work groupings as well as the default order of ddex:Resources within a ddex:Release.')

    
    # Element ResourceGroupContentItem uses Python identifier ResourceGroupContentItem
    __ResourceGroupContentItem = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroupContentItem'), 'ResourceGroupContentItem', '__httpddex_netxmlern351_ResourceGroup_ResourceGroupContentItem', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1915, 12), )

    
    ResourceGroupContentItem = property(__ResourceGroupContentItem.value, __ResourceGroupContentItem.set, None, 'A ddex:Composite containing details of a ddex:Resource contained in the ern:ResourceGroup.')

    
    # Element ResourceGroupResourceReferenceList uses Python identifier ResourceGroupResourceReferenceList
    __ResourceGroupResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroupResourceReferenceList'), 'ResourceGroupResourceReferenceList', '__httpddex_netxmlern351_ResourceGroup_ResourceGroupResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1921, 12), )

    
    ResourceGroupResourceReferenceList = property(__ResourceGroupResourceReferenceList.value, __ResourceGroupResourceReferenceList.set, None, 'A ddex:Composite containing details of a ddex:Resource contained in the ern:ResourceGroup.')

    
    # Element ResourceGroupReleaseReference uses Python identifier ResourceGroupReleaseReference
    __ResourceGroupReleaseReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceGroupReleaseReference'), 'ResourceGroupReleaseReference', '__httpddex_netxmlern351_ResourceGroup_ResourceGroupReleaseReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1929, 12), )

    
    ResourceGroupReleaseReference = property(__ResourceGroupReleaseReference.value, __ResourceGroupReleaseReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of a ddex:Release which has the same content as the ern:ResourceGroup. This is a ddex:LocalReleaseAnchorReference starting with the letter R.')

    
    # Element ReleaseId uses Python identifier ReleaseId
    __ReleaseId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReleaseId'), 'ReleaseId', '__httpddex_netxmlern351_ResourceGroup_ReleaseId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1939, 12), )

    
    ReleaseId = property(__ReleaseId.value, __ReleaseId.set, None, 'A ddex:Composite containing details of ddex:ReleaseIds of a ddex:Release which has the same content as the ern:ResourceGroup. If available, a ddex:GRid has to be used. If the ddex:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ddex:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_ResourceGroup_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1946, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1946, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:ResourceGroup as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __Title.name() : __Title,
        __SequenceNumber.name() : __SequenceNumber,
        __DisplayArtist.name() : __DisplayArtist,
        __DisplayConductor.name() : __DisplayConductor,
        __DisplayComposer.name() : __DisplayComposer,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __ResourceGroup.name() : __ResourceGroup,
        __ResourceGroupContentItem.name() : __ResourceGroupContentItem,
        __ResourceGroupResourceReferenceList.name() : __ResourceGroupResourceReferenceList,
        __ResourceGroupReleaseReference.name() : __ResourceGroupReleaseReference,
        __ReleaseId.name() : __ReleaseId
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ResourceGroup', ResourceGroup)


# Complex type {http://ddex.net/xml/ern/351}ResourceList with content type ELEMENT_ONLY
class ResourceList (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of one or more ddex:Resources. ResourceList provides a simple means of aggregating ddex:Resources without any explicit sequencing or grouping: if that is needed it is provided by the ddex:ResourceGroup ddex:Composite. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceList')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1952, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SoundRecording uses Python identifier SoundRecording
    __SoundRecording = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecording'), 'SoundRecording', '__httpddex_netxmlern351_ResourceList_SoundRecording', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1957, 9), )

    
    SoundRecording = property(__SoundRecording.value, __SoundRecording.set, None, 'A ddex:Composite containing details of a ddex:SoundRecording.')

    
    # Element MIDI uses Python identifier MIDI
    __MIDI = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MIDI'), 'MIDI', '__httpddex_netxmlern351_ResourceList_MIDI', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1963, 9), )

    
    MIDI = property(__MIDI.value, __MIDI.set, None, 'A ddex:Composite containing details of a ddex:MIDI.')

    
    # Element Video uses Python identifier Video
    __Video = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Video'), 'Video', '__httpddex_netxmlern351_ResourceList_Video', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1968, 9), )

    
    Video = property(__Video.value, __Video.set, None, 'A ddex:Composite containing details of a ddex:Video.')

    
    # Element Image uses Python identifier Image
    __Image = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Image'), 'Image', '__httpddex_netxmlern351_ResourceList_Image', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1973, 9), )

    
    Image = property(__Image.value, __Image.set, None, 'A ddex:Composite containing details of an ddex:Image.')

    
    # Element Text uses Python identifier Text
    __Text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Text'), 'Text', '__httpddex_netxmlern351_ResourceList_Text', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1978, 9), )

    
    Text = property(__Text.value, __Text.set, None, 'A ddex:Composite containing details of a ddex:Text.')

    
    # Element SheetMusic uses Python identifier SheetMusic
    __SheetMusic = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SheetMusic'), 'SheetMusic', '__httpddex_netxmlern351_ResourceList_SheetMusic', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1983, 9), )

    
    SheetMusic = property(__SheetMusic.value, __SheetMusic.set, None, 'A ddex:Composite containing details of a ddex:Text.')

    
    # Element Software uses Python identifier Software
    __Software = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Software'), 'Software', '__httpddex_netxmlern351_ResourceList_Software', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1988, 9), )

    
    Software = property(__Software.value, __Software.set, None, 'A ddex:Composite containing details of an item of ddex:Software.')

    
    # Element UserDefinedResource uses Python identifier UserDefinedResource
    __UserDefinedResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedResource'), 'UserDefinedResource', '__httpddex_netxmlern351_ResourceList_UserDefinedResource', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1993, 9), )

    
    UserDefinedResource = property(__UserDefinedResource.value, __UserDefinedResource.set, None, 'A ddex:Composite containing details of a ddex:UserDefinedResource.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_ResourceList_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2000, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2000, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:ResourceList as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __SoundRecording.name() : __SoundRecording,
        __MIDI.name() : __MIDI,
        __Video.name() : __Video,
        __Image.name() : __Image,
        __Text.name() : __Text,
        __SheetMusic.name() : __SheetMusic,
        __Software.name() : __Software,
        __UserDefinedResource.name() : __UserDefinedResource
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'ResourceList', ResourceList)


# Complex type {http://ddex.net/xml/ern/351}ResourceUsage with content type ELEMENT_ONLY
class ResourceUsage (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of one or more Usages that govern a ddex:Resource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ResourceUsage')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2006, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element DealResourceReference uses Python identifier DealResourceReference
    __DealResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DealResourceReference'), 'DealResourceReference', '__httpddex_netxmlern351_ResourceUsage_DealResourceReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2011, 9), )

    
    DealResourceReference = property(__DealResourceReference.value, __DealResourceReference.set, None, 'A ddex:Reference for a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.')

    
    # Element Usage uses Python identifier Usage
    __Usage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Usage'), 'Usage', '__httpddex_netxmlern351_ResourceUsage_Usage', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2021, 9), )

    
    Usage = property(__Usage.value, __Usage.set, None, 'A ddex:Composite containing the ddex:Types and number of Usages applicable to the ddex:Resource.')

    _ElementMap.update({
        __DealResourceReference.name() : __DealResourceReference,
        __Usage.name() : __Usage
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'ResourceUsage', ResourceUsage)


# Complex type {http://ddex.net/xml/ern/351}RightsClaimPolicy with content type ELEMENT_ONLY
class RightsClaimPolicy (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a rights claim policy."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RightsClaimPolicy')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2028, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Condition uses Python identifier Condition
    __Condition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Condition'), 'Condition', '__httpddex_netxmlern351_RightsClaimPolicy_Condition', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2033, 9), )

    
    Condition = property(__Condition.value, __Condition.set, None, 'A ddex:Composite containing details of conditions.')

    
    # Element RightsClaimPolicyType uses Python identifier RightsClaimPolicyType
    __RightsClaimPolicyType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicyType'), 'RightsClaimPolicyType', '__httpddex_netxmlern351_RightsClaimPolicy_RightsClaimPolicyType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2038, 9), )

    
    RightsClaimPolicyType = property(__RightsClaimPolicyType.value, __RightsClaimPolicyType.set, None, 'A ddex:Type of rights claim policy.')

    _ElementMap.update({
        __Condition.name() : __Condition,
        __RightsClaimPolicyType.name() : __RightsClaimPolicyType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'RightsClaimPolicy', RightsClaimPolicy)


# Complex type {http://ddex.net/xml/ern/351}RightsController with content type ELEMENT_ONLY
class RightsController (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:RightsController. ddex:RightsControllers are typicallydescribed by ddex:Name, ddex:Identifier and role(s)."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RightsController')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2045, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartyId uses Python identifier PartyId
    __PartyId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyId'), 'PartyId', '__httpddex_netxmlern351_RightsController_PartyId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2051, 12), )

    
    PartyId = property(__PartyId.value, __PartyId.set, None, 'A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.')

    
    # Element PartyName uses Python identifier PartyName
    __PartyName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartyName'), 'PartyName', '__httpddex_netxmlern351_RightsController_PartyName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2057, 15), )

    
    PartyName = property(__PartyName.value, __PartyName.set, None, 'A ddex:Composite containing details of the PartyName(s).')

    
    # Element RightsControllerRole uses Python identifier RightsControllerRole
    __RightsControllerRole = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsControllerRole'), 'RightsControllerRole', '__httpddex_netxmlern351_RightsController_RightsControllerRole', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2069, 9), )

    
    RightsControllerRole = property(__RightsControllerRole.value, __RightsControllerRole.set, None, 'A role that describes the ddex:Party involved in the administration of ddex:Rights.')

    
    # Element RightShareUnknown uses Python identifier RightShareUnknown
    __RightShareUnknown = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightShareUnknown'), 'RightShareUnknown', '__httpddex_netxmlern351_RightsController_RightShareUnknown', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2076, 12), )

    
    RightShareUnknown = property(__RightShareUnknown.value, __RightShareUnknown.set, None, 'The ddex:Flag indicating whether the ddex:RightSharePercentage is unknown (=True) or not (=False).')

    
    # Element RightSharePercentage uses Python identifier RightSharePercentage
    __RightSharePercentage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightSharePercentage'), 'RightSharePercentage', '__httpddex_netxmlern351_RightsController_RightSharePercentage', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2081, 12), )

    
    RightSharePercentage = property(__RightSharePercentage.value, __RightSharePercentage.set, None, "The share of the licensed Rights owned by the ddexC:RightsController. ddex:RightShare information is given as a xs:decimal value (e.g. '0.125' represents 12.5%). If no information is given, 100% is assumed.")

    
    # Element RightsControllerType uses Python identifier RightsControllerType
    __RightsControllerType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsControllerType'), 'RightsControllerType', '__httpddex_netxmlern351_RightsController_RightsControllerType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2087, 9), )

    
    RightsControllerType = property(__RightsControllerType.value, __RightsControllerType.set, None, 'A type of the ddex:RightsController.')

    
    # Element TerritoryOfRegistration uses Python identifier TerritoryOfRegistration
    __TerritoryOfRegistration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryOfRegistration'), 'TerritoryOfRegistration', '__httpddex_netxmlern351_RightsController_TerritoryOfRegistration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2092, 9), )

    
    TerritoryOfRegistration = property(__TerritoryOfRegistration.value, __TerritoryOfRegistration.set, None, 'The country of registration (represented by an ISO 3166-1 iso3166a2:TerritoryCode).')

    
    # Element StartDate uses Python identifier StartDate
    __StartDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartDate'), 'StartDate', '__httpddex_netxmlern351_RightsController_StartDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2097, 9), )

    
    StartDate = property(__StartDate.value, __StartDate.set, None, 'The Date that marks the beginning of the title (in ISO 8601:2004 format: YYYY-MM-DD). This cannot be a Date in the future.')

    
    # Element EndDate uses Python identifier EndDate
    __EndDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EndDate'), 'EndDate', '__httpddex_netxmlern351_RightsController_EndDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2102, 9), )

    
    EndDate = property(__EndDate.value, __EndDate.set, None, 'The Date that marks the end of the title (in ISO 8601:2004 format: YYYY-MM-DD).')

    
    # Attribute SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern351_RightsController_SequenceNumber', pyxb.binding.datatypes.integer)
    __SequenceNumber._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2108, 6)
    __SequenceNumber._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2108, 6)
    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the ddexC:RightsController in a group of ddex:RightsControllers. This is represented in an XML schema as an XML ddex:Attribute. ')

    _ElementMap.update({
        __PartyId.name() : __PartyId,
        __PartyName.name() : __PartyName,
        __RightsControllerRole.name() : __RightsControllerRole,
        __RightShareUnknown.name() : __RightShareUnknown,
        __RightSharePercentage.name() : __RightSharePercentage,
        __RightsControllerType.name() : __RightsControllerType,
        __TerritoryOfRegistration.name() : __TerritoryOfRegistration,
        __StartDate.name() : __StartDate,
        __EndDate.name() : __EndDate
    })
    _AttributeMap.update({
        __SequenceNumber.name() : __SequenceNumber
    })
Namespace.addCategoryObject('typeBinding', 'RightsController', RightsController)


# Complex type {http://ddex.net/xml/ern/351}SheetMusic with content type ELEMENT_ONLY
class SheetMusic (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:SheetMusic."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SheetMusic')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2114, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SheetMusicType uses Python identifier SheetMusicType
    __SheetMusicType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SheetMusicType'), 'SheetMusicType', '__httpddex_netxmlern351_SheetMusic_SheetMusicType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2119, 9), )

    
    SheetMusicType = property(__SheetMusicType.value, __SheetMusicType.set, None, 'A ddex:Composite containing details of the ddex:Type of the ern:SheetMusic.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern351_SheetMusic_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2124, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The ddex:Flag indicating whether the ern:SheetMusic is related to an ddex:Artist (=True) or not (=False).')

    
    # Element SheetMusicId uses Python identifier SheetMusicId
    __SheetMusicId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SheetMusicId'), 'SheetMusicId', '__httpddex_netxmlern351_SheetMusic_SheetMusicId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2129, 9), )

    
    SheetMusicId = property(__SheetMusicId.value, __SheetMusicId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of the ern:SheetMusic.')

    
    # Element IndirectSheetMusicId uses Python identifier IndirectSheetMusicId
    __IndirectSheetMusicId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectSheetMusicId'), 'IndirectSheetMusicId', '__httpddex_netxmlern351_SheetMusic_IndirectSheetMusicId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2134, 9), )

    
    IndirectSheetMusicId = property(__IndirectSheetMusicId.value, __IndirectSheetMusicId.set, None, 'A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:SheetMusic.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern351_SheetMusic_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2140, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ddexC:SheetMusic within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.')

    
    # Element LanguageOfLyrics uses Python identifier LanguageOfLyrics
    __LanguageOfLyrics = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageOfLyrics'), 'LanguageOfLyrics', '__httpddex_netxmlern351_SheetMusic_LanguageOfLyrics', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2150, 9), )

    
    LanguageOfLyrics = property(__LanguageOfLyrics.value, __LanguageOfLyrics.set, None, 'The ddex:Language of the lyrics of the ern:SheetMusic (represented by an ISO 639-2 iso639a2:LanguageCode).')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern351_SheetMusic_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2155, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) related to the ern:SheetMusic.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern351_SheetMusic_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2160, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:SheetMusic.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern351_SheetMusic_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2166, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:SheetMusic.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern351_SheetMusic_ReferenceTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2172, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:SheetMusic.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern351_SheetMusic_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2177, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:SheetMusic was created.')

    
    # Element SheetMusicDetailsByTerritory uses Python identifier SheetMusicDetailsByTerritory
    __SheetMusicDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SheetMusicDetailsByTerritory'), 'SheetMusicDetailsByTerritory', '__httpddex_netxmlern351_SheetMusic_SheetMusicDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2182, 9), )

    
    SheetMusicDetailsByTerritory = property(__SheetMusicDetailsByTerritory.value, __SheetMusicDetailsByTerritory.set, None, 'A ddex:Composite containing details of the ern:SheetMusic which may vary according to ddex:Territory of release.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern351_SheetMusic_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2189, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2189, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The ddex:Flag indicating whether the ern:SheetMusic ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:SheetMusic data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_SheetMusic_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2194, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2194, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:SheetMusic as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __SheetMusicType.name() : __SheetMusicType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __SheetMusicId.name() : __SheetMusicId,
        __IndirectSheetMusicId.name() : __IndirectSheetMusicId,
        __ResourceReference.name() : __ResourceReference,
        __LanguageOfLyrics.name() : __LanguageOfLyrics,
        __RightsAgreementId.name() : __RightsAgreementId,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __ReferenceTitle.name() : __ReferenceTitle,
        __CreationDate.name() : __CreationDate,
        __SheetMusicDetailsByTerritory.name() : __SheetMusicDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'SheetMusic', SheetMusic)


# Complex type {http://ddex.net/xml/ern/351}SheetMusicDetailsByTerritory with content type ELEMENT_ONLY
class SheetMusicDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:SheetMusic which may vary according to ddex:Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SheetMusicDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2200, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2206, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory to which the ddex:SheetMusic details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2211, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory to which the ddex:SheetMusic details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2218, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ddex:SheetMusic.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2223, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A ddex:Composite containing details of a ddex:Contributor to the ddex:SheetMusic.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2229, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SheetMusic.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2235, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A ddex:Composite containing details of the ddex:CLine for the ddex:SheetMusic.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2240, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:SheetMusic.')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2245, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SheetMusic was originally published, whether for physical or electronic/online distribution.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2250, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2255, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A ddex:Composite containing details of a ddex:Genre to which the ddex:SheetMusic belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2260, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A ddex:Composite containing details of the classification of the ddex:SheetMusic according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element TechnicalSheetMusicDetails uses Python identifier TechnicalSheetMusicDetails
    __TechnicalSheetMusicDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalSheetMusicDetails'), 'TechnicalSheetMusicDetails', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_TechnicalSheetMusicDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2266, 9), )

    
    TechnicalSheetMusicDetails = property(__TechnicalSheetMusicDetails.value, __TechnicalSheetMusicDetails.set, None, 'A ddex:Composite containing technical details of the ddex:SheetMusic.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_SheetMusicDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2273, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2273, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ddexC:SheetMusicDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __Title.name() : __Title,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __CLine.name() : __CLine,
        __CourtesyLine.name() : __CourtesyLine,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __TechnicalSheetMusicDetails.name() : __TechnicalSheetMusicDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'SheetMusicDetailsByTerritory', SheetMusicDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/351}Software with content type ELEMENT_ONLY
class Software (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of an item of ddex:Software."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Software')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2279, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SoftwareType uses Python identifier SoftwareType
    __SoftwareType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoftwareType'), 'SoftwareType', '__httpddex_netxmlern351_Software_SoftwareType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2284, 9), )

    
    SoftwareType = property(__SoftwareType.value, __SoftwareType.set, None, 'A ddex:Composite containing details of the ddex:Type of the ern:Software.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern351_Software_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2289, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The ddex:Flag indicating whether the ern:Software is related to an ddex:Artist (=True) or not (=False).')

    
    # Element SoftwareId uses Python identifier SoftwareId
    __SoftwareId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoftwareId'), 'SoftwareId', '__httpddex_netxmlern351_Software_SoftwareId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2294, 9), )

    
    SoftwareId = property(__SoftwareId.value, __SoftwareId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of the ern:Software.')

    
    # Element IndirectSoftwareId uses Python identifier IndirectSoftwareId
    __IndirectSoftwareId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectSoftwareId'), 'IndirectSoftwareId', '__httpddex_netxmlern351_Software_IndirectSoftwareId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2299, 9), )

    
    IndirectSoftwareId = property(__IndirectSoftwareId.value, __IndirectSoftwareId.set, None, 'A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:Software.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern351_Software_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2305, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:Software within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern351_Software_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2315, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:Software.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern351_Software_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2321, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:Software.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_Software_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2327, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ern:Software.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern351_Software_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2332, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Software was created.')

    
    # Element SoftwareDetailsByTerritory uses Python identifier SoftwareDetailsByTerritory
    __SoftwareDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoftwareDetailsByTerritory'), 'SoftwareDetailsByTerritory', '__httpddex_netxmlern351_Software_SoftwareDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2337, 9), )

    
    SoftwareDetailsByTerritory = property(__SoftwareDetailsByTerritory.value, __SoftwareDetailsByTerritory.set, None, 'A ddex:Composite containing details of the ern:Software which may vary according to ddex:Territory of release.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern351_Software_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2344, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2344, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The ddex:Flag indicating whether the ern:Software ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:Software data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_Software_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2349, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2349, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:Software as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __SoftwareType.name() : __SoftwareType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __SoftwareId.name() : __SoftwareId,
        __IndirectSoftwareId.name() : __IndirectSoftwareId,
        __ResourceReference.name() : __ResourceReference,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __Title.name() : __Title,
        __CreationDate.name() : __CreationDate,
        __SoftwareDetailsByTerritory.name() : __SoftwareDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Software', Software)


# Complex type {http://ddex.net/xml/ern/351}SoftwareDetailsByTerritory with content type ELEMENT_ONLY
class SoftwareDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:Software application which may vary according to ddex:Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoftwareDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2355, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2361, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory to which the ddex:Software details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2366, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory to which the ddex:Software details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2373, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A ddex:Composite containing details of a ddex:Contributor to the ddex:Software.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2379, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Software.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2385, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A ddex:Composite containing details of the ddex:PLine for the ddex:Software.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2390, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A ddex:Composite containing details of the ddex:CLine for the ddex:Software.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2395, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:Software.')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2400, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Software was originally published, whether for physical or electronic/online distribution.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2405, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2410, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A ddex:Composite containing details of a ddex:Description of the ddex:Software containing ddex:Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2415, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A ddex:Composite containing details of a ddex:Synopsis of the ddex:Software.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2420, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A ddex:Composite containing details of a ddex:Genre to which the ddex:Software belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2425, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A ddex:Composite containing details of the classification of the ddex:Software according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element TechnicalSoftwareDetails uses Python identifier TechnicalSoftwareDetails
    __TechnicalSoftwareDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalSoftwareDetails'), 'TechnicalSoftwareDetails', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_TechnicalSoftwareDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2431, 9), )

    
    TechnicalSoftwareDetails = property(__TechnicalSoftwareDetails.value, __TechnicalSoftwareDetails.set, None, 'A ddex:Composite containing technical details of the ddex:Software.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_SoftwareDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2438, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2438, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ddexC:SoftwareDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine,
        __CourtesyLine.name() : __CourtesyLine,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __TechnicalSoftwareDetails.name() : __TechnicalSoftwareDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'SoftwareDetailsByTerritory', SoftwareDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/351}SoundRecording with content type ELEMENT_ONLY
class SoundRecording (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:SoundRecording."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoundRecording')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2444, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SoundRecordingType uses Python identifier SoundRecordingType
    __SoundRecordingType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecordingType'), 'SoundRecordingType', '__httpddex_netxmlern351_SoundRecording_SoundRecordingType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2449, 9), )

    
    SoundRecordingType = property(__SoundRecordingType.value, __SoundRecordingType.set, None, 'A ddex:Composite containing details of the ddex:Type of the ern:SoundRecording.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern351_SoundRecording_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2454, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording is related to an ddex:Artist (=True) or not (=False).')

    
    # Element SoundRecordingId uses Python identifier SoundRecordingId
    __SoundRecordingId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecordingId'), 'SoundRecordingId', '__httpddex_netxmlern351_SoundRecording_SoundRecordingId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2459, 9), )

    
    SoundRecordingId = property(__SoundRecordingId.value, __SoundRecordingId.set, None, 'A ddex:Composite containing details of a ddex:SoundRecordingId.')

    
    # Element IndirectSoundRecordingId uses Python identifier IndirectSoundRecordingId
    __IndirectSoundRecordingId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectSoundRecordingId'), 'IndirectSoundRecordingId', '__httpddex_netxmlern351_SoundRecording_IndirectSoundRecordingId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2464, 9), )

    
    IndirectSoundRecordingId = property(__IndirectSoundRecordingId.value, __IndirectSoundRecordingId.set, None, 'A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:SoundRecording.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern351_SoundRecording_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2470, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:SoundRecording within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern351_SoundRecording_ReferenceTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2480, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:SoundRecording.')

    
    # Element InstrumentationDescription uses Python identifier InstrumentationDescription
    __InstrumentationDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), 'InstrumentationDescription', '__httpddex_netxmlern351_SoundRecording_InstrumentationDescription', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2485, 9), )

    
    InstrumentationDescription = property(__InstrumentationDescription.value, __InstrumentationDescription.set, None, 'A ddex:Composite containing a ddex:Description of the ddex:Type of instrumentation of the MusicalWork(s) in the ern:SoundRecording.')

    
    # Element IsMedley uses Python identifier IsMedley
    __IsMedley = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsMedley'), 'IsMedley', '__httpddex_netxmlern351_SoundRecording_IsMedley', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2490, 9), )

    
    IsMedley = property(__IsMedley.value, __IsMedley.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording is a ddex:Medley (=True) or not (=False).')

    
    # Element IsPotpourri uses Python identifier IsPotpourri
    __IsPotpourri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), 'IsPotpourri', '__httpddex_netxmlern351_SoundRecording_IsPotpourri', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2495, 9), )

    
    IsPotpourri = property(__IsPotpourri.value, __IsPotpourri.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording is a ddex:Potpourri (=True) or not (=False).')

    
    # Element IsInstrumental uses Python identifier IsInstrumental
    __IsInstrumental = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), 'IsInstrumental', '__httpddex_netxmlern351_SoundRecording_IsInstrumental', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2500, 9), )

    
    IsInstrumental = property(__IsInstrumental.value, __IsInstrumental.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording is instrumental (=True) or not (=False).')

    
    # Element IsBackground uses Python identifier IsBackground
    __IsBackground = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBackground'), 'IsBackground', '__httpddex_netxmlern351_SoundRecording_IsBackground', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2505, 9), )

    
    IsBackground = property(__IsBackground.value, __IsBackground.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording is used as background to other audio or audiovisual material (=True) or not (=False).')

    
    # Element IsHiddenResource uses Python identifier IsHiddenResource
    __IsHiddenResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), 'IsHiddenResource', '__httpddex_netxmlern351_SoundRecording_IsHiddenResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2510, 9), )

    
    IsHiddenResource = property(__IsHiddenResource.value, __IsHiddenResource.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording is hidden in some way from the ddex:Consumer (=True) or not (=False).')

    
    # Element IsBonusResource uses Python identifier IsBonusResource
    __IsBonusResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), 'IsBonusResource', '__httpddex_netxmlern351_SoundRecording_IsBonusResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2515, 9), )

    
    IsBonusResource = property(__IsBonusResource.value, __IsBonusResource.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording is additional to those on the original ddex:Release of which this is a ddex:Version (=True) or not (=False).')

    
    # Element IsComputerGenerated uses Python identifier IsComputerGenerated
    __IsComputerGenerated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated'), 'IsComputerGenerated', '__httpddex_netxmlern351_SoundRecording_IsComputerGenerated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2520, 9), )

    
    IsComputerGenerated = property(__IsComputerGenerated.value, __IsComputerGenerated.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording is generated by a computer (=True) or not (=False).')

    
    # Element IsRemastered uses Python identifier IsRemastered
    __IsRemastered = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsRemastered'), 'IsRemastered', '__httpddex_netxmlern351_SoundRecording_IsRemastered', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2525, 9), )

    
    IsRemastered = property(__IsRemastered.value, __IsRemastered.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording is remastered (=True) or not (=False).')

    
    # Element NoSilenceBefore uses Python identifier NoSilenceBefore
    __NoSilenceBefore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), 'NoSilenceBefore', '__httpddex_netxmlern351_SoundRecording_NoSilenceBefore', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2530, 9), )

    
    NoSilenceBefore = property(__NoSilenceBefore.value, __NoSilenceBefore.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording is preceded by a period of silence (=False) or not (=True). ')

    
    # Element NoSilenceAfter uses Python identifier NoSilenceAfter
    __NoSilenceAfter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), 'NoSilenceAfter', '__httpddex_netxmlern351_SoundRecording_NoSilenceAfter', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2535, 9), )

    
    NoSilenceAfter = property(__NoSilenceAfter.value, __NoSilenceAfter.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording is followed by a period of silence (=False) or not (=True). ')

    
    # Element PerformerInformationRequired uses Python identifier PerformerInformationRequired
    __PerformerInformationRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), 'PerformerInformationRequired', '__httpddex_netxmlern351_SoundRecording_PerformerInformationRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2540, 9), )

    
    PerformerInformationRequired = property(__PerformerInformationRequired.value, __PerformerInformationRequired.set, None, 'A ddex:Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the ern:SoundRecording.')

    
    # Element LanguageOfPerformance uses Python identifier LanguageOfPerformance
    __LanguageOfPerformance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), 'LanguageOfPerformance', '__httpddex_netxmlern351_SoundRecording_LanguageOfPerformance', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2545, 9), )

    
    LanguageOfPerformance = property(__LanguageOfPerformance.value, __LanguageOfPerformance.set, None, 'The ddex:Language of the ddex:Performance recorded in the ern:SoundRecording (represented by an ISO 639-2 iso639a2:LanguageCode).')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_SoundRecording_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2550, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The ddex:Duration of the ern:SoundRecording (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern351_SoundRecording_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2555, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:SoundRecording.')

    
    # Element SoundRecordingCollectionReferenceList uses Python identifier SoundRecordingCollectionReferenceList
    __SoundRecordingCollectionReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReferenceList'), 'SoundRecordingCollectionReferenceList', '__httpddex_netxmlern351_SoundRecording_SoundRecordingCollectionReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2560, 9), )

    
    SoundRecordingCollectionReferenceList = property(__SoundRecordingCollectionReferenceList.value, __SoundRecordingCollectionReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:Collections. The referenced ddex:Collection has to be of ddex:CollectionType ddex:AudioChapter.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern351_SoundRecording_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2566, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:SoundRecording.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern351_SoundRecording_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2572, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:SoundRecording.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern351_SoundRecording_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2578, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:SoundRecording was created.')

    
    # Element MasteredDate uses Python identifier MasteredDate
    __MasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MasteredDate'), 'MasteredDate', '__httpddex_netxmlern351_SoundRecording_MasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2583, 9), )

    
    MasteredDate = property(__MasteredDate.value, __MasteredDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:SoundRecording was originally mastered (in either analogue or digital form).')

    
    # Element SoundRecordingDetailsByTerritory uses Python identifier SoundRecordingDetailsByTerritory
    __SoundRecordingDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundRecordingDetailsByTerritory'), 'SoundRecordingDetailsByTerritory', '__httpddex_netxmlern351_SoundRecording_SoundRecordingDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2588, 9), )

    
    SoundRecordingDetailsByTerritory = property(__SoundRecordingDetailsByTerritory.value, __SoundRecordingDetailsByTerritory.set, None, 'A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:SoundRecording which may vary according to ddex:Territory.')

    
    # Element TerritoryOfCommissioning uses Python identifier TerritoryOfCommissioning
    __TerritoryOfCommissioning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning'), 'TerritoryOfCommissioning', '__httpddex_netxmlern351_SoundRecording_TerritoryOfCommissioning', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2594, 9), )

    
    TerritoryOfCommissioning = property(__TerritoryOfCommissioning.value, __TerritoryOfCommissioning.set, None, 'The country of commissioning (represented by an ISO 3166-1 iso3166a2:TerritoryCode).')

    
    # Element NumberOfFeaturedArtists uses Python identifier NumberOfFeaturedArtists
    __NumberOfFeaturedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists'), 'NumberOfFeaturedArtists', '__httpddex_netxmlern351_SoundRecording_NumberOfFeaturedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2599, 9), )

    
    NumberOfFeaturedArtists = property(__NumberOfFeaturedArtists.value, __NumberOfFeaturedArtists.set, None, 'The number of ddex:FeaturedArtists associated with the ddex:SoundRecording.')

    
    # Element NumberOfNonFeaturedArtists uses Python identifier NumberOfNonFeaturedArtists
    __NumberOfNonFeaturedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists'), 'NumberOfNonFeaturedArtists', '__httpddex_netxmlern351_SoundRecording_NumberOfNonFeaturedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2604, 9), )

    
    NumberOfNonFeaturedArtists = property(__NumberOfNonFeaturedArtists.value, __NumberOfNonFeaturedArtists.set, None, 'The number of ddex:NonFeaturedArtists associated with the ddex:SoundRecording.')

    
    # Element NumberOfContractedArtists uses Python identifier NumberOfContractedArtists
    __NumberOfContractedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists'), 'NumberOfContractedArtists', '__httpddex_netxmlern351_SoundRecording_NumberOfContractedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2609, 9), )

    
    NumberOfContractedArtists = property(__NumberOfContractedArtists.value, __NumberOfContractedArtists.set, None, 'The number of ddex:ContractedArtists associated with the ddex:SoundRecording.')

    
    # Element NumberOfNonContractedArtists uses Python identifier NumberOfNonContractedArtists
    __NumberOfNonContractedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists'), 'NumberOfNonContractedArtists', '__httpddex_netxmlern351_SoundRecording_NumberOfNonContractedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2614, 9), )

    
    NumberOfNonContractedArtists = property(__NumberOfNonContractedArtists.value, __NumberOfNonContractedArtists.set, None, 'The number of ddex:NonContractedArtists associated with the ddex:SoundRecording.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern351_SoundRecording_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2620, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2620, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:SoundRecording data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_SoundRecording_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2625, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2625, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:SoundRecording as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __SoundRecordingType.name() : __SoundRecordingType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __SoundRecordingId.name() : __SoundRecordingId,
        __IndirectSoundRecordingId.name() : __IndirectSoundRecordingId,
        __ResourceReference.name() : __ResourceReference,
        __ReferenceTitle.name() : __ReferenceTitle,
        __InstrumentationDescription.name() : __InstrumentationDescription,
        __IsMedley.name() : __IsMedley,
        __IsPotpourri.name() : __IsPotpourri,
        __IsInstrumental.name() : __IsInstrumental,
        __IsBackground.name() : __IsBackground,
        __IsHiddenResource.name() : __IsHiddenResource,
        __IsBonusResource.name() : __IsBonusResource,
        __IsComputerGenerated.name() : __IsComputerGenerated,
        __IsRemastered.name() : __IsRemastered,
        __NoSilenceBefore.name() : __NoSilenceBefore,
        __NoSilenceAfter.name() : __NoSilenceAfter,
        __PerformerInformationRequired.name() : __PerformerInformationRequired,
        __LanguageOfPerformance.name() : __LanguageOfPerformance,
        __Duration.name() : __Duration,
        __RightsAgreementId.name() : __RightsAgreementId,
        __SoundRecordingCollectionReferenceList.name() : __SoundRecordingCollectionReferenceList,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __CreationDate.name() : __CreationDate,
        __MasteredDate.name() : __MasteredDate,
        __SoundRecordingDetailsByTerritory.name() : __SoundRecordingDetailsByTerritory,
        __TerritoryOfCommissioning.name() : __TerritoryOfCommissioning,
        __NumberOfFeaturedArtists.name() : __NumberOfFeaturedArtists,
        __NumberOfNonFeaturedArtists.name() : __NumberOfNonFeaturedArtists,
        __NumberOfContractedArtists.name() : __NumberOfContractedArtists,
        __NumberOfNonContractedArtists.name() : __NumberOfNonContractedArtists
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'SoundRecording', SoundRecording)


# Complex type {http://ddex.net/xml/ern/351}SoundRecordingDetailsByTerritory with content type ELEMENT_ONLY
class SoundRecordingDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:SoundRecording which may vary according to ddex:Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoundRecordingDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2631, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2637, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory to which the ddex:SoundRecording details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2642, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory to which the ddex:SoundRecording details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2649, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ddex:SoundRecording.')

    
    # Element DisplayArtist uses Python identifier DisplayArtist
    __DisplayArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), 'DisplayArtist', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_DisplayArtist', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2654, 9), )

    
    DisplayArtist = property(__DisplayArtist.value, __DisplayArtist.set, None, 'A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:SoundRecording. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element DisplayConductor uses Python identifier DisplayConductor
    __DisplayConductor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), 'DisplayConductor', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_DisplayConductor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2659, 9), )

    
    DisplayConductor = property(__DisplayConductor.value, __DisplayConductor.set, None, 'A ddex:Composite containing details of a ddex:DisplayConductor for the ddex:SoundRecording. A ddex:DisplayConductor may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2664, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A ddex:Composite containing details of a ddex:Contributor to the ddex:SoundRecording.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2670, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SoundRecording.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2676, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:SoundRecording.')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_LabelName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2681, 9), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.')

    
    # Element RightsController uses Python identifier RightsController
    __RightsController = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsController'), 'RightsController', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_RightsController', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2686, 9), )

    
    RightsController = property(__RightsController.value, __RightsController.set, None, 'A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:SoundRecording.')

    
    # Element RemasteredDate uses Python identifier RemasteredDate
    __RemasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), 'RemasteredDate', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_RemasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2692, 9), )

    
    RemasteredDate = property(__RemasteredDate.value, __RemasteredDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was re-mastered (usually digitally).')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2697, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was originally published, whether for physical or electronic/online distribution.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2702, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A ddex:Composite containing details of the ddex:PLine for the ddex:SoundRecording.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2707, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for guests ddex:Artists or others featured on the ddex:SoundRecording.')

    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2712, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the ddex:SoundRecording in a group of ddex:SoundRecordings in a ddex:Release.')

    
    # Element HostSoundCarrier uses Python identifier HostSoundCarrier
    __HostSoundCarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), 'HostSoundCarrier', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_HostSoundCarrier', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2717, 9), )

    
    HostSoundCarrier = property(__HostSoundCarrier.value, __HostSoundCarrier.set, None, 'A ddex:Composite containing details of a ddex:HostSoundCarrier on which the ddex:SoundRecording appears (e.g., the CD on which it was originally released). This ddex:Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of ddex:SoundRecording information.')

    
    # Element MarketingComment uses Python identifier MarketingComment
    __MarketingComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MarketingComment'), 'MarketingComment', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_MarketingComment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2723, 9), )

    
    MarketingComment = property(__MarketingComment.value, __MarketingComment.set, None, 'A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:SoundRecording.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2728, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A ddex:Composite containing details of a ddex:Genre to which the ddex:SoundRecording belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2733, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A ddex:Composite containing details of the classification of the ddex:SoundRecording according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element AvRating uses Python identifier AvRating
    __AvRating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AvRating'), 'AvRating', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_AvRating', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2739, 9), )

    
    AvRating = property(__AvRating.value, __AvRating.set, None, 'A ddex:Composite containing details of a rating for the ddex:SoundRecording.')

    
    # Element TechnicalSoundRecordingDetails uses Python identifier TechnicalSoundRecordingDetails
    __TechnicalSoundRecordingDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalSoundRecordingDetails'), 'TechnicalSoundRecordingDetails', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_TechnicalSoundRecordingDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2744, 9), )

    
    TechnicalSoundRecordingDetails = property(__TechnicalSoundRecordingDetails.value, __TechnicalSoundRecordingDetails.set, None, 'A ddex:Composite containing technical details of the ddex:SoundRecording.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2750, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2755, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A ddex:Composite containing details of a ddex:Description of the ddex:SoundRecording containing ddex:Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2760, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A ddex:Composite containing details of a ddex:Synopsis of the ddex:SoundRecording.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_SoundRecordingDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2766, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2766, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ddexC:SoundRecordingDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __Title.name() : __Title,
        __DisplayArtist.name() : __DisplayArtist,
        __DisplayConductor.name() : __DisplayConductor,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __RightsAgreementId.name() : __RightsAgreementId,
        __LabelName.name() : __LabelName,
        __RightsController.name() : __RightsController,
        __RemasteredDate.name() : __RemasteredDate,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __PLine.name() : __PLine,
        __CourtesyLine.name() : __CourtesyLine,
        __SequenceNumber.name() : __SequenceNumber,
        __HostSoundCarrier.name() : __HostSoundCarrier,
        __MarketingComment.name() : __MarketingComment,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __AvRating.name() : __AvRating,
        __TechnicalSoundRecordingDetails.name() : __TechnicalSoundRecordingDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'SoundRecordingDetailsByTerritory', SoundRecordingDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/351}SoundRecordingPreviewDetails with content type ELEMENT_ONLY
class SoundRecordingPreviewDetails (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a preview."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SoundRecordingPreviewDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2772, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PartType uses Python identifier PartType
    __PartType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartType'), 'PartType', '__httpddex_netxmlern351_SoundRecordingPreviewDetails_PartType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2777, 9), )

    
    PartType = property(__PartType.value, __PartType.set, None, 'A ddex:Composite containing a ddex:Description of the ddex:Type of ddex:Part that the preview relates to, e.g. chorus or intro.')

    
    # Element StartPoint uses Python identifier StartPoint
    __StartPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StartPoint'), 'StartPoint', '__httpddex_netxmlern351_SoundRecordingPreviewDetails_StartPoint', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2782, 9), )

    
    StartPoint = property(__StartPoint.value, __StartPoint.set, None, 'The start point of the preview given in seconds from the start of the ddex:Resource.')

    
    # Element EndPoint uses Python identifier EndPoint
    __EndPoint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EndPoint'), 'EndPoint', '__httpddex_netxmlern351_SoundRecordingPreviewDetails_EndPoint', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2787, 9), )

    
    EndPoint = property(__EndPoint.value, __EndPoint.set, None, 'The end point of the preview given in seconds from the start of the ddex:Resource.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_SoundRecordingPreviewDetails_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2792, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The ddex:Duration of the preview, measured from the StartPoint.')

    
    # Element TopLeftCorner uses Python identifier TopLeftCorner
    __TopLeftCorner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TopLeftCorner'), 'TopLeftCorner', '__httpddex_netxmlern351_SoundRecordingPreviewDetails_TopLeftCorner', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2797, 9), )

    
    TopLeftCorner = property(__TopLeftCorner.value, __TopLeftCorner.set, None, 'The position of the preview measured in ddex:Pixels or millimetres from the top left corner of the ddex:Resource.')

    
    # Element BottomRightCorner uses Python identifier BottomRightCorner
    __BottomRightCorner = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BottomRightCorner'), 'BottomRightCorner', '__httpddex_netxmlern351_SoundRecordingPreviewDetails_BottomRightCorner', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2802, 9), )

    
    BottomRightCorner = property(__BottomRightCorner.value, __BottomRightCorner.set, None, 'The position of the preview measured in ddex:Pixels or millimetres  from the bottom right corner of the ddex:Resource.')

    
    # Element ExpressionType uses Python identifier ExpressionType
    __ExpressionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExpressionType'), 'ExpressionType', '__httpddex_netxmlern351_SoundRecordingPreviewDetails_ExpressionType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2807, 9), )

    
    ExpressionType = property(__ExpressionType.value, __ExpressionType.set, None, 'A ddex:Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview).')

    _ElementMap.update({
        __PartType.name() : __PartType,
        __StartPoint.name() : __StartPoint,
        __EndPoint.name() : __EndPoint,
        __Duration.name() : __Duration,
        __TopLeftCorner.name() : __TopLeftCorner,
        __BottomRightCorner.name() : __BottomRightCorner,
        __ExpressionType.name() : __ExpressionType
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'SoundRecordingPreviewDetails', SoundRecordingPreviewDetails)


# Complex type {http://ddex.net/xml/ern/351}TechnicalImageDetails with content type ELEMENT_ONLY
class TechnicalImageDetails (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing technical details of a ddex:Image."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalImageDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2814, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern351_TechnicalImageDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2819, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalImageDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern351_TechnicalImageDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2829, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.')

    
    # Element ContainerFormat uses Python identifier ContainerFormat
    __ContainerFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), 'ContainerFormat', '__httpddex_netxmlern351_TechnicalImageDetails_ContainerFormat', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2834, 9), )

    
    ContainerFormat = property(__ContainerFormat.value, __ContainerFormat.set, None, 'A ddex:Composite containing details of a ddex:ContainerFormat.')

    
    # Element ImageCodecType uses Python identifier ImageCodecType
    __ImageCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageCodecType'), 'ImageCodecType', '__httpddex_netxmlern351_TechnicalImageDetails_ImageCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2839, 9), )

    
    ImageCodecType = property(__ImageCodecType.value, __ImageCodecType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:ImageCodec.')

    
    # Element ImageHeight uses Python identifier ImageHeight
    __ImageHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageHeight'), 'ImageHeight', '__httpddex_netxmlern351_TechnicalImageDetails_ImageHeight', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2844, 9), )

    
    ImageHeight = property(__ImageHeight.value, __ImageHeight.set, None, 'A ddex:Composite containing the vertical ddex:Extent of an ddex:Image of the ddex:Image and a ddex:UnitOfMeasure (the default is pixels).')

    
    # Element ImageWidth uses Python identifier ImageWidth
    __ImageWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageWidth'), 'ImageWidth', '__httpddex_netxmlern351_TechnicalImageDetails_ImageWidth', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2849, 9), )

    
    ImageWidth = property(__ImageWidth.value, __ImageWidth.set, None, 'A ddex:Composite containing the horizontal ddex:Extent of an ddex:Image of the ddex:Image and a ddex:UnitOfMeasure (the default is pixels).')

    
    # Element AspectRatio uses Python identifier AspectRatio
    __AspectRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AspectRatio'), 'AspectRatio', '__httpddex_netxmlern351_TechnicalImageDetails_AspectRatio', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2854, 9), )

    
    AspectRatio = property(__AspectRatio.value, __AspectRatio.set, None, 'The ratio formed by dividing the ddex:ImageHeight by the ddex:ImageWidth.')

    
    # Element ColorDepth uses Python identifier ColorDepth
    __ColorDepth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ColorDepth'), 'ColorDepth', '__httpddex_netxmlern351_TechnicalImageDetails_ColorDepth', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2859, 9), )

    
    ColorDepth = property(__ColorDepth.value, __ColorDepth.set, None, 'An amount of data determining the color of a pixel of the ddex:Image (given in bits per pixel).')

    
    # Element ImageResolution uses Python identifier ImageResolution
    __ImageResolution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageResolution'), 'ImageResolution', '__httpddex_netxmlern351_TechnicalImageDetails_ImageResolution', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2864, 9), )

    
    ImageResolution = property(__ImageResolution.value, __ImageResolution.set, None, 'A number of pixels of the ddex:Image displayed in a specific spatial range (given in dpi).')

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern351_TechnicalImageDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2869, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The ddex:Flag indicating whether the ddex:Image is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern351_TechnicalImageDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2874, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A ddex:Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_TechnicalImageDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2879, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern351_TechnicalImageDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2884, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Image.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern351_TechnicalImageDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2890, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Image.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern351_TechnicalImageDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2896, 12), )

    
    File = property(__File.value, __File.set, None, 'A ddex:Composite containing details of a ddex:File containing the ddex:Image that a ddex:DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern351_TechnicalImageDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2902, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_TechnicalImageDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2908, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2908, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:TechnicalImageDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __ContainerFormat.name() : __ContainerFormat,
        __ImageCodecType.name() : __ImageCodecType,
        __ImageHeight.name() : __ImageHeight,
        __ImageWidth.name() : __ImageWidth,
        __AspectRatio.name() : __AspectRatio,
        __ColorDepth.name() : __ColorDepth,
        __ImageResolution.name() : __ImageResolution,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalImageDetails', TechnicalImageDetails)


# Complex type {http://ddex.net/xml/ern/351}TechnicalMidiDetails with content type ELEMENT_ONLY
class TechnicalMidiDetails (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing technical details of a ddex:MIDI."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalMidiDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2914, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern351_TechnicalMidiDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2919, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalMidiDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_TechnicalMidiDetails_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2929, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The ddex:Duration of the instantiation of the ern:MIDI if this differs from the ddex:Duration provided for the ern:MIDI itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole ern:MIDI.')

    
    # Element ResourceProcessingRequired uses Python identifier ResourceProcessingRequired
    __ResourceProcessingRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), 'ResourceProcessingRequired', '__httpddex_netxmlern351_TechnicalMidiDetails_ResourceProcessingRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2934, 9), )

    
    ResourceProcessingRequired = property(__ResourceProcessingRequired.value, __ResourceProcessingRequired.set, None, 'The ddex:Flag indicating whether the ern:MIDI needs to be processed (=True) or not (=False) (typically: transcoded) by the ddex:MessageRecipient before being delivered to ddex:Consumers.')

    
    # Element UsableResourceDuration uses Python identifier UsableResourceDuration
    __UsableResourceDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), 'UsableResourceDuration', '__httpddex_netxmlern351_TechnicalMidiDetails_UsableResourceDuration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2939, 9), )

    
    UsableResourceDuration = property(__UsableResourceDuration.value, __UsableResourceDuration.set, None, "The ddex:Duration of the ern:MIDI that may be sold to a ddex:Consumer if the ern:MIDI provided is not intended to be provided to ddex:Consumers 'as is' but will need to be transcoded into an appropriate format by the ddex:MessageRecipient or any other ddex:DSP handling the ddex:Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).")

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern351_TechnicalMidiDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2944, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The ddex:Flag indicating whether the ddex:MIDI is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern351_TechnicalMidiDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2949, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A ddex:Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_TechnicalMidiDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2954, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern351_TechnicalMidiDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2959, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A ddex:Composite containing details of when a consumer is able to get hold of the ddex:MIDI.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern351_TechnicalMidiDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2965, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:MIDI.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern351_TechnicalMidiDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2971, 12), )

    
    File = property(__File.value, __File.set, None, 'A ddex:Composite containing details of a ddex:File containing the ddex:MIDI that a ddex:DSP can obtain.')

    
    # Element NumberOfVoices uses Python identifier NumberOfVoices
    __NumberOfVoices = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfVoices'), 'NumberOfVoices', '__httpddex_netxmlern351_TechnicalMidiDetails_NumberOfVoices', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2977, 9), )

    
    NumberOfVoices = property(__NumberOfVoices.value, __NumberOfVoices.set, None, 'The number of voices.')

    
    # Element SoundProcessorType uses Python identifier SoundProcessorType
    __SoundProcessorType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SoundProcessorType'), 'SoundProcessorType', '__httpddex_netxmlern351_TechnicalMidiDetails_SoundProcessorType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2982, 9), )

    
    SoundProcessorType = property(__SoundProcessorType.value, __SoundProcessorType.set, None, 'A ddex:Type of sound processor.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern351_TechnicalMidiDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2987, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_TechnicalMidiDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2993, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2993, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:TechnicalMidiDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __Duration.name() : __Duration,
        __ResourceProcessingRequired.name() : __ResourceProcessingRequired,
        __UsableResourceDuration.name() : __UsableResourceDuration,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __NumberOfVoices.name() : __NumberOfVoices,
        __SoundProcessorType.name() : __SoundProcessorType,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalMidiDetails', TechnicalMidiDetails)


# Complex type {http://ddex.net/xml/ern/351}TechnicalSheetMusicDetails with content type ELEMENT_ONLY
class TechnicalSheetMusicDetails (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing technical details of a ddex:SheetMusic."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalSheetMusicDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2999, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3004, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalSheetMusicDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3014, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.')

    
    # Element ContainerFormat uses Python identifier ContainerFormat
    __ContainerFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), 'ContainerFormat', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_ContainerFormat', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3019, 9), )

    
    ContainerFormat = property(__ContainerFormat.value, __ContainerFormat.set, None, 'A ddex:Composite containing details of a ddex:ContainerFormat.')

    
    # Element SheetMusicCodecType uses Python identifier SheetMusicCodecType
    __SheetMusicCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SheetMusicCodecType'), 'SheetMusicCodecType', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_SheetMusicCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3024, 9), )

    
    SheetMusicCodecType = property(__SheetMusicCodecType.value, __SheetMusicCodecType.set, None, 'A ddex:Composite containing details of a ddex:Type of SheetMusicCodec.')

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3029, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The ddex:Flag indicating whether the ddex:SheetMusic is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3034, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A ddex:Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3039, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3044, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A ddex:Composite containing details of when a consumer is able to get hold of the ddex:SheetMusic.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3050, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:SheetMusic.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3056, 12), )

    
    File = property(__File.value, __File.set, None, 'A ddex:Composite containing details of a ddex:File containing the ddex:SheetMusic that a ddex:DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3062, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_TechnicalSheetMusicDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3068, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3068, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:TechnicalSheetMusicDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __ContainerFormat.name() : __ContainerFormat,
        __SheetMusicCodecType.name() : __SheetMusicCodecType,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalSheetMusicDetails', TechnicalSheetMusicDetails)


# Complex type {http://ddex.net/xml/ern/351}TechnicalSoftwareDetails with content type ELEMENT_ONLY
class TechnicalSoftwareDetails (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing technical details of a ddex:Software."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalSoftwareDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3074, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern351_TechnicalSoftwareDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3079, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalSoftwareDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern351_TechnicalSoftwareDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3089, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.')

    
    # Element OperatingSystemType uses Python identifier OperatingSystemType
    __OperatingSystemType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OperatingSystemType'), 'OperatingSystemType', '__httpddex_netxmlern351_TechnicalSoftwareDetails_OperatingSystemType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3094, 9), )

    
    OperatingSystemType = property(__OperatingSystemType.value, __OperatingSystemType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:OperatingSystem.')

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern351_TechnicalSoftwareDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3099, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The ddex:Flag indicating whether the ddex:Software is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern351_TechnicalSoftwareDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3104, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A ddex:Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_TechnicalSoftwareDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3109, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern351_TechnicalSoftwareDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3114, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Software.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern351_TechnicalSoftwareDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3120, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Software.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern351_TechnicalSoftwareDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3126, 12), )

    
    File = property(__File.value, __File.set, None, 'A ddex:Composite containing details of a ddex:File containing the ddex:Software that a ddex:DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern351_TechnicalSoftwareDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3132, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_TechnicalSoftwareDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3138, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3138, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:TechnicalSoftwareDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __OperatingSystemType.name() : __OperatingSystemType,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalSoftwareDetails', TechnicalSoftwareDetails)


# Complex type {http://ddex.net/xml/ern/351}TechnicalSoundRecordingDetails with content type ELEMENT_ONLY
class TechnicalSoundRecordingDetails (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing technical details of a ddex:SoundRecording."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalSoundRecordingDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3144, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3149, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalSoundRecordingDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3159, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.')

    
    # Element ContainerFormat uses Python identifier ContainerFormat
    __ContainerFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), 'ContainerFormat', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_ContainerFormat', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3164, 9), )

    
    ContainerFormat = property(__ContainerFormat.value, __ContainerFormat.set, None, 'A ddex:Composite containing details of a ddex:ContainerFormat.')

    
    # Element AudioCodecType uses Python identifier AudioCodecType
    __AudioCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AudioCodecType'), 'AudioCodecType', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_AudioCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3169, 9), )

    
    AudioCodecType = property(__AudioCodecType.value, __AudioCodecType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:AudioCodec.')

    
    # Element BitRate uses Python identifier BitRate
    __BitRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BitRate'), 'BitRate', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_BitRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3174, 9), )

    
    BitRate = property(__BitRate.value, __BitRate.set, None, 'A ddex:Composite containing the ddex:BitRate for the audio data and a ddex:UnitOfMeasure (the default is ddex:kbps).')

    
    # Element NumberOfChannels uses Python identifier NumberOfChannels
    __NumberOfChannels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfChannels'), 'NumberOfChannels', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_NumberOfChannels', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3179, 9), )

    
    NumberOfChannels = property(__NumberOfChannels.value, __NumberOfChannels.set, None, 'A number of audio channels.')

    
    # Element SamplingRate uses Python identifier SamplingRate
    __SamplingRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SamplingRate'), 'SamplingRate', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_SamplingRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3184, 9), )

    
    SamplingRate = property(__SamplingRate.value, __SamplingRate.set, None, 'A ddex:Composite containing the sampling rate of the ddex:SoundRecording and a ddex:UnitOfMeasure (the default is ddex:Hz).')

    
    # Element BitsPerSample uses Python identifier BitsPerSample
    __BitsPerSample = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BitsPerSample'), 'BitsPerSample', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_BitsPerSample', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3189, 9), )

    
    BitsPerSample = property(__BitsPerSample.value, __BitsPerSample.set, None, 'An amount of audio data in a sample.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3194, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The ddex:Duration of the instantiation of the ern:SoundRecording if this differs from the ddex:Duration provided for the ern:SoundRecording itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole ern:SoundRecording.')

    
    # Element ResourceProcessingRequired uses Python identifier ResourceProcessingRequired
    __ResourceProcessingRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), 'ResourceProcessingRequired', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_ResourceProcessingRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3199, 9), )

    
    ResourceProcessingRequired = property(__ResourceProcessingRequired.value, __ResourceProcessingRequired.set, None, 'The ddex:Flag indicating whether the ern:SoundRecording needs to be processed (=True) or not (=False) (typically: transcoded) by the ddex:MessageRecipient before being delivered to ddex:Consumers.')

    
    # Element UsableResourceDuration uses Python identifier UsableResourceDuration
    __UsableResourceDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), 'UsableResourceDuration', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_UsableResourceDuration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3204, 9), )

    
    UsableResourceDuration = property(__UsableResourceDuration.value, __UsableResourceDuration.set, None, "The ddex:Duration of the ern:SoundRecording that may be sold to a ddex:Consumer if the ern:SoundRecording provided is not intended to be provided to ddex:Consumers 'as is' but will need to be transcoded into an appropriate format by the ddex:MessageRecipient or any other ddex:DSP handling the ddex:Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).")

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3209, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The ddex:Flag indicating whether the ddex:SoundRecording is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3214, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A ddex:Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3219, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3224, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A ddex:Composite containing details of when a consumer is able to get hold of the ddex:SoundRecording.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3230, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:SoundRecording.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3236, 12), )

    
    File = property(__File.value, __File.set, None, 'A ddex:Composite containing details of a ddex:File containing the ddex:SoundRecording that a ddex:DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3242, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_TechnicalSoundRecordingDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3248, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3248, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:TechnicalSoundRecordingDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __ContainerFormat.name() : __ContainerFormat,
        __AudioCodecType.name() : __AudioCodecType,
        __BitRate.name() : __BitRate,
        __NumberOfChannels.name() : __NumberOfChannels,
        __SamplingRate.name() : __SamplingRate,
        __BitsPerSample.name() : __BitsPerSample,
        __Duration.name() : __Duration,
        __ResourceProcessingRequired.name() : __ResourceProcessingRequired,
        __UsableResourceDuration.name() : __UsableResourceDuration,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalSoundRecordingDetails', TechnicalSoundRecordingDetails)


# Complex type {http://ddex.net/xml/ern/351}TechnicalTextDetails with content type ELEMENT_ONLY
class TechnicalTextDetails (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing technical details of a ddex:Text."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalTextDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3254, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern351_TechnicalTextDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3259, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalTextDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern351_TechnicalTextDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3269, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.')

    
    # Element ContainerFormat uses Python identifier ContainerFormat
    __ContainerFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), 'ContainerFormat', '__httpddex_netxmlern351_TechnicalTextDetails_ContainerFormat', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3274, 9), )

    
    ContainerFormat = property(__ContainerFormat.value, __ContainerFormat.set, None, 'A ddex:Composite containing details of a ddex:ContainerFormat.')

    
    # Element TextCodecType uses Python identifier TextCodecType
    __TextCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TextCodecType'), 'TextCodecType', '__httpddex_netxmlern351_TechnicalTextDetails_TextCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3279, 9), )

    
    TextCodecType = property(__TextCodecType.value, __TextCodecType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:TextCodec.')

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern351_TechnicalTextDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3284, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The ddex:Flag indicating whether the ddex:Text is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern351_TechnicalTextDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3289, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A ddex:Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_TechnicalTextDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3294, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern351_TechnicalTextDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3299, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Text.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern351_TechnicalTextDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3305, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Text.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern351_TechnicalTextDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3311, 12), )

    
    File = property(__File.value, __File.set, None, 'A ddex:Composite containing details of a ddex:File containing the ddex:Text that a ddex:DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern351_TechnicalTextDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3317, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_TechnicalTextDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3323, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3323, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:TechnicalTextDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __ContainerFormat.name() : __ContainerFormat,
        __TextCodecType.name() : __TextCodecType,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalTextDetails', TechnicalTextDetails)


# Complex type {http://ddex.net/xml/ern/351}TechnicalUserDefinedResourceDetails with content type ELEMENT_ONLY
class TechnicalUserDefinedResourceDetails (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing technical details of a ddex:UserDefinedResource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalUserDefinedResourceDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3329, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern351_TechnicalUserDefinedResourceDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3334, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalUserDefinedResourceDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern351_TechnicalUserDefinedResourceDetails_UserDefinedValue', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3344, 9), )

    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A ddex:Composite containing details of a ddex:UserDefinedValue.')

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern351_TechnicalUserDefinedResourceDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3350, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The ddex:Flag indicating whether the ddex:UserDefinedResource is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern351_TechnicalUserDefinedResourceDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3355, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A ddex:Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_TechnicalUserDefinedResourceDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3360, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern351_TechnicalUserDefinedResourceDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3365, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A ddex:Composite containing details of when a consumer is able to get hold of the ddex:UserDefinedResource.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern351_TechnicalUserDefinedResourceDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3371, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:UserDefinedResource.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern351_TechnicalUserDefinedResourceDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3377, 12), )

    
    File = property(__File.value, __File.set, None, 'A ddex:Composite containing details of a ddex:File containing the ddex:UserDefinedResource that a ddex:DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern351_TechnicalUserDefinedResourceDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3383, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_TechnicalUserDefinedResourceDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3389, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3389, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:TechnicalUserDefinedResourceDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __UserDefinedValue.name() : __UserDefinedValue,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalUserDefinedResourceDetails', TechnicalUserDefinedResourceDetails)


# Complex type {http://ddex.net/xml/ern/351}TechnicalVideoDetails with content type ELEMENT_ONLY
class TechnicalVideoDetails (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing technical details of a ddex:Video."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TechnicalVideoDetails')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3395, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TechnicalResourceDetailsReference uses Python identifier TechnicalResourceDetailsReference
    __TechnicalResourceDetailsReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), 'TechnicalResourceDetailsReference', '__httpddex_netxmlern351_TechnicalVideoDetails_TechnicalResourceDetailsReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3400, 9), )

    
    TechnicalResourceDetailsReference = property(__TechnicalResourceDetailsReference.value, __TechnicalResourceDetailsReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalVideoDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.')

    
    # Element DrmPlatformType uses Python identifier DrmPlatformType
    __DrmPlatformType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), 'DrmPlatformType', '__httpddex_netxmlern351_TechnicalVideoDetails_DrmPlatformType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3410, 9), )

    
    DrmPlatformType = property(__DrmPlatformType.value, __DrmPlatformType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.')

    
    # Element OverallBitRate uses Python identifier OverallBitRate
    __OverallBitRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OverallBitRate'), 'OverallBitRate', '__httpddex_netxmlern351_TechnicalVideoDetails_OverallBitRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3415, 9), )

    
    OverallBitRate = property(__OverallBitRate.value, __OverallBitRate.set, None, 'A ddex:Composite containing the overall ddex:BitRate and a ddex:UnitOfMeasure (the default is ddex:kbps).')

    
    # Element ContainerFormat uses Python identifier ContainerFormat
    __ContainerFormat = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), 'ContainerFormat', '__httpddex_netxmlern351_TechnicalVideoDetails_ContainerFormat', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3420, 9), )

    
    ContainerFormat = property(__ContainerFormat.value, __ContainerFormat.set, None, 'A ddex:Composite containing details of a ddex:ContainerFormat.')

    
    # Element VideoCodecType uses Python identifier VideoCodecType
    __VideoCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoCodecType'), 'VideoCodecType', '__httpddex_netxmlern351_TechnicalVideoDetails_VideoCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3425, 9), )

    
    VideoCodecType = property(__VideoCodecType.value, __VideoCodecType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:VideoCodec.')

    
    # Element VideoBitRate uses Python identifier VideoBitRate
    __VideoBitRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoBitRate'), 'VideoBitRate', '__httpddex_netxmlern351_TechnicalVideoDetails_VideoBitRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3430, 9), )

    
    VideoBitRate = property(__VideoBitRate.value, __VideoBitRate.set, None, 'A ddex:Composite containing the ddex:BitRate for the video data and a ddex:UnitOfMeasure (the default is ddex:kbps).')

    
    # Element FrameRate uses Python identifier FrameRate
    __FrameRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FrameRate'), 'FrameRate', '__httpddex_netxmlern351_TechnicalVideoDetails_FrameRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3435, 9), )

    
    FrameRate = property(__FrameRate.value, __FrameRate.set, None, 'A ddex:Composite containing the ddex:Rate for a number of frames shown in the ddex:Video in a specific ddex:Period of ddex:Time and a ddex:UnitOfMeasure (the default is ddex:Hz, interlaced).')

    
    # Element ImageHeight uses Python identifier ImageHeight
    __ImageHeight = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageHeight'), 'ImageHeight', '__httpddex_netxmlern351_TechnicalVideoDetails_ImageHeight', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3440, 9), )

    
    ImageHeight = property(__ImageHeight.value, __ImageHeight.set, None, 'A ddex:Composite containing the vertical ddex:Extent of an ddex:Image of the ddex:Video and a ddex:UnitOfMeasure (the default is pixels).')

    
    # Element ImageWidth uses Python identifier ImageWidth
    __ImageWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ImageWidth'), 'ImageWidth', '__httpddex_netxmlern351_TechnicalVideoDetails_ImageWidth', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3445, 9), )

    
    ImageWidth = property(__ImageWidth.value, __ImageWidth.set, None, 'A ddex:Composite containing the horizontal ddex:Extent of an ddex:Image of the ddex:Video and a ddex:UnitOfMeasure (the default is pixels).')

    
    # Element AspectRatio uses Python identifier AspectRatio
    __AspectRatio = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AspectRatio'), 'AspectRatio', '__httpddex_netxmlern351_TechnicalVideoDetails_AspectRatio', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3450, 9), )

    
    AspectRatio = property(__AspectRatio.value, __AspectRatio.set, None, 'The ratio formed by dividing the ddex:ImageHeight by the ddex:ImageWidth.')

    
    # Element ColorDepth uses Python identifier ColorDepth
    __ColorDepth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ColorDepth'), 'ColorDepth', '__httpddex_netxmlern351_TechnicalVideoDetails_ColorDepth', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3455, 9), )

    
    ColorDepth = property(__ColorDepth.value, __ColorDepth.set, None, 'An amount of data determining the color of a pixel of an ddex:Image of the ddex:Video (given in bits per pixel).')

    
    # Element VideoDefinitionType uses Python identifier VideoDefinitionType
    __VideoDefinitionType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoDefinitionType'), 'VideoDefinitionType', '__httpddex_netxmlern351_TechnicalVideoDetails_VideoDefinitionType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3460, 9), )

    
    VideoDefinitionType = property(__VideoDefinitionType.value, __VideoDefinitionType.set, None, 'A ddex:Type of resolution (or definition) in which the ddex:Video is provided.')

    
    # Element AudioCodecType uses Python identifier AudioCodecType
    __AudioCodecType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AudioCodecType'), 'AudioCodecType', '__httpddex_netxmlern351_TechnicalVideoDetails_AudioCodecType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3465, 9), )

    
    AudioCodecType = property(__AudioCodecType.value, __AudioCodecType.set, None, 'A ddex:Composite containing details of a ddex:Type of ddex:AudioCodec.')

    
    # Element AudioBitRate uses Python identifier AudioBitRate
    __AudioBitRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AudioBitRate'), 'AudioBitRate', '__httpddex_netxmlern351_TechnicalVideoDetails_AudioBitRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3470, 9), )

    
    AudioBitRate = property(__AudioBitRate.value, __AudioBitRate.set, None, 'A ddex:Composite containing the ddex:BitRate for the audio data and a ddex:UnitOfMeasure (the default is ddex:kbps).')

    
    # Element NumberOfAudioChannels uses Python identifier NumberOfAudioChannels
    __NumberOfAudioChannels = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfAudioChannels'), 'NumberOfAudioChannels', '__httpddex_netxmlern351_TechnicalVideoDetails_NumberOfAudioChannels', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3475, 9), )

    
    NumberOfAudioChannels = property(__NumberOfAudioChannels.value, __NumberOfAudioChannels.set, None, 'A number of audio channels.')

    
    # Element AudioSamplingRate uses Python identifier AudioSamplingRate
    __AudioSamplingRate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AudioSamplingRate'), 'AudioSamplingRate', '__httpddex_netxmlern351_TechnicalVideoDetails_AudioSamplingRate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3480, 9), )

    
    AudioSamplingRate = property(__AudioSamplingRate.value, __AudioSamplingRate.set, None, 'A ddex:Composite containing the ddex:SamplingRate for the audio data and a ddex:UnitOfMeasure (the default is ddex:Hz).')

    
    # Element AudioBitsPerSample uses Python identifier AudioBitsPerSample
    __AudioBitsPerSample = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AudioBitsPerSample'), 'AudioBitsPerSample', '__httpddex_netxmlern351_TechnicalVideoDetails_AudioBitsPerSample', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3485, 9), )

    
    AudioBitsPerSample = property(__AudioBitsPerSample.value, __AudioBitsPerSample.set, None, 'An amount of audio data in a sample.')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_TechnicalVideoDetails_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3490, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The ddex:Duration of the instantiation of the ern:Video if this differs from the ddex:Duration provided for the ern:Video itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole ern:Video.')

    
    # Element ResourceProcessingRequired uses Python identifier ResourceProcessingRequired
    __ResourceProcessingRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), 'ResourceProcessingRequired', '__httpddex_netxmlern351_TechnicalVideoDetails_ResourceProcessingRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3495, 9), )

    
    ResourceProcessingRequired = property(__ResourceProcessingRequired.value, __ResourceProcessingRequired.set, None, 'The ddex:Flag indicating whether the ern:Video needs to be processed (=True) or not (=False) (typically: transcoded) by the ddex:MessageRecipient before being delivered to ddex:Consumers.')

    
    # Element UsableResourceDuration uses Python identifier UsableResourceDuration
    __UsableResourceDuration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), 'UsableResourceDuration', '__httpddex_netxmlern351_TechnicalVideoDetails_UsableResourceDuration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3500, 9), )

    
    UsableResourceDuration = property(__UsableResourceDuration.value, __UsableResourceDuration.set, None, "The ddex:Duration of the ern:Video that may be sold to a ddex:Consumer if the ern:Video provided is not intended to be provided to ddex:Consumers 'as is' but will need to be transcoded into an appropriate format by the ddex:MessageRecipient or any other ddex:DSP handling the ddex:Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).")

    
    # Element IsPreview uses Python identifier IsPreview
    __IsPreview = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPreview'), 'IsPreview', '__httpddex_netxmlern351_TechnicalVideoDetails_IsPreview', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3505, 9), )

    
    IsPreview = property(__IsPreview.value, __IsPreview.set, None, 'The ddex:Flag indicating whether the ddex:Video is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.')

    
    # Element PreviewDetails uses Python identifier PreviewDetails
    __PreviewDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), 'PreviewDetails', '__httpddex_netxmlern351_TechnicalVideoDetails_PreviewDetails', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3510, 9), )

    
    PreviewDetails = property(__PreviewDetails.value, __PreviewDetails.set, None, 'A ddex:Composite containing details of a preview.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_TechnicalVideoDetails_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3515, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element ConsumerFulfillmentDate uses Python identifier ConsumerFulfillmentDate
    __ConsumerFulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), 'ConsumerFulfillmentDate', '__httpddex_netxmlern351_TechnicalVideoDetails_ConsumerFulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3520, 9), )

    
    ConsumerFulfillmentDate = property(__ConsumerFulfillmentDate.value, __ConsumerFulfillmentDate.set, None, 'A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Video.')

    
    # Element FileAvailabilityDescription uses Python identifier FileAvailabilityDescription
    __FileAvailabilityDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), 'FileAvailabilityDescription', '__httpddex_netxmlern351_TechnicalVideoDetails_FileAvailabilityDescription', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3526, 12), )

    
    FileAvailabilityDescription = property(__FileAvailabilityDescription.value, __FileAvailabilityDescription.set, None, 'A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Video.')

    
    # Element File uses Python identifier File
    __File = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'File'), 'File', '__httpddex_netxmlern351_TechnicalVideoDetails_File', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3532, 12), )

    
    File = property(__File.value, __File.set, None, 'A ddex:Composite containing details of a ddex:File containing the ddex:Video that a ddex:DSP can obtain.')

    
    # Element Fingerprint uses Python identifier Fingerprint
    __Fingerprint = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Fingerprint'), 'Fingerprint', '__httpddex_netxmlern351_TechnicalVideoDetails_Fingerprint', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3538, 9), )

    
    Fingerprint = property(__Fingerprint.value, __Fingerprint.set, None, 'A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_TechnicalVideoDetails_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3544, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3544, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the TechnicalSoundRecordingDetails as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TechnicalResourceDetailsReference.name() : __TechnicalResourceDetailsReference,
        __DrmPlatformType.name() : __DrmPlatformType,
        __OverallBitRate.name() : __OverallBitRate,
        __ContainerFormat.name() : __ContainerFormat,
        __VideoCodecType.name() : __VideoCodecType,
        __VideoBitRate.name() : __VideoBitRate,
        __FrameRate.name() : __FrameRate,
        __ImageHeight.name() : __ImageHeight,
        __ImageWidth.name() : __ImageWidth,
        __AspectRatio.name() : __AspectRatio,
        __ColorDepth.name() : __ColorDepth,
        __VideoDefinitionType.name() : __VideoDefinitionType,
        __AudioCodecType.name() : __AudioCodecType,
        __AudioBitRate.name() : __AudioBitRate,
        __NumberOfAudioChannels.name() : __NumberOfAudioChannels,
        __AudioSamplingRate.name() : __AudioSamplingRate,
        __AudioBitsPerSample.name() : __AudioBitsPerSample,
        __Duration.name() : __Duration,
        __ResourceProcessingRequired.name() : __ResourceProcessingRequired,
        __UsableResourceDuration.name() : __UsableResourceDuration,
        __IsPreview.name() : __IsPreview,
        __PreviewDetails.name() : __PreviewDetails,
        __FulfillmentDate.name() : __FulfillmentDate,
        __ConsumerFulfillmentDate.name() : __ConsumerFulfillmentDate,
        __FileAvailabilityDescription.name() : __FileAvailabilityDescription,
        __File.name() : __File,
        __Fingerprint.name() : __Fingerprint
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TechnicalVideoDetails', TechnicalVideoDetails)


# Complex type {http://ddex.net/xml/ern/351}Text with content type ELEMENT_ONLY
class Text (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:Text."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Text')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3550, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TextType uses Python identifier TextType
    __TextType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TextType'), 'TextType', '__httpddex_netxmlern351_Text_TextType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3555, 9), )

    
    TextType = property(__TextType.value, __TextType.set, None, 'A ddex:Composite containing details of the ddex:Type of the ern:Text.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern351_Text_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3560, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The ddex:Flag indicating whether the ern:Text is related to an ddex:Artist (=True) or not (=False).')

    
    # Element TextId uses Python identifier TextId
    __TextId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TextId'), 'TextId', '__httpddex_netxmlern351_Text_TextId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3565, 9), )

    
    TextId = property(__TextId.value, __TextId.set, None, 'A ddex:Composite containing details of an ddex:Identifier of the ern:Text.')

    
    # Element IndirectTextId uses Python identifier IndirectTextId
    __IndirectTextId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectTextId'), 'IndirectTextId', '__httpddex_netxmlern351_Text_IndirectTextId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3570, 9), )

    
    IndirectTextId = property(__IndirectTextId.value, __IndirectTextId.set, None, 'A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:Text.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern351_Text_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3576, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:Text within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern351_Text_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3586, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:Text.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern351_Text_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3592, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:Text.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_Text_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3598, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ern:Text.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern351_Text_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3603, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Text was created.')

    
    # Element TextDetailsByTerritory uses Python identifier TextDetailsByTerritory
    __TextDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TextDetailsByTerritory'), 'TextDetailsByTerritory', '__httpddex_netxmlern351_Text_TextDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3608, 9), )

    
    TextDetailsByTerritory = property(__TextDetailsByTerritory.value, __TextDetailsByTerritory.set, None, 'A ddex:Composite containing details of the ern:Text which may vary according to ddex:Territory of release.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern351_Text_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3615, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3615, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The ddex:Flag indicating whether the ern:Text ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:Text data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_Text_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3620, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3620, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:Text as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TextType.name() : __TextType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __TextId.name() : __TextId,
        __IndirectTextId.name() : __IndirectTextId,
        __ResourceReference.name() : __ResourceReference,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __Title.name() : __Title,
        __CreationDate.name() : __CreationDate,
        __TextDetailsByTerritory.name() : __TextDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Text', Text)


# Complex type {http://ddex.net/xml/ern/351}TextDetailsByTerritory with content type ELEMENT_ONLY
class TextDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:Text which may vary according to ddex:Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TextDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3626, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_TextDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3632, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory to which the ddex:Text details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_TextDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3637, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory to which the ddex:Text details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern351_TextDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3644, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A ddex:Composite containing details of a ddex:Contributor to the ddex:Text.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern351_TextDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3650, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Text.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern351_TextDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3656, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A ddex:Composite containing details of the ddex:CLine for the ddex:Text.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern351_TextDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3661, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:Text.')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern351_TextDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3666, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Text was originally published, whether for physical or electronic/online distribution.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_TextDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3671, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern351_TextDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3676, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A ddex:Composite containing details of a ddex:Description of the ddex:Text containing ddex:Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern351_TextDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3681, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A ddex:Composite containing details of a ddex:Synopsis of the ddex:Text.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern351_TextDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3686, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A ddex:Composite containing details of a ddex:Genre to which the ddex:Text belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern351_TextDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3691, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A ddex:Composite containing details of the classification of the ddex:Text according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element TechnicalTextDetails uses Python identifier TechnicalTextDetails
    __TechnicalTextDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalTextDetails'), 'TechnicalTextDetails', '__httpddex_netxmlern351_TextDetailsByTerritory_TechnicalTextDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3697, 9), )

    
    TechnicalTextDetails = property(__TechnicalTextDetails.value, __TechnicalTextDetails.set, None, 'A ddex:Composite containing technical details of the ddex:Text.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_TextDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3704, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3704, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ddexC:TextDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __CLine.name() : __CLine,
        __CourtesyLine.name() : __CourtesyLine,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __TechnicalTextDetails.name() : __TechnicalTextDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'TextDetailsByTerritory', TextDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/351}UserDefinedResource with content type ELEMENT_ONLY
class UserDefinedResource (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:UserDefinedResource."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserDefinedResource')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3710, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element UserDefinedResourceType uses Python identifier UserDefinedResourceType
    __UserDefinedResourceType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceType'), 'UserDefinedResourceType', '__httpddex_netxmlern351_UserDefinedResource_UserDefinedResourceType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3715, 9), )

    
    UserDefinedResourceType = property(__UserDefinedResourceType.value, __UserDefinedResourceType.set, None, 'A ddex:Composite containing details of the ddex:Type of the ern:UserDefinedResource.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern351_UserDefinedResource_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3721, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The ddex:Flag indicating whether the ern:UserDefinedResource is related to an ddex:Artist (=True) or not (=False).')

    
    # Element UserDefinedResourceId uses Python identifier UserDefinedResourceId
    __UserDefinedResourceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceId'), 'UserDefinedResourceId', '__httpddex_netxmlern351_UserDefinedResource_UserDefinedResourceId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3726, 9), )

    
    UserDefinedResourceId = property(__UserDefinedResourceId.value, __UserDefinedResourceId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of the ern:UserDefinedResource.')

    
    # Element IndirectUserDefinedResourceId uses Python identifier IndirectUserDefinedResourceId
    __IndirectUserDefinedResourceId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectUserDefinedResourceId'), 'IndirectUserDefinedResourceId', '__httpddex_netxmlern351_UserDefinedResource_IndirectUserDefinedResourceId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3732, 9), )

    
    IndirectUserDefinedResourceId = property(__IndirectUserDefinedResourceId.value, __IndirectUserDefinedResourceId.set, None, 'A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:UserDefinedResource.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern351_UserDefinedResource_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3738, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:UserDefinedResource within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern351_UserDefinedResource_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3748, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:UserDefinedResource.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern351_UserDefinedResource_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3754, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:UserDefinedResource.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_UserDefinedResource_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3760, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ern:UserDefinedResource.')

    
    # Element UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern351_UserDefinedResource_UserDefinedValue', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3765, 9), )

    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A ddex:Composite containing details of a ddex:UserDefinedValue.')

    
    # Element UserDefinedResourceDetailsByTerritory uses Python identifier UserDefinedResourceDetailsByTerritory
    __UserDefinedResourceDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceDetailsByTerritory'), 'UserDefinedResourceDetailsByTerritory', '__httpddex_netxmlern351_UserDefinedResource_UserDefinedResourceDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3771, 9), )

    
    UserDefinedResourceDetailsByTerritory = property(__UserDefinedResourceDetailsByTerritory.value, __UserDefinedResourceDetailsByTerritory.set, None, 'A ddex:Composite containing details of the ern:UserDefinedResource which may vary according to ddex:Territory of release.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern351_UserDefinedResource_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3778, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3778, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The ddex:Flag indicating whether the ern:UserDefinedResource ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:UserDefinedResource data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_UserDefinedResource_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3783, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3783, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:UserDefinedResource as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __UserDefinedResourceType.name() : __UserDefinedResourceType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __UserDefinedResourceId.name() : __UserDefinedResourceId,
        __IndirectUserDefinedResourceId.name() : __IndirectUserDefinedResourceId,
        __ResourceReference.name() : __ResourceReference,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __Title.name() : __Title,
        __UserDefinedValue.name() : __UserDefinedValue,
        __UserDefinedResourceDetailsByTerritory.name() : __UserDefinedResourceDetailsByTerritory
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'UserDefinedResource', UserDefinedResource)


# Complex type {http://ddex.net/xml/ern/351}UserDefinedResourceDetailsByTerritory with content type ELEMENT_ONLY
class UserDefinedResourceDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of ddex:Descriptors, Dates and other attributes of a ddex:UserDefinedResource application which may vary according to ddex:Territory of release."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'UserDefinedResourceDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3789, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3795, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory to which the ddex:UserDefinedResource details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3800, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory to which the ddex:UserDefinedResource details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3807, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A ddex:Composite containing details of a ddex:Contributor to the ddex:UserDefinedResource.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3813, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:UserDefinedResource.')

    
    # Element UserDefinedValue uses Python identifier UserDefinedValue
    __UserDefinedValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), 'UserDefinedValue', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_UserDefinedValue', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3819, 9), )

    
    UserDefinedValue = property(__UserDefinedValue.value, __UserDefinedValue.set, None, 'A ddex:Composite containing details of a ddex:UserDefinedValue.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3825, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A ddex:Composite containing details of the ddex:PLine for the ddex:UserDefinedResource.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3830, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A ddex:Composite containing details of the ddex:CLine for the ddex:UserDefinedResource.')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3835, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:UserDefinedResource was originally published, whether for physical or electronic/online distribution.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3840, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3845, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A ddex:Composite containing details of a ddex:Description of the ddex:UserDefinedResource containing ddex:Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3850, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A ddex:Composite containing details of a ddex:Synopsis of the ddex:UserDefinedResource.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3855, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A ddex:Composite containing details of a ddex:Genre to which the ddex:UserDefinedResource belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3860, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A ddex:Composite containing details of the classification of the ddex:UserDefinedResource according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element TechnicalUserDefinedResourceDetails uses Python identifier TechnicalUserDefinedResourceDetails
    __TechnicalUserDefinedResourceDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalUserDefinedResourceDetails'), 'TechnicalUserDefinedResourceDetails', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_TechnicalUserDefinedResourceDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3866, 9), )

    
    TechnicalUserDefinedResourceDetails = property(__TechnicalUserDefinedResourceDetails.value, __TechnicalUserDefinedResourceDetails.set, None, 'A ddex:Composite containing technical details of the ddex:UserDefinedResource.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_UserDefinedResourceDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3873, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3873, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ddexC:UserDefinedResourceDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __UserDefinedValue.name() : __UserDefinedValue,
        __PLine.name() : __PLine,
        __CLine.name() : __CLine,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __TechnicalUserDefinedResourceDetails.name() : __TechnicalUserDefinedResourceDetails
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'UserDefinedResourceDetailsByTerritory', UserDefinedResourceDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/351}Video with content type ELEMENT_ONLY
class Video (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a ddex:Video."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Video')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3879, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element VideoType uses Python identifier VideoType
    __VideoType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoType'), 'VideoType', '__httpddex_netxmlern351_Video_VideoType', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3884, 9), )

    
    VideoType = property(__VideoType.value, __VideoType.set, None, 'A ddex:Composite containing details of the ddex:Type of the ern:Video.')

    
    # Element IsArtistRelated uses Python identifier IsArtistRelated
    __IsArtistRelated = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), 'IsArtistRelated', '__httpddex_netxmlern351_Video_IsArtistRelated', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3889, 9), )

    
    IsArtistRelated = property(__IsArtistRelated.value, __IsArtistRelated.set, None, 'The ddex:Flag indicating whether the ern:Video is related to an ddex:Artist (=True) or not (=False).')

    
    # Element VideoId uses Python identifier VideoId
    __VideoId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoId'), 'VideoId', '__httpddex_netxmlern351_Video_VideoId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3894, 9), )

    
    VideoId = property(__VideoId.value, __VideoId.set, None, 'A ddex:Composite containing details of an ddex:Identifier of the ern:Video.')

    
    # Element IndirectVideoId uses Python identifier IndirectVideoId
    __IndirectVideoId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectVideoId'), 'IndirectVideoId', '__httpddex_netxmlern351_Video_IndirectVideoId', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3899, 9), )

    
    IndirectVideoId = property(__IndirectVideoId.value, __IndirectVideoId.set, None, 'A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:Video.')

    
    # Element ResourceReference uses Python identifier ResourceReference
    __ResourceReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceReference'), 'ResourceReference', '__httpddex_netxmlern351_Video_ResourceReference', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3905, 9), )

    
    ResourceReference = property(__ResourceReference.value, __ResourceReference.set, None, 'The ddex:Identifier (specific to the ddex:Message) of the ern:Video within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.')

    
    # Element VideoCueSheetReference uses Python identifier VideoCueSheetReference
    __VideoCueSheetReference = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoCueSheetReference'), 'VideoCueSheetReference', '__httpddex_netxmlern351_Video_VideoCueSheetReference', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3916, 12), )

    
    VideoCueSheetReference = property(__VideoCueSheetReference.value, __VideoCueSheetReference.set, None, 'A ddex:Composite containing a ddex:VideoCueSheetReference for a ddex:CueSheet (specific to this ddex:Message).')

    
    # Element ReasonForCueSheetAbsence uses Python identifier ReasonForCueSheetAbsence
    __ReasonForCueSheetAbsence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReasonForCueSheetAbsence'), 'ReasonForCueSheetAbsence', '__httpddex_netxmlern351_Video_ReasonForCueSheetAbsence', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3922, 12), )

    
    ReasonForCueSheetAbsence = property(__ReasonForCueSheetAbsence.value, __ReasonForCueSheetAbsence.set, None, 'A ddex:Composite containing the textual ddex:Description of the reason for the ddex:Identifier being used as a proxy.')

    
    # Element ReferenceTitle uses Python identifier ReferenceTitle
    __ReferenceTitle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), 'ReferenceTitle', '__httpddex_netxmlern351_Video_ReferenceTitle', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3928, 9), )

    
    ReferenceTitle = property(__ReferenceTitle.value, __ReferenceTitle.set, None, 'A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:Video.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_Video_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3933, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ern:Video.')

    
    # Element InstrumentationDescription uses Python identifier InstrumentationDescription
    __InstrumentationDescription = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), 'InstrumentationDescription', '__httpddex_netxmlern351_Video_InstrumentationDescription', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3938, 9), )

    
    InstrumentationDescription = property(__InstrumentationDescription.value, __InstrumentationDescription.set, None, 'A ddex:Composite containing a ddex:Description of the ddex:Type of instrumentation of the MusicalWork(s) in the ern:Video.')

    
    # Element IsMedley uses Python identifier IsMedley
    __IsMedley = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsMedley'), 'IsMedley', '__httpddex_netxmlern351_Video_IsMedley', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3943, 9), )

    
    IsMedley = property(__IsMedley.value, __IsMedley.set, None, 'The ddex:Flag indicating whether the ern:Video is a ddex:Medley (=True) or not (=False).')

    
    # Element IsPotpourri uses Python identifier IsPotpourri
    __IsPotpourri = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), 'IsPotpourri', '__httpddex_netxmlern351_Video_IsPotpourri', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3948, 9), )

    
    IsPotpourri = property(__IsPotpourri.value, __IsPotpourri.set, None, 'The ddex:Flag indicating whether the ern:Video is a ddex:Potpourri (=True) or not (=False).')

    
    # Element IsInstrumental uses Python identifier IsInstrumental
    __IsInstrumental = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), 'IsInstrumental', '__httpddex_netxmlern351_Video_IsInstrumental', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3953, 9), )

    
    IsInstrumental = property(__IsInstrumental.value, __IsInstrumental.set, None, 'The ddex:Flag indicating whether the ern:Video is instrumental (=True) or not (=False).')

    
    # Element IsBackground uses Python identifier IsBackground
    __IsBackground = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBackground'), 'IsBackground', '__httpddex_netxmlern351_Video_IsBackground', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3958, 9), )

    
    IsBackground = property(__IsBackground.value, __IsBackground.set, None, 'The ddex:Flag indicating whether the ern:Video is used as background to other audio or audiovisual material (=True) or not (=False).')

    
    # Element IsHiddenResource uses Python identifier IsHiddenResource
    __IsHiddenResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), 'IsHiddenResource', '__httpddex_netxmlern351_Video_IsHiddenResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3963, 9), )

    
    IsHiddenResource = property(__IsHiddenResource.value, __IsHiddenResource.set, None, 'The ddex:Flag indicating whether the ern:Video is hidden in some way from the ddex:Consumer (=True) or not (=False).')

    
    # Element IsBonusResource uses Python identifier IsBonusResource
    __IsBonusResource = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), 'IsBonusResource', '__httpddex_netxmlern351_Video_IsBonusResource', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3968, 9), )

    
    IsBonusResource = property(__IsBonusResource.value, __IsBonusResource.set, None, 'The ddex:Flag indicating whether the ern:Video is additional to those on the original ddex:Release of which this is a ddex:Version (=True) or not (=False).')

    
    # Element IsRemastered uses Python identifier IsRemastered
    __IsRemastered = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IsRemastered'), 'IsRemastered', '__httpddex_netxmlern351_Video_IsRemastered', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3973, 9), )

    
    IsRemastered = property(__IsRemastered.value, __IsRemastered.set, None, 'The ddex:Flag indicating whether the ern:Video is remastered (=True) or not (=False).')

    
    # Element NoSilenceBefore uses Python identifier NoSilenceBefore
    __NoSilenceBefore = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), 'NoSilenceBefore', '__httpddex_netxmlern351_Video_NoSilenceBefore', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3978, 9), )

    
    NoSilenceBefore = property(__NoSilenceBefore.value, __NoSilenceBefore.set, None, 'The ddex:Flag indicating whether the ern:Video is preceded by a period of silence (=False) or not (=True). ')

    
    # Element NoSilenceAfter uses Python identifier NoSilenceAfter
    __NoSilenceAfter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), 'NoSilenceAfter', '__httpddex_netxmlern351_Video_NoSilenceAfter', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3983, 9), )

    
    NoSilenceAfter = property(__NoSilenceAfter.value, __NoSilenceAfter.set, None, 'The ddex:Flag indicating whether the ern:Video is followed by a period of silence (=False) or not (=True). ')

    
    # Element PerformerInformationRequired uses Python identifier PerformerInformationRequired
    __PerformerInformationRequired = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), 'PerformerInformationRequired', '__httpddex_netxmlern351_Video_PerformerInformationRequired', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3988, 9), )

    
    PerformerInformationRequired = property(__PerformerInformationRequired.value, __PerformerInformationRequired.set, None, 'A ddex:Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the ern:Video.')

    
    # Element LanguageOfPerformance uses Python identifier LanguageOfPerformance
    __LanguageOfPerformance = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), 'LanguageOfPerformance', '__httpddex_netxmlern351_Video_LanguageOfPerformance', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3993, 9), )

    
    LanguageOfPerformance = property(__LanguageOfPerformance.value, __LanguageOfPerformance.set, None, 'The ddex:Language of the ddex:Performance recorded in the ern:Video (represented by an ISO 639-2 iso639a2:LanguageCode).')

    
    # Element Duration uses Python identifier Duration
    __Duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Duration'), 'Duration', '__httpddex_netxmlern351_Video_Duration', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3999, 9), )

    
    Duration = property(__Duration.value, __Duration.set, None, 'The ddex:Duration of the ern:Video (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern351_Video_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4004, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:Video.')

    
    # Element VideoCollectionReferenceList uses Python identifier VideoCollectionReferenceList
    __VideoCollectionReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoCollectionReferenceList'), 'VideoCollectionReferenceList', '__httpddex_netxmlern351_Video_VideoCollectionReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4009, 9), )

    
    VideoCollectionReferenceList = property(__VideoCollectionReferenceList.value, __VideoCollectionReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:Collections. The referenced ddex:Collection has to be of ddex:CollectionType ddex:VideoChapter.')

    
    # Element ResourceMusicalWorkReferenceList uses Python identifier ResourceMusicalWorkReferenceList
    __ResourceMusicalWorkReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), 'ResourceMusicalWorkReferenceList', '__httpddex_netxmlern351_Video_ResourceMusicalWorkReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4015, 9), )

    
    ResourceMusicalWorkReferenceList = property(__ResourceMusicalWorkReferenceList.value, __ResourceMusicalWorkReferenceList.set, None, 'A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:Video.')

    
    # Element ResourceContainedResourceReferenceList uses Python identifier ResourceContainedResourceReferenceList
    __ResourceContainedResourceReferenceList = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), 'ResourceContainedResourceReferenceList', '__httpddex_netxmlern351_Video_ResourceContainedResourceReferenceList', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4021, 9), )

    
    ResourceContainedResourceReferenceList = property(__ResourceContainedResourceReferenceList.value, __ResourceContainedResourceReferenceList.set, None, 'A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:Video.')

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__httpddex_netxmlern351_Video_CreationDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4027, 9), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Video was created.')

    
    # Element MasteredDate uses Python identifier MasteredDate
    __MasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MasteredDate'), 'MasteredDate', '__httpddex_netxmlern351_Video_MasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4032, 9), )

    
    MasteredDate = property(__MasteredDate.value, __MasteredDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Video was originally mastered (in either analogue or digital form).')

    
    # Element VideoDetailsByTerritory uses Python identifier VideoDetailsByTerritory
    __VideoDetailsByTerritory = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'VideoDetailsByTerritory'), 'VideoDetailsByTerritory', '__httpddex_netxmlern351_Video_VideoDetailsByTerritory', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4037, 9), )

    
    VideoDetailsByTerritory = property(__VideoDetailsByTerritory.value, __VideoDetailsByTerritory.set, None, 'A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:Video which may vary according to ddex:Territory of release. ')

    
    # Element TerritoryOfCommissioning uses Python identifier TerritoryOfCommissioning
    __TerritoryOfCommissioning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning'), 'TerritoryOfCommissioning', '__httpddex_netxmlern351_Video_TerritoryOfCommissioning', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4043, 9), )

    
    TerritoryOfCommissioning = property(__TerritoryOfCommissioning.value, __TerritoryOfCommissioning.set, None, 'The country of commissioning (represented by an ISO 3166-1 iso3166a2:TerritoryCode).')

    
    # Element NumberOfFeaturedArtists uses Python identifier NumberOfFeaturedArtists
    __NumberOfFeaturedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists'), 'NumberOfFeaturedArtists', '__httpddex_netxmlern351_Video_NumberOfFeaturedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4048, 9), )

    
    NumberOfFeaturedArtists = property(__NumberOfFeaturedArtists.value, __NumberOfFeaturedArtists.set, None, 'The number of ddex:FeaturedArtists associated with the ddex:Video.')

    
    # Element NumberOfNonFeaturedArtists uses Python identifier NumberOfNonFeaturedArtists
    __NumberOfNonFeaturedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists'), 'NumberOfNonFeaturedArtists', '__httpddex_netxmlern351_Video_NumberOfNonFeaturedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4053, 9), )

    
    NumberOfNonFeaturedArtists = property(__NumberOfNonFeaturedArtists.value, __NumberOfNonFeaturedArtists.set, None, 'The number of ddex:NonFeaturedArtists associated with the ddex:Video.')

    
    # Element NumberOfContractedArtists uses Python identifier NumberOfContractedArtists
    __NumberOfContractedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists'), 'NumberOfContractedArtists', '__httpddex_netxmlern351_Video_NumberOfContractedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4058, 9), )

    
    NumberOfContractedArtists = property(__NumberOfContractedArtists.value, __NumberOfContractedArtists.set, None, 'The number of ddex:ContractedArtists associated with the ddex:Video.')

    
    # Element NumberOfNonContractedArtists uses Python identifier NumberOfNonContractedArtists
    __NumberOfNonContractedArtists = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists'), 'NumberOfNonContractedArtists', '__httpddex_netxmlern351_Video_NumberOfNonContractedArtists', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4063, 9), )

    
    NumberOfNonContractedArtists = property(__NumberOfNonContractedArtists.value, __NumberOfNonContractedArtists.set, None, 'The number of ddex:NonContractedArtists associated with the ddex:Video.')

    
    # Attribute IsUpdated uses Python identifier IsUpdated
    __IsUpdated = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'IsUpdated'), 'IsUpdated', '__httpddex_netxmlern351_Video_IsUpdated', pyxb.binding.datatypes.boolean)
    __IsUpdated._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4069, 6)
    __IsUpdated._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4069, 6)
    
    IsUpdated = property(__IsUpdated.value, __IsUpdated.set, None, 'The ddex:Flag indicating whether the ern:Video ddex:Element was updated (=True) or not (=False). The ddex:Flag may only be used when the ddex:UpdateIndicator is set to ddex:UpdateMessage. When this ddex:Boolean ddex:Flag is set to true, the ddex:MessageRecipient is expected to replace any previously provided ern:Video data with the now provided data.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_Video_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4074, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4074, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ern:Video as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __VideoType.name() : __VideoType,
        __IsArtistRelated.name() : __IsArtistRelated,
        __VideoId.name() : __VideoId,
        __IndirectVideoId.name() : __IndirectVideoId,
        __ResourceReference.name() : __ResourceReference,
        __VideoCueSheetReference.name() : __VideoCueSheetReference,
        __ReasonForCueSheetAbsence.name() : __ReasonForCueSheetAbsence,
        __ReferenceTitle.name() : __ReferenceTitle,
        __Title.name() : __Title,
        __InstrumentationDescription.name() : __InstrumentationDescription,
        __IsMedley.name() : __IsMedley,
        __IsPotpourri.name() : __IsPotpourri,
        __IsInstrumental.name() : __IsInstrumental,
        __IsBackground.name() : __IsBackground,
        __IsHiddenResource.name() : __IsHiddenResource,
        __IsBonusResource.name() : __IsBonusResource,
        __IsRemastered.name() : __IsRemastered,
        __NoSilenceBefore.name() : __NoSilenceBefore,
        __NoSilenceAfter.name() : __NoSilenceAfter,
        __PerformerInformationRequired.name() : __PerformerInformationRequired,
        __LanguageOfPerformance.name() : __LanguageOfPerformance,
        __Duration.name() : __Duration,
        __RightsAgreementId.name() : __RightsAgreementId,
        __VideoCollectionReferenceList.name() : __VideoCollectionReferenceList,
        __ResourceMusicalWorkReferenceList.name() : __ResourceMusicalWorkReferenceList,
        __ResourceContainedResourceReferenceList.name() : __ResourceContainedResourceReferenceList,
        __CreationDate.name() : __CreationDate,
        __MasteredDate.name() : __MasteredDate,
        __VideoDetailsByTerritory.name() : __VideoDetailsByTerritory,
        __TerritoryOfCommissioning.name() : __TerritoryOfCommissioning,
        __NumberOfFeaturedArtists.name() : __NumberOfFeaturedArtists,
        __NumberOfNonFeaturedArtists.name() : __NumberOfNonFeaturedArtists,
        __NumberOfContractedArtists.name() : __NumberOfContractedArtists,
        __NumberOfNonContractedArtists.name() : __NumberOfNonContractedArtists
    })
    _AttributeMap.update({
        __IsUpdated.name() : __IsUpdated,
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'Video', Video)


# Complex type {http://ddex.net/xml/ern/351}VideoDetailsByTerritory with content type ELEMENT_ONLY
class VideoDetailsByTerritory (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of ddex:Descriptors and other attributes of a ddex:Video which may vary according to ddex:Territory of release. """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'VideoDetailsByTerritory')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4080, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element TerritoryCode uses Python identifier TerritoryCode
    __TerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), 'TerritoryCode', '__httpddex_netxmlern351_VideoDetailsByTerritory_TerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4086, 12), )

    
    TerritoryCode = property(__TerritoryCode.value, __TerritoryCode.set, None, 'A ddex:Territory to which the ddex:SoundRecording details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ')

    
    # Element ExcludedTerritoryCode uses Python identifier ExcludedTerritoryCode
    __ExcludedTerritoryCode = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), 'ExcludedTerritoryCode', '__httpddex_netxmlern351_VideoDetailsByTerritory_ExcludedTerritoryCode', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4091, 12), )

    
    ExcludedTerritoryCode = property(__ExcludedTerritoryCode.value, __ExcludedTerritoryCode.set, None, 'A ddex:Territory to which the ddex:SoundRecording details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.')

    
    # Element Title uses Python identifier Title
    __Title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Title'), 'Title', '__httpddex_netxmlern351_VideoDetailsByTerritory_Title', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4098, 9), )

    
    Title = property(__Title.value, __Title.set, None, 'A ddex:Composite containing details of a ddex:Title of the ddex:SoundRecording.')

    
    # Element DisplayArtist uses Python identifier DisplayArtist
    __DisplayArtist = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), 'DisplayArtist', '__httpddex_netxmlern351_VideoDetailsByTerritory_DisplayArtist', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4103, 9), )

    
    DisplayArtist = property(__DisplayArtist.value, __DisplayArtist.set, None, 'A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:SoundRecording. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element DisplayConductor uses Python identifier DisplayConductor
    __DisplayConductor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), 'DisplayConductor', '__httpddex_netxmlern351_VideoDetailsByTerritory_DisplayConductor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4108, 9), )

    
    DisplayConductor = property(__DisplayConductor.value, __DisplayConductor.set, None, 'A ddex:Composite containing details of a ddex:DisplayConductor for the ddex:Video. A ddex:DisplayConductor may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Element ResourceContributor uses Python identifier ResourceContributor
    __ResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), 'ResourceContributor', '__httpddex_netxmlern351_VideoDetailsByTerritory_ResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4113, 9), )

    
    ResourceContributor = property(__ResourceContributor.value, __ResourceContributor.set, None, 'A ddex:Composite containing details of a ddex:Contributor to the ddex:Video.')

    
    # Element IndirectResourceContributor uses Python identifier IndirectResourceContributor
    __IndirectResourceContributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), 'IndirectResourceContributor', '__httpddex_netxmlern351_VideoDetailsByTerritory_IndirectResourceContributor', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4119, 9), )

    
    IndirectResourceContributor = property(__IndirectResourceContributor.value, __IndirectResourceContributor.set, None, 'A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SoundRecording.')

    
    # Element RightsAgreementId uses Python identifier RightsAgreementId
    __RightsAgreementId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), 'RightsAgreementId', '__httpddex_netxmlern351_VideoDetailsByTerritory_RightsAgreementId', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4125, 9), )

    
    RightsAgreementId = property(__RightsAgreementId.value, __RightsAgreementId.set, None, 'A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:SoundRecording.')

    
    # Element LabelName uses Python identifier LabelName
    __LabelName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LabelName'), 'LabelName', '__httpddex_netxmlern351_VideoDetailsByTerritory_LabelName', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4130, 9), )

    
    LabelName = property(__LabelName.value, __LabelName.set, None, 'A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.')

    
    # Element RightsController uses Python identifier RightsController
    __RightsController = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RightsController'), 'RightsController', '__httpddex_netxmlern351_VideoDetailsByTerritory_RightsController', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4135, 9), )

    
    RightsController = property(__RightsController.value, __RightsController.set, None, 'A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:Video.')

    
    # Element RemasteredDate uses Python identifier RemasteredDate
    __RemasteredDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), 'RemasteredDate', '__httpddex_netxmlern351_VideoDetailsByTerritory_RemasteredDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4141, 9), )

    
    RemasteredDate = property(__RemasteredDate.value, __RemasteredDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was re-mastered (usually digitally).')

    
    # Element OriginalResourceReleaseDate uses Python identifier OriginalResourceReleaseDate
    __OriginalResourceReleaseDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), 'OriginalResourceReleaseDate', '__httpddex_netxmlern351_VideoDetailsByTerritory_OriginalResourceReleaseDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4146, 9), )

    
    OriginalResourceReleaseDate = property(__OriginalResourceReleaseDate.value, __OriginalResourceReleaseDate.set, None, 'A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was originally published, whether for physical or electronic/online distribution.')

    
    # Element PLine uses Python identifier PLine
    __PLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PLine'), 'PLine', '__httpddex_netxmlern351_VideoDetailsByTerritory_PLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4151, 9), )

    
    PLine = property(__PLine.value, __PLine.set, None, 'A ddex:Composite containing details of the ddex:PLine for the ddex:SoundRecording.')

    
    # Element CourtesyLine uses Python identifier CourtesyLine
    __CourtesyLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), 'CourtesyLine', '__httpddex_netxmlern351_VideoDetailsByTerritory_CourtesyLine', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4156, 9), )

    
    CourtesyLine = property(__CourtesyLine.value, __CourtesyLine.set, None, 'A ddex:Composite containing an ddex:Annotation ddex:Annotation which acknowledges record companies and/or other Parties giving permission for guests ddex:Artists or others featured on the ddex:Video.')

    
    # Element SequenceNumber uses Python identifier SequenceNumber
    __SequenceNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), 'SequenceNumber', '__httpddex_netxmlern351_VideoDetailsByTerritory_SequenceNumber', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4161, 9), )

    
    SequenceNumber = property(__SequenceNumber.value, __SequenceNumber.set, None, 'The number indicating the order of the ddex:Video in a group of ddex:Videos in a ddex:Release.')

    
    # Element HostSoundCarrier uses Python identifier HostSoundCarrier
    __HostSoundCarrier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), 'HostSoundCarrier', '__httpddex_netxmlern351_VideoDetailsByTerritory_HostSoundCarrier', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4166, 9), )

    
    HostSoundCarrier = property(__HostSoundCarrier.value, __HostSoundCarrier.set, None, 'A ddex:Composite containing details of a ddex:HostSoundCarrier on which the ddex:Video appears (e.g., the CD on which it was originally released). This ddex:Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of ddex:Video information.')

    
    # Element MarketingComment uses Python identifier MarketingComment
    __MarketingComment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MarketingComment'), 'MarketingComment', '__httpddex_netxmlern351_VideoDetailsByTerritory_MarketingComment', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4172, 9), )

    
    MarketingComment = property(__MarketingComment.value, __MarketingComment.set, None, 'A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:Video.')

    
    # Element Genre uses Python identifier Genre
    __Genre = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Genre'), 'Genre', '__httpddex_netxmlern351_VideoDetailsByTerritory_Genre', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4177, 9), )

    
    Genre = property(__Genre.value, __Genre.set, None, 'A ddex:Composite containing details of a ddex:Genre to which the ddex:Video belongs.')

    
    # Element ParentalWarningType uses Python identifier ParentalWarningType
    __ParentalWarningType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), 'ParentalWarningType', '__httpddex_netxmlern351_VideoDetailsByTerritory_ParentalWarningType', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4182, 9), )

    
    ParentalWarningType = property(__ParentalWarningType.value, __ParentalWarningType.set, None, 'A ddex:Composite containing details of the classification of the ddex:Video according to advice which it carries about the level of explicitness or offensiveness of its content.')

    
    # Element AvRating uses Python identifier AvRating
    __AvRating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AvRating'), 'AvRating', '__httpddex_netxmlern351_VideoDetailsByTerritory_AvRating', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4188, 9), )

    
    AvRating = property(__AvRating.value, __AvRating.set, None, 'A ddex:Composite containing details of a rating for the ddex:Video.')

    
    # Element FulfillmentDate uses Python identifier FulfillmentDate
    __FulfillmentDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), 'FulfillmentDate', '__httpddex_netxmlern351_VideoDetailsByTerritory_FulfillmentDate', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4193, 9), )

    
    FulfillmentDate = property(__FulfillmentDate.value, __FulfillmentDate.set, None, 'A ddex:Composite containing details of a ddex:FulfillmentDate.')

    
    # Element Keywords uses Python identifier Keywords
    __Keywords = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Keywords'), 'Keywords', '__httpddex_netxmlern351_VideoDetailsByTerritory_Keywords', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4198, 9), )

    
    Keywords = property(__Keywords.value, __Keywords.set, None, 'A ddex:Composite containing details of a ddex:Description of the ddex:Video containing ddex:Keywords.')

    
    # Element Synopsis uses Python identifier Synopsis
    __Synopsis = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Synopsis'), 'Synopsis', '__httpddex_netxmlern351_VideoDetailsByTerritory_Synopsis', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4203, 9), )

    
    Synopsis = property(__Synopsis.value, __Synopsis.set, None, 'A ddex:Composite containing details of a ddex:Synopsis of the ddex:Video.')

    
    # Element CLine uses Python identifier CLine
    __CLine = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CLine'), 'CLine', '__httpddex_netxmlern351_VideoDetailsByTerritory_CLine', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4208, 9), )

    
    CLine = property(__CLine.value, __CLine.set, None, 'A ddex:Composite containing details of the ddex:CLine for the ddex:Video.')

    
    # Element TechnicalVideoDetails uses Python identifier TechnicalVideoDetails
    __TechnicalVideoDetails = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TechnicalVideoDetails'), 'TechnicalVideoDetails', '__httpddex_netxmlern351_VideoDetailsByTerritory_TechnicalVideoDetails', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4213, 9), )

    
    TechnicalVideoDetails = property(__TechnicalVideoDetails.value, __TechnicalVideoDetails.set, None, 'A ddex:Composite containing technical details of the ddex:Video.')

    
    # Element Character uses Python identifier Character
    __Character = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Character'), 'Character', '__httpddex_netxmlern351_VideoDetailsByTerritory_Character', True, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4219, 9), )

    
    Character = property(__Character.value, __Character.set, None, 'A ddex:Composite containing details of a ddex:Character in the ddex:Video. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.')

    
    # Attribute LanguageAndScriptCode uses Python identifier LanguageAndScriptCode
    __LanguageAndScriptCode = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'LanguageAndScriptCode'), 'LanguageAndScriptCode', '__httpddex_netxmlern351_VideoDetailsByTerritory_LanguageAndScriptCode', pyxb.binding.datatypes.string)
    __LanguageAndScriptCode._DeclarationLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4225, 6)
    __LanguageAndScriptCode._UseLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4225, 6)
    
    LanguageAndScriptCode = property(__LanguageAndScriptCode.value, __LanguageAndScriptCode.set, None, 'The ddex:Language and script for the ddex:Elements of the ddexC:SoundRecordingDetailsByTerritory as defined in IETF RfC 4646. The default is the same as indicated for the containing composite. ddex:Language and Script are provided as lang[-scipt][-region][-variant].  This is represented in an XML schema as an XML ddex:Attribute.')

    _ElementMap.update({
        __TerritoryCode.name() : __TerritoryCode,
        __ExcludedTerritoryCode.name() : __ExcludedTerritoryCode,
        __Title.name() : __Title,
        __DisplayArtist.name() : __DisplayArtist,
        __DisplayConductor.name() : __DisplayConductor,
        __ResourceContributor.name() : __ResourceContributor,
        __IndirectResourceContributor.name() : __IndirectResourceContributor,
        __RightsAgreementId.name() : __RightsAgreementId,
        __LabelName.name() : __LabelName,
        __RightsController.name() : __RightsController,
        __RemasteredDate.name() : __RemasteredDate,
        __OriginalResourceReleaseDate.name() : __OriginalResourceReleaseDate,
        __PLine.name() : __PLine,
        __CourtesyLine.name() : __CourtesyLine,
        __SequenceNumber.name() : __SequenceNumber,
        __HostSoundCarrier.name() : __HostSoundCarrier,
        __MarketingComment.name() : __MarketingComment,
        __Genre.name() : __Genre,
        __ParentalWarningType.name() : __ParentalWarningType,
        __AvRating.name() : __AvRating,
        __FulfillmentDate.name() : __FulfillmentDate,
        __Keywords.name() : __Keywords,
        __Synopsis.name() : __Synopsis,
        __CLine.name() : __CLine,
        __TechnicalVideoDetails.name() : __TechnicalVideoDetails,
        __Character.name() : __Character
    })
    _AttributeMap.update({
        __LanguageAndScriptCode.name() : __LanguageAndScriptCode
    })
Namespace.addCategoryObject('typeBinding', 'VideoDetailsByTerritory', VideoDetailsByTerritory)


# Complex type {http://ddex.net/xml/ern/351}WebPolicy with content type ELEMENT_ONLY
class WebPolicy (pyxb.binding.basis.complexTypeDefinition):
    """A ddex:Composite containing details of a Web policy."""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'WebPolicy')
    _XSDLocation = pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4231, 3)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Condition uses Python identifier Condition
    __Condition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Condition'), 'Condition', '__httpddex_netxmlern351_WebPolicy_Condition', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4236, 9), )

    
    Condition = property(__Condition.value, __Condition.set, None, 'A ddex:Composite containing details of conditions.')

    
    # Element AccessBlockingRequested uses Python identifier AccessBlockingRequested
    __AccessBlockingRequested = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AccessBlockingRequested'), 'AccessBlockingRequested', '__httpddex_netxmlern351_WebPolicy_AccessBlockingRequested', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4241, 9), )

    
    AccessBlockingRequested = property(__AccessBlockingRequested.value, __AccessBlockingRequested.set, None, 'A ddex:Flag indicating whether a ddex:MessageRecipient shall block all access to the ddex:Release (=True) or not (=False).')

    
    # Element AccessLimitation uses Python identifier AccessLimitation
    __AccessLimitation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AccessLimitation'), 'AccessLimitation', '__httpddex_netxmlern351_WebPolicy_AccessLimitation', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4247, 12), )

    
    AccessLimitation = property(__AccessLimitation.value, __AccessLimitation.set, None, 'A ddex:Type of limitation on the access of the ddex:UgcSite. This governs whether the content of ddex:UgcSites is only accessible to members/friends of the site or not.')

    
    # Element EmbeddingAllowed uses Python identifier EmbeddingAllowed
    __EmbeddingAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EmbeddingAllowed'), 'EmbeddingAllowed', '__httpddex_netxmlern351_WebPolicy_EmbeddingAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4252, 12), )

    
    EmbeddingAllowed = property(__EmbeddingAllowed.value, __EmbeddingAllowed.set, None, 'A ddex:Flag indicating whether a user is allowed to embed a ddex:Release on his website outside the ddex:UgcSite (=True) or not (=False).')

    
    # Element UserRatingAllowed uses Python identifier UserRatingAllowed
    __UserRatingAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserRatingAllowed'), 'UserRatingAllowed', '__httpddex_netxmlern351_WebPolicy_UserRatingAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4257, 12), )

    
    UserRatingAllowed = property(__UserRatingAllowed.value, __UserRatingAllowed.set, None, 'A ddex:Flag indicating whether a user is allowed to provide a rating for the ddex:Release on the ddex:UgcSite (=True) or not (=False).')

    
    # Element UserCommentAllowed uses Python identifier UserCommentAllowed
    __UserCommentAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserCommentAllowed'), 'UserCommentAllowed', '__httpddex_netxmlern351_WebPolicy_UserCommentAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4262, 12), )

    
    UserCommentAllowed = property(__UserCommentAllowed.value, __UserCommentAllowed.set, None, 'A ddex:Flag indicating whether a user is allowed to provide a ddex:Comment for the ddex:Release on the ddex:UgcSite (=True) or not (=False).')

    
    # Element UserResponsesAllowed uses Python identifier UserResponsesAllowed
    __UserResponsesAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UserResponsesAllowed'), 'UserResponsesAllowed', '__httpddex_netxmlern351_WebPolicy_UserResponsesAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4267, 12), )

    
    UserResponsesAllowed = property(__UserResponsesAllowed.value, __UserResponsesAllowed.set, None, 'A ddex:Flag indicating whether a user is allowed to provide a response to a ddex:Comment for the ddex:Release on the ddex:UgcSite (=True) or not (=False).')

    
    # Element SyndicationAllowed uses Python identifier SyndicationAllowed
    __SyndicationAllowed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SyndicationAllowed'), 'SyndicationAllowed', '__httpddex_netxmlern351_WebPolicy_SyndicationAllowed', False, pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4272, 12), )

    
    SyndicationAllowed = property(__SyndicationAllowed.value, __SyndicationAllowed.set, None, 'A ddex:Flag indicating whether syndication is allowed (=True) or not (=False).')

    _ElementMap.update({
        __Condition.name() : __Condition,
        __AccessBlockingRequested.name() : __AccessBlockingRequested,
        __AccessLimitation.name() : __AccessLimitation,
        __EmbeddingAllowed.name() : __EmbeddingAllowed,
        __UserRatingAllowed.name() : __UserRatingAllowed,
        __UserCommentAllowed.name() : __UserCommentAllowed,
        __UserResponsesAllowed.name() : __UserResponsesAllowed,
        __SyndicationAllowed.name() : __SyndicationAllowed
    })
    _AttributeMap.update({
        
    })
Namespace.addCategoryObject('typeBinding', 'WebPolicy', WebPolicy)


NewReleaseMessage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'NewReleaseMessage'), CTD_ANON, documentation='A ddex:Message in the Release Notification Message Suite Standard, containing details of a new ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 17, 3))
Namespace.addCategoryObject('elementBinding', NewReleaseMessage.name().localName(), NewReleaseMessage)

CatalogListMessage = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'CatalogListMessage'), CTD_ANON_, documentation='A ddex:Message in the Release Notification Message Suite Standard, containing a list of ddex:Releases that form part of a catalog.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 96, 3))
Namespace.addCategoryObject('elementBinding', CatalogListMessage.name().localName(), CatalogListMessage)



CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageHeader'), _ImportedBinding__ddexC.MessageHeader, scope=CTD_ANON, documentation='The MessageHeader for the ern:NewReleaseMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 23, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UpdateIndicator'), _ImportedBinding__ddex.UpdateIndicator, scope=CTD_ANON, documentation='The indicator which distinguishes whether the ddex:Message contains original data or updates to previously sent data.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 28, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBackfill'), pyxb.binding.datatypes.boolean, scope=CTD_ANON, documentation='A ddex:Flag indicating whether the ern:NewReleaseMessage is sent as part of a backfill activity (as opposed to providing ongoing deliveries of frontline ddex:Releases) (=True) or not (=False). When this element is not present, the context is assumed to be False.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 33, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogTransfer'), CatalogTransfer, scope=CTD_ANON, documentation='A ddex:Composite containing details of a ddex:Price change.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 38, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WorkList'), _ImportedBinding__ddexC.WorkList, scope=CTD_ANON, documentation='A ddex:Composite containing details of one or more ddex:MusicalWorks, a ddex:Performance of which is contained in the ddex:Resources of the ern:NewReleaseMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 43, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueSheetList'), CueSheetList, scope=CTD_ANON, documentation='A ddex:Composite containing details of one or more ddex:CueSheets contained in ddex:Releases for which data is provided in the ern:NewReleaseMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 48, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceList'), ResourceList, scope=CTD_ANON, documentation='A ddex:Composite containing details of one or more ddex:Resources.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 53, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionList'), CollectionList, scope=CTD_ANON, documentation='A ddex:Composite containing details of one or more ddex:Collections contained in ddex:Releases for which data is provided in the ern:NewReleaseMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 58, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseList'), ReleaseList, scope=CTD_ANON, documentation='A ddex:Composite containing details of one or more ddex:DDEX ddex:Releases contained in the ern:NewReleaseMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 63, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealList'), DealList, scope=CTD_ANON, documentation='A ddex:Composite containing details of one or more ddex:Deals governing the Usage of the ddex:Releases in the ddex:Message.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 68, 12)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 33, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 38, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 43, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 48, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 58, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 68, 12))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageHeader')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 23, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'UpdateIndicator')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 28, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBackfill')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 33, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogTransfer')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 38, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'WorkList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 43, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'CueSheetList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 48, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 53, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 58, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 63, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'DealList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 68, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MessageHeader'), _ImportedBinding__ddexC.MessageHeader, scope=CTD_ANON_, documentation='The MessageHeader for the ern:CatalogListMessage.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 102, 12)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PublicationDate'), pyxb.binding.datatypes.dateTime, scope=CTD_ANON_, documentation='The ddex:DateTime at which the catalog will become available (the only allowed format is ISO 8601:2004: YYYY-MM-DDThh:mm:ssTZD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 107, 12)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogItem'), CatalogItem, scope=CTD_ANON_, documentation='A ddex:Composite containing details of a ddex:Release which is an item of the catalog.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 112, 12)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'MessageHeader')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 102, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'PublicationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 107, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogItem')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 112, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_()




CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=CatalogItem, documentation='A ddex:Territory for the ddex:Release (represented by an ISO 3166-1 iso3166a2:TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 145, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), _ImportedBinding__ddexC.ReleaseId, scope=CatalogItem, documentation='A ddex:Composite containing details of ddex:ReleaseIds. If available, a ddex:GRid has to be used. If the ern:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ern:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 150, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=CatalogItem, documentation='A ddex:Composite containing details of a ddex:Title of the ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 155, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtistName'), _ImportedBinding__ddexC.Name, scope=CatalogItem, documentation='A ddex:Composite containing the ddex:Name to be used by a ddex:DSP when presenting ddex:Artist details of the ddex:Release to a ddex:Consumer.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 160, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContributorName'), _ImportedBinding__ddexC.Name, scope=CatalogItem, documentation='A ddex:Composite containing details of a ddex:Contributor to the catalog, i.e. to at least one of the included ddex:Releases.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 165, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayTitle'), _ImportedBinding__ddexC.ReferenceTitle, scope=CatalogItem, documentation='A ddex:Composite containing details of a ddex:DisplayTitle of the ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 170, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), _ImportedBinding__ddexC.LabelName, scope=CatalogItem, documentation='A ddex:Composite containing the ddex:Name of the ddex:Label for the ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 175, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), _ImportedBinding__ddexC.Genre, scope=CatalogItem, documentation='A ddex:Composite containing details of a ddex:Genre to which the ddex:Release belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 180, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), _ImportedBinding__ddexC.PLine, scope=CatalogItem, documentation='A ddex:Composite containing details of the ddex:PLine for the ern:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 185, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), _ImportedBinding__ddexC.CLine, scope=CatalogItem, documentation='A ddex:Composite containing details of the ddex:CLine for the ern:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 190, 9)))

CatalogItem._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=CatalogItem, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Release was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 195, 9)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 180, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 185, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 190, 9))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 145, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 150, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 155, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtistName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 160, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ContributorName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 165, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 170, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 175, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 180, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 185, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 190, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CatalogItem._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 195, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CatalogItem._Automaton = _BuildAutomaton_2()




CatalogReleaseReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReference'), STD_ANON, scope=CatalogReleaseReferenceList, documentation='A ddex:Reference for a ddex:Release (specific to this ddex:Message) that is part of the catalog. This is a ddex:LocalReleaseAnchorReference starting with the letter R.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 207, 9)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CatalogReleaseReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 207, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CatalogReleaseReferenceList._Automaton = _BuildAutomaton_3()




CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogTransferCompleted'), pyxb.binding.datatypes.boolean, scope=CatalogTransfer, documentation='A ddex:Flag indicating whether the ddex:CatalogTransfer has been made (=True) or still needs to be made (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 224, 9)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EffectiveTransferDate'), _ImportedBinding__ddexC.EventDate, scope=CatalogTransfer, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the catalog is or was transferred.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 229, 9)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReferenceList'), CatalogReleaseReferenceList, scope=CatalogTransfer, documentation='A ddex:Composite containing details of one or more ddex:Releases contained in the catalog that is or was transferred.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 234, 9)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=CatalogTransfer, documentation='A ddex:Territory to which the ddex:CatalogTransfer applies (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory must be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 240, 12)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=CatalogTransfer, documentation='A ddex:Territory to which the ddex:CatalogTransfer does not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory must be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 245, 12)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TransferringFrom'), _ImportedBinding__ddexC.PartyDescriptor, scope=CatalogTransfer, documentation='A ddex:Composite containing details of the old ddex:RightsController.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 252, 9)))

CatalogTransfer._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TransferringTo'), _ImportedBinding__ddexC.PartyDescriptor, scope=CatalogTransfer, documentation='A ddex:Composite containing details of the new ddex:RightsController.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 257, 9)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 229, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogTransferCompleted')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 224, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'EffectiveTransferDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 229, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'CatalogReleaseReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 234, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 240, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 245, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'TransferringFrom')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 252, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CatalogTransfer._UseForTag(pyxb.namespace.ExpandedName(None, 'TransferringTo')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 257, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CatalogTransfer._Automaton = _BuildAutomaton_4()




Character._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), _ImportedBinding__ddexC.PartyId, scope=Character, documentation='A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 270, 12)))

Character._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), _ImportedBinding__ddexC.PartyName, scope=Character, documentation='A ddex:Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 276, 15)))

Character._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=Character, documentation='A ddex:Composite containing details of the ddex:Name, ddex:Identifier and role(s) of a ddex:Contributor.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 288, 9)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 281, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 288, 9))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Character._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 270, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Character._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 276, 15))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Character._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 281, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Character._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 288, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Character._Automaton = _BuildAutomaton_5()




Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionId'), _ImportedBinding__ddexC.CollectionId, scope=Collection, documentation='A ddex:Composite containing details of an ddex:Identifier of the ddex:Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 305, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionType'), _ImportedBinding__ddexC.CollectionType, scope=Collection, documentation='A ddex:Composite containing details of the ddex:Type of the ddex:Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 310, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionReference'), STD_ANON_, scope=Collection, documentation='The ddex:Identifier (specific to the ddex:Message) of the ddex:Collection within the ddex:Release which contains it. This is a ddex:LocalCollectionAnchor starting with the letter X.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 316, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=Collection, documentation='A ddex:Composite containing details of a ddex:Title of the ddex:Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 326, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Contributor'), ResourceContributor, scope=Collection, documentation='A ddex:Composite containing details a ddex:Contributor to the ddex:Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 331, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Character'), Character, scope=Collection, documentation='A ddex:Composite containing details of a ddex:Character in the ddex:Collection. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 337, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReferenceList'), _ImportedBinding__ddexC.CollectionCollectionReferenceList, scope=Collection, documentation='A ddex:Composite containing a list of ddex:CollectionCollectionReferences for a ddex:Collection (specific to this ddex:Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 342, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsComplete'), pyxb.binding.datatypes.boolean, scope=Collection, documentation='The ddex:Flag indicating whether the ddex:Collection is complete (=True) or not (=False). Only one of the Elements ddex:IsComplete here and in the ern:CollectionDetailsByTerritory is valid for a given ern:Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 348, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=Collection, documentation='The sum of the ddex:Durations of all ddex:Resources contained in the ddexC:Collection (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 353, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DurationOfMusicalContent'), pyxb.binding.datatypes.duration, scope=Collection, documentation='The ddex:Duration of the musical content (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 358, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), _ImportedBinding__ddexC.EventDate, scope=Collection, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Collection was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 363, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=Collection, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Collection was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 368, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalLanguage'), _ImportedBinding__iso639a2.LanguageCode, scope=Collection, documentation='The orignal ddex:Language of the ddex:Collection (represented by an ISO 639-2 iso639a2:LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 373, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionDetailsByTerritory'), CollectionDetailsByTerritory, scope=Collection, documentation='A ddex:Composite containing details of ddex:Descriptors and other attributes of the ddex:Collection which may vary according to ddex:Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 378, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionResourceReferenceList'), CollectionResourceReferenceList, scope=Collection, documentation='A ddex:Composite containing a list of ddex:CollectionResourceReferences for a ddex:Resource (specific to this ddex:Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 384, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionWorkReferenceList'), CollectionWorkReferenceList, scope=Collection, documentation='A ddex:Composite containing a list of ddex:CollectionWorkReferences for a ddex:Work (specific to this ddex:Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 390, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RepresentativeImageReference'), STD_ANON_2, scope=Collection, documentation='A ddex:Reference for an ddex:Image (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 396, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), _ImportedBinding__ddexC.PLine, scope=Collection, documentation='A ddex:Composite containing details of the ddex:PLine for the ern:Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 406, 9)))

Collection._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), _ImportedBinding__ddexC.CLine, scope=Collection, documentation='A ddex:Composite containing details of the ddex:CLine for the ern:Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 411, 9)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 310, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 326, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 331, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 337, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 342, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 353, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 358, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 363, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 368, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 373, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 378, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 384, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 390, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 396, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 406, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 411, 9))
    counters.add(cc_15)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 305, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 310, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 316, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 326, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'Contributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 331, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'Character')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 337, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionCollectionReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 342, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'IsComplete')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 348, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 353, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'DurationOfMusicalContent')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 358, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 363, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 368, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalLanguage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 373, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 378, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 384, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 390, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'RepresentativeImageReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 396, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 406, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Collection._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 411, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Collection._Automaton = _BuildAutomaton_6()




CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=CollectionDetailsByTerritory, documentation='A ddex:Territory to which the ddex:Collection details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 429, 12)))

CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=CollectionDetailsByTerritory, documentation='A ddex:Territory to which the ddex:Collection details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 434, 12)))

CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=CollectionDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Title of the ddex:Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 441, 9)))

CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Contributor'), ResourceContributor, scope=CollectionDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Contributor to the ddex:Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 446, 9)))

CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsComplete'), pyxb.binding.datatypes.boolean, scope=CollectionDetailsByTerritory, documentation='The ddex:Flag indicating whether the ddex:Collection is complete (=True) or not (=False). Only one of the Elements ddex:IsComplete here and in the Collection is valid for a given Collection.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 452, 9)))

CollectionDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Character'), Character, scope=CollectionDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Character in the ddex:Collection. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 457, 9)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 441, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 446, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 452, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 457, 9))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 429, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 434, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 441, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Contributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 446, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IsComplete')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 452, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CollectionDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Character')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 457, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionDetailsByTerritory._Automaton = _BuildAutomaton_7()




CollectionList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Collection'), Collection, scope=CollectionList, documentation='A ddex:Composite containing details of a ddex:Collection contained in a ddex:Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 469, 9)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionList._UseForTag(pyxb.namespace.ExpandedName(None, 'Collection')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 469, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionList._Automaton = _BuildAutomaton_8()




CollectionResourceReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference'), STD_ANON_3, scope=CollectionResourceReference, documentation='A ddex:Reference for a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 486, 9)))

CollectionResourceReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=CollectionResourceReference, documentation='The ddex:Duration of the use of the ddex:Resource that is referenced in the ddex:CollectionResourceReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 496, 9)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 496, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionResourceReference._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 486, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CollectionResourceReference._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 496, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionResourceReference._Automaton = _BuildAutomaton_9()




CollectionResourceReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference'), CollectionResourceReference, scope=CollectionResourceReferenceList, documentation='A ddex:Composite containing a ddex:CollectionResourceReference for a ddex:Collection (specific to this ddex:Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 508, 9)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionResourceReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 508, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionResourceReferenceList._Automaton = _BuildAutomaton_10()




CollectionWorkReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference'), STD_ANON_4, scope=CollectionWorkReference, documentation='A ddex:Reference for a ddex:Work (specific to this ddex:Message). This is a ddex:LocalMusicalWorkAnchorReference starting with the letter W.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 521, 9)))

CollectionWorkReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=CollectionWorkReference, documentation='The ddex:Duration of the use of the ddex:Work that is referenced in the ddex:CollectionWorkReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 531, 9)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 531, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionWorkReference._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 521, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CollectionWorkReference._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 531, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionWorkReference._Automaton = _BuildAutomaton_11()




CollectionWorkReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference'), CollectionWorkReference, scope=CollectionWorkReferenceList, documentation='A ddex:Composite containing a ddex:CollectionWorkReference for a ddex:Collection (specific to this ddex:Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 543, 9)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CollectionWorkReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'CollectionWorkReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 543, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CollectionWorkReferenceList._Automaton = _BuildAutomaton_12()




Condition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Value'), pyxb.binding.datatypes.decimal, scope=Condition, documentation='The numeric value of the condition.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 556, 9)))

Condition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Unit'), _ImportedBinding__ddex.UnitOfConditionValue, scope=Condition, documentation='A ddex:UnitOfMeasure for the condition value.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 561, 9)))

Condition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RelationalRelator'), _ImportedBinding__ddex.RelationalRelator, scope=Condition, documentation='A ddex:Relator expressing the accuracy of the condition value.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 566, 9)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Condition._UseForTag(pyxb.namespace.ExpandedName(None, 'Value')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 556, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Condition._UseForTag(pyxb.namespace.ExpandedName(None, 'Unit')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 561, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Condition._UseForTag(pyxb.namespace.ExpandedName(None, 'RelationalRelator')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 566, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Condition._Automaton = _BuildAutomaton_13()




Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueUseType'), _ImportedBinding__ddexC.CueUseType, scope=Cue, documentation='A ddex:Composite containing details of a ddex:UseType of the ddexC:Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 578, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueThemeType'), _ImportedBinding__ddexC.CueThemeType, scope=Cue, documentation='A ddex:Composite containing details of a ddex:ThemeType for the ddex:Creation referenced in the ddexC:Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 583, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueVocalType'), _ImportedBinding__ddexC.CueVocalType, scope=Cue, documentation='A ddex:Composite containing details of a ddex:VocalType for the ddex:Creation referenced in the ddexC:Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 588, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsDance'), pyxb.binding.datatypes.boolean, scope=Cue, documentation='A ddex:Flag indicating whether a ddex:Creation contains dancing (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 593, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueVisualPerceptionType'), _ImportedBinding__ddexC.CueVisualPerceptionType, scope=Cue, documentation='A ddex:Composite containing details of a ddex:VisualPerceptionType for the ddex:Creation referenced in the ddexC:Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 598, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueOrigin'), _ImportedBinding__ddexC.CueOrigin, scope=Cue, documentation='A ddex:Composite containing details of a ddex:CueOrigin for the ddexC:Cue. It can be expected that this element will be contractually mandatory in many communications of cue sheets to music rights societies.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 604, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueCreationReference'), _ImportedBinding__ddexC.CueCreationReference, scope=Cue, documentation='A ddex:Composite containing a ddex:CueCreationReference for a ddex:Creation (specific to this ddex:Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 610, 12)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferencedCreationType'), _ImportedBinding__ddex.CreationType, scope=Cue, documentation='A ddex:Type of the ddex:Creation referenced in the ddexC:Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 617, 15)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferencedCreationId'), _ImportedBinding__ddexC.CreationId, scope=Cue, documentation='A ddex:Composite containing details of a ddex:CreationIds.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 622, 15)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferencedCreationTitle'), _ImportedBinding__ddexC.Title, scope=Cue, documentation='A ddex:Composite containing details of a ddex:Title of the ddex:Creation referenced in the ddexC:Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 627, 15)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferencedCreationContributor'), ResourceContributor, scope=Cue, documentation='A ddex:Composite containing details a ddex:Contributor of the ddex:Creation referenced in the ddexC:Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 633, 15)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferencedCreationCharacter'), Character, scope=Cue, documentation='A ddex:Composite containing details of a ddex:Character in the ddex:Creation referenced in the ddexC:Cue. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 639, 15)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HasMusicalContent'), pyxb.binding.datatypes.boolean, scope=Cue, documentation='A ddex:Flag indicating whether whether the ddex:Creation referenced in the ddexC:Cue contains musical content such as a ddex:SoundRecording or a ddex:MusicalWork (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 647, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartTime'), pyxb.binding.datatypes.duration, scope=Cue, documentation='The start time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 652, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=Cue, documentation='The ddex:Duration of the use of the ddex:Creation that is referenced in the ddex:CueCreationReference (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 657, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EndTime'), pyxb.binding.datatypes.duration, scope=Cue, documentation='The end time of the ddex:Creation, measured from the start of the ddex:Resource from which the ddex:CueSheet is referenced (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 662, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), _ImportedBinding__ddexC.PLine, scope=Cue, documentation='A ddex:Composite containing details of the ddex:PLine for the ern:Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 667, 9)))

Cue._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), _ImportedBinding__ddexC.CLine, scope=Cue, documentation='A ddex:Composite containing details of the ddex:CLine for the ern:Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 672, 9)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 578, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 583, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 588, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 593, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 598, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 604, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 617, 15))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 622, 15))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 627, 15))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 633, 15))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 639, 15))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 647, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 652, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 657, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 662, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 667, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 672, 9))
    counters.add(cc_16)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueUseType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 578, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueThemeType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 583, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueVocalType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 588, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'IsDance')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 593, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueVisualPerceptionType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 598, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueOrigin')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 604, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CueCreationReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 610, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferencedCreationType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 617, 15))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferencedCreationId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 622, 15))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferencedCreationTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 627, 15))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferencedCreationContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 633, 15))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferencedCreationCharacter')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 639, 15))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'HasMusicalContent')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 647, 9))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'StartTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 652, 9))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 657, 9))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'EndTime')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 662, 9))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 667, 9))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Cue._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 672, 9))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Cue._Automaton = _BuildAutomaton_14()




CueSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueSheetId'), _ImportedBinding__ddexC.ProprietaryId, scope=CueSheet, documentation='A ddex:Composite containing details of a ddex:CueSheetId of the ddexC:CueSheet.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 684, 9)))

CueSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueSheetReference'), STD_ANON_5, scope=CueSheet, documentation='The ddex:Identifier (specific to the ddex:Message) of the ddexC:CueSheet within the ddex:Release which contains it. This is a ddex:LocalCueSheetAnchor starting with the letter Q.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 690, 9)))

CueSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueSheetType'), _ImportedBinding__ddexC.CueSheetType, scope=CueSheet, documentation='A ddex:Composite containing details of a ddex:Type of the ddexC:CueSheet.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 700, 9)))

CueSheet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Cue'), Cue, scope=CueSheet, documentation='A ddex:Composite containing details of a ddex:Cue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 705, 9)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 684, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CueSheet._UseForTag(pyxb.namespace.ExpandedName(None, 'CueSheetId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 684, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CueSheet._UseForTag(pyxb.namespace.ExpandedName(None, 'CueSheetReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 690, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CueSheet._UseForTag(pyxb.namespace.ExpandedName(None, 'CueSheetType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 700, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CueSheet._UseForTag(pyxb.namespace.ExpandedName(None, 'Cue')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 705, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CueSheet._Automaton = _BuildAutomaton_15()




CueSheetList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CueSheet'), CueSheet, scope=CueSheetList, documentation='A ddex:Composite containing details of a ddex:CueSheet contained in a ddex:Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 717, 9)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CueSheetList._UseForTag(pyxb.namespace.ExpandedName(None, 'CueSheet')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 717, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CueSheetList._Automaton = _BuildAutomaton_16()




Deal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealReference'), _ImportedBinding__ddexC.DealReference, scope=Deal, documentation='A ddex:Composite containing a ddex:Reference to a ddex:TextDocument containing details of the ern:Deal (in the form of an ddex:Identifier, ddex:Name or ddex:Description).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 729, 9)))

Deal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealTerms'), DealTerms, scope=Deal, documentation='A ddex:Composite containing details of the terms of the ern:Deal.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 735, 9)))

Deal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceUsage'), ResourceUsage, scope=Deal, documentation='A ddex:Composite containing details of one or more Usages that govern a ddex:Resource in the ern:Deal where the Usage of the ddex:Resource differs from the Usage of the other ddex:Resources in the same ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 740, 9)))

Deal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReferenceList'), DealTechnicalResourceDetailsReferenceList, scope=Deal, documentation='A ddex:Composite containing a list of ddex:DealTechnicalResourceDetailsReferences for the ern:Deal.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 745, 9)))

Deal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DistributionChannelPage'), _ImportedBinding__ddexC.WebPage, scope=Deal, documentation='A ddex:Composite containing details of a ddex:WebPage for the ddex:DistributionChannel.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 751, 9)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 729, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 735, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 740, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 745, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 751, 9))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Deal._UseForTag(pyxb.namespace.ExpandedName(None, 'DealReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 729, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Deal._UseForTag(pyxb.namespace.ExpandedName(None, 'DealTerms')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 735, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Deal._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceUsage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 740, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Deal._UseForTag(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 745, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Deal._UseForTag(pyxb.namespace.ExpandedName(None, 'DistributionChannelPage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 751, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Deal._Automaton = _BuildAutomaton_17()




DealList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDeal'), ReleaseDeal, scope=DealList, documentation='A ddex:Composite containing details of one or more ddex:Deals pertaining to one or more ddex:Releases.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 769, 9)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 769, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DealList._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDeal')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 769, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DealList._Automaton = _BuildAutomaton_18()




DealTechnicalResourceDetailsReferenceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReference'), STD_ANON_6, scope=DealTechnicalResourceDetailsReferenceList, documentation='A ddex:Reference for a ddex:Composite specifying technical details of a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalTechnicalResourceDetailsAnchorReference starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 786, 9)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DealTechnicalResourceDetailsReferenceList._UseForTag(pyxb.namespace.ExpandedName(None, 'DealTechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 786, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DealTechnicalResourceDetailsReferenceList._Automaton = _BuildAutomaton_19()




DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CommercialModelType'), _ImportedBinding__ddexC.CommercialModelType, scope=DealTerms, documentation='A ddex:Composite containing details of the fundamental business model which applies to the ddex:Deal (e.g. ddex:SubscriptionModel and ddex:PayAsYouGoModel). The ddex:CommercialModelType indicates how the ddex:Consumer pays for the ddex:Service or ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 803, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Usage'), _ImportedBinding__ddexC.Usage, scope=DealTerms, documentation='A ddex:Composite containing the ddex:Types and number of Usages applicable to a ddex:Release to which the ddex:Deal applies.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 810, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AllDealsCancelled'), pyxb.binding.datatypes.boolean, scope=DealTerms, documentation='The ddex:Flag indicating whether all ddex:Deals are cancelled for the given Territories (=True) or not (=False). This ddex:Flag can be used in conjunction with a ddex:StartDate of a ddex:ValidityPeriod to indicate the point in time from which all ddex:Deals are cancelled.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 815, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TakeDown'), pyxb.binding.datatypes.boolean, scope=DealTerms, documentation="The ddex:Flag indicating whether all ddex:Releases referred to are to be taken down by the ddex:MessageRecipient. This includes that all ddex:Deals referred to in a specific ddex:Composite are cancelled and no information about the ddex:Releases should be displayed to the end user on the DSP's website (=True) or not (=False). This ddex:Flag can be used in conjunction with a ddex:StartDate of a ddex:ValidityPeriod to indicate the point in time from which all ddex:Deals are cancelled.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 820, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=DealTerms, documentation='A ddex:Territory in which the ddex:Deal applies (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory must be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 827, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=DealTerms, documentation='A ddex:Territory in which the ddex:Deal does not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory must be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 832, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DistributionChannel'), _ImportedBinding__ddexC.DSP, scope=DealTerms, documentation='A ddex:Composite containing details of the ddex:DSP through whose ddex:DistributionChannel the sales are permitted. If none are provided no limitations on the ddex:DistributionChannels are given.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 840, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedDistributionChannel'), _ImportedBinding__ddexC.DSP, scope=DealTerms, documentation='A ddex:Composite containing details of excluded ddex:DSP. This is used in an aggregator model where all agreed partners of the aggregators may use a ddex:ReleaseDeal, except those that are listed herein.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 845, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PriceInformation'), _ImportedBinding__ddexC.PriceInformation, scope=DealTerms, documentation='A ddex:Composite containing details of a ddex:Price. Note that this ddex:Price applies to all ddex:UseTypes referenced in this ddex:Composite.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 851, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPromotional'), pyxb.binding.datatypes.boolean, scope=DealTerms, documentation='The ddex:Flag indicating whether a special ddex:Deal is made between the ddex:Licensor and the ddex:Licensee (=True) or not (=False) regarding the royalties or payments due to be paid for Releases distributed under this ddex:Deal.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 858, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PromotionalCode'), _ImportedBinding__ddexC.PromotionalCode, scope=DealTerms, documentation='A ddex:Composite containing details of a ddex:PromotionalCode.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 863, 12)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ValidityPeriod'), _ImportedBinding__ddexC.Period, scope=DealTerms, documentation='A ddex:Composite containing details about a ddex:Period of ddex:Time during which the ddex:Deal is valid. No ddex:StartDate in this ddex:Composite means that the ddex:Deal is valid as per contractual relationship between ddex:MessageSender and ddex:MessageRecipient. No ddex:EndDate in this ddex:Composite means that the ddex:Deal is valid until further notice.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 869, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerRentalPeriod'), _ImportedBinding__ddexC.ConsumerRentalPeriod, scope=DealTerms, documentation='A ddex:Composite containing details of a ddex:Period the ddex:DSP may rent something to a ddex:Customer.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 874, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreOrderReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=DealTerms, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the related ddex:Release is made available for pre-ordering.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 879, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreOrderPreviewDate'), _ImportedBinding__ddexC.EventDate, scope=DealTerms, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the pre-ordered ddex:Release is made first available for previewing.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 884, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsExclusive'), pyxb.binding.datatypes.boolean, scope=DealTerms, documentation='The ddex:Flag indicating whether the ddex:Deal is exclusive (=True) or not (=False) to the ddex:MessageRecipient with respect to the relevant Territory(ies), Time(s) and Release(s). For other Territory(ies), or Time(s), other ddex:DSPs might be able to sell the Release(s). The exclusivity is in accordance with the agreement between the ddex:MessageSender and ddex:MessageRecipient.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 889, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RelatedReleaseOfferSet'), RelatedReleaseOfferSet, scope=DealTerms, documentation='A ddex:Composite containing details of one or more offers related to the ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 894, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PhysicalReturns'), PhysicalReturns, scope=DealTerms, documentation='A ddex:Composite containing details of physical returns.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 900, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfProductsPerCarton'), pyxb.binding.datatypes.integer, scope=DealTerms, documentation='A number of ddex:Products per carton. This is the smallest number of ddex:Products that can be ordered.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 905, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicy'), RightsClaimPolicy, scope=DealTerms, documentation='A ddex:Composite containing details of a rights claim policy.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 910, 9)))

DealTerms._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'WebPolicy'), WebPolicy, scope=DealTerms, documentation='A ddex:Composite containing details of ddex:UserGeneratedContent permissions.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 916, 9)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 803, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 815, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 820, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 839, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 851, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 857, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 874, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 879, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 884, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 889, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 894, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 900, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 905, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 910, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 916, 9))
    counters.add(cc_14)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'CommercialModelType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 803, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'Usage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 810, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'AllDealsCancelled')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 815, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'TakeDown')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 820, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 827, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 832, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'DistributionChannel')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 840, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedDistributionChannel')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 845, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'PriceInformation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 851, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPromotional')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 858, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'PromotionalCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 863, 12))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'ValidityPeriod')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 869, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerRentalPeriod')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 874, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'PreOrderReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 879, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'PreOrderPreviewDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 884, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'IsExclusive')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 889, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'RelatedReleaseOfferSet')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 894, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'PhysicalReturns')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 900, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfProductsPerCarton')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 905, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicy')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 910, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DealTerms._UseForTag(pyxb.namespace.ExpandedName(None, 'WebPolicy')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 916, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DealTerms._Automaton = _BuildAutomaton_20()




Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageType'), _ImportedBinding__ddexC.ImageType, scope=Image, documentation='A ddex:Composite containing details of the ddex:Type of the ern:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 933, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=Image, documentation='The ddex:Flag indicating whether the ern:Image is related to an ddex:Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 938, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageId'), _ImportedBinding__ddexC.ImageId, scope=Image, documentation='A ddex:Composite containing details of ddex:Identifiers of the ern:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 943, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_7, scope=Image, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:Image within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 948, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=Image, documentation='A ddex:Composite containing details of a ddex:Title of the ern:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 958, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), _ImportedBinding__ddexC.EventDate, scope=Image, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Image was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 963, 9)))

Image._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageDetailsByTerritory'), ImageDetailsByTerritory, scope=Image, documentation='A ddex:Composite containing details of the ern:Image which may vary according to ddex:Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 968, 9)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 933, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 938, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 958, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 963, 9))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 933, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 938, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 943, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 948, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 958, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 963, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Image._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 968, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Image._Automaton = _BuildAutomaton_21()




ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=ImageDetailsByTerritory, documentation='A ddex:Territory to which the ddex:Image details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 992, 12)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=ImageDetailsByTerritory, documentation='A ddex:Territory to which the ddex:Image details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 997, 12)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Contributor to the ddex:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1004, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), _ImportedBinding__ddexC.IndirectResourceContributor, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1010, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), _ImportedBinding__ddexC.CLine, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:CLine for the ddex:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1016, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Description'), _ImportedBinding__ddexC.Description, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing a ddex:Description of the subject of the ddex:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1021, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), _ImportedBinding__ddexC.CourtesyLine, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured on the ddex:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1026, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Image was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1031, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1036, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), _ImportedBinding__ddexC.Keywords, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Description of the ddex:Image containing ddex:Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1041, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), _ImportedBinding__ddexC.Synopsis, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Synopsis of the ddex:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1046, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), _ImportedBinding__ddexC.Genre, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Genre to which the ddex:Image belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1051, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), _ImportedBinding__ddexC.ParentalWarningType, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing details of the classification of the ddex:Image according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1056, 9)))

ImageDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalImageDetails'), TechnicalImageDetails, scope=ImageDetailsByTerritory, documentation='A ddex:Composite containing technical details of the ddex:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1062, 9)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1004, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1010, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1016, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1021, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1026, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1031, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1036, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1041, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1046, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1051, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1056, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1062, 9))
    counters.add(cc_11)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 992, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 997, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1004, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1010, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1016, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Description')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1021, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1026, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1031, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1036, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1041, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1046, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1051, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1056, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ImageDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalImageDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1062, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ImageDetailsByTerritory._Automaton = _BuildAutomaton_22()




MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MidiType'), _ImportedBinding__ddexC.MidiType, scope=MIDI, documentation='A ddex:Composite containing details of the ddex:Type of the ern:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1080, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The ddex:Flag indicating whether the ern:MIDI is related to an ddex:Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1085, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MidiId'), _ImportedBinding__ddexC.MidiId, scope=MIDI, documentation='A ddex:Composite containing details of ddex:Identifiers of the Midi.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1090, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectMidiId'), _ImportedBinding__ddexC.MusicalWorkId, scope=MIDI, documentation='A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1095, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_8, scope=MIDI, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:MIDI within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1101, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), _ImportedBinding__ddexC.ReferenceTitle, scope=MIDI, documentation='A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1111, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), _ImportedBinding__ddexC.Description, scope=MIDI, documentation='A ddex:Composite containing a ddex:Description of the ddex:Type of instrumentation of the MusicalWork(s) in the ern:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1116, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsMedley'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The ddex:Flag indicating whether the ern:MIDI is a ddex:Medley (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1121, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The ddex:Flag indicating whether the ern:MIDI is a ddex:Potpourri (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1126, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The ddex:Flag indicating whether the ern:MIDI is instrumental (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1131, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBackground'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The ddex:Flag indicating whether the ern:MIDI is used as background to other audio or audiovisual material (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1136, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The ddex:Flag indicating whether the ern:MIDI is hidden in some way from the ddex:Consumer (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1141, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The ddex:Flag indicating whether the ern:MIDI is additional to those on the original ddex:Release of which this is a ddex:Version (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1146, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The ddex:Flag indicating whether the ern:MIDI is generated by a computer (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1151, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The ddex:Flag indicating whether the ern:MIDI is preceded by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1156, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='The ddex:Flag indicating whether the ern:MIDI is followed by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1161, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), pyxb.binding.datatypes.boolean, scope=MIDI, documentation='A ddex:Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the ern:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1166, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), _ImportedBinding__iso639a2.LanguageCode, scope=MIDI, documentation='The ddex:Language of the ddex:Performance recorded in the ern:MIDI (represented by an ISO 639-2 iso639a2:LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1171, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=MIDI, documentation='The ddex:Duration of the ern:MIDI (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1176, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), _ImportedBinding__ddexC.RightsAgreementId, scope=MIDI, documentation='A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1181, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), _ImportedBinding__ddexC.ResourceMusicalWorkReferenceList, scope=MIDI, documentation='A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1186, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), _ImportedBinding__ddexC.ResourceContainedResourceReferenceList, scope=MIDI, documentation='A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1192, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), _ImportedBinding__ddexC.EventDate, scope=MIDI, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:MIDI was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1198, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MasteredDate'), _ImportedBinding__ddexC.EventDate, scope=MIDI, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:MIDI was originally mastered (in either analogue or digital form).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1203, 9)))

MIDI._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MidiDetailsByTerritory'), MidiDetailsByTerritory, scope=MIDI, documentation='A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:MIDI which may vary according to ddex:Territory of release. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1208, 9)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1080, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1085, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1095, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1116, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1121, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1126, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1131, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1136, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1141, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1146, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1151, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1156, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1161, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1166, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1171, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1181, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1186, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1192, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1198, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1203, 9))
    counters.add(cc_19)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'MidiType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1080, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1085, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'MidiId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1090, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectMidiId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1095, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1101, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1111, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1116, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsMedley')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1121, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPotpourri')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1126, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsInstrumental')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1131, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBackground')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1136, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsHiddenResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1141, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBonusResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1146, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1151, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1156, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1161, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1166, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1171, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1176, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1181, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1186, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1192, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1198, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'MasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1203, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MIDI._UseForTag(pyxb.namespace.ExpandedName(None, 'MidiDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1208, 9))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    st_24._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MIDI._Automaton = _BuildAutomaton_23()




MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=MidiDetailsByTerritory, documentation='A ddex:Territory to which the ddex:MIDI details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1232, 12)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=MidiDetailsByTerritory, documentation='A ddex:Territory to which the ddex:MIDI details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1237, 12)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Title of the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1244, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), _ImportedBinding__ddexC.Artist, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:MIDI. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1249, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Contributor to the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1254, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), _ImportedBinding__ddexC.IndirectResourceContributor, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1260, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), _ImportedBinding__ddexC.RightsAgreementId, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1266, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), _ImportedBinding__ddexC.LabelName, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1271, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsController'), RightsController, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1276, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), _ImportedBinding__ddexC.EventDate, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:MIDI was re-mastered (usually digitally).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1282, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:MIDI was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1287, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), _ImportedBinding__ddexC.CLine, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:CLine for the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1292, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), _ImportedBinding__ddexC.CourtesyLine, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for guests ddex:Artists or others featured on the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1297, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.string, scope=MidiDetailsByTerritory, documentation='The number indicating the order of the ddex:MIDI in a group of ddex:MIDIs in a ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1302, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), _ImportedBinding__ddexC.HostSoundCarrier, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:HostSoundCarrier on which the ddex:MIDI appears (e.g., the CD on which it was originally released). This ddex:Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of ddex:MIDI information.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1307, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MarketingComment'), _ImportedBinding__ddexC.Comment, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1313, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), _ImportedBinding__ddexC.Genre, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Genre to which the ddex:MIDI belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1318, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), _ImportedBinding__ddexC.ParentalWarningType, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of the classification of the ddex:MIDI according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1323, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1329, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), _ImportedBinding__ddexC.Keywords, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Description of the ddex:MIDI containing ddex:Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1334, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), _ImportedBinding__ddexC.Synopsis, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Synopsis of the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1339, 9)))

MidiDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalMidiDetails'), TechnicalMidiDetails, scope=MidiDetailsByTerritory, documentation='A ddex:Composite containing technical details of the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1344, 9)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1244, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1249, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1254, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1260, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1266, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1271, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1276, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1282, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1287, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1292, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1297, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1302, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1307, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1313, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1318, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1323, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1329, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1334, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1339, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1344, 9))
    counters.add(cc_19)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1232, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1237, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1244, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1249, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1254, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1260, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1266, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1271, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsController')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1276, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RemasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1282, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1287, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1292, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1297, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1302, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1307, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'MarketingComment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1313, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1318, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1323, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1329, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1334, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1339, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MidiDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalMidiDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1344, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MidiDetailsByTerritory._Automaton = _BuildAutomaton_24()




PhysicalReturns._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PhysicalReturnsAllowed'), pyxb.binding.datatypes.boolean, scope=PhysicalReturns, documentation='The ddex:Flag indicating whether physical returns are allowed (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1362, 9)))

PhysicalReturns._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LatestDateForPhysicalReturns'), pyxb.binding.datatypes.date, scope=PhysicalReturns, documentation='A Date which is the latest one for physical returns (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1367, 9)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1367, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhysicalReturns._UseForTag(pyxb.namespace.ExpandedName(None, 'PhysicalReturnsAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1362, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalReturns._UseForTag(pyxb.namespace.ExpandedName(None, 'LatestDateForPhysicalReturns')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1367, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PhysicalReturns._Automaton = _BuildAutomaton_25()




PreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartType'), _ImportedBinding__ddexC.Description, scope=PreviewDetails, documentation='A ddex:Composite containing a ddex:Description of the ddex:Type of ddex:Part that the preview relates to, e.g. chorus or intro.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1379, 9)))

PreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TopLeftCorner'), pyxb.binding.datatypes.decimal, scope=PreviewDetails, documentation='The position of the preview measured in ddex:Pixels or millimetres from the top left corner of the ddex:Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1384, 9)))

PreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BottomRightCorner'), pyxb.binding.datatypes.decimal, scope=PreviewDetails, documentation='The position of the preview measured in ddex:Pixels or millimetres  from the bottom right corner of the ddex:Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1389, 9)))

PreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExpressionType'), _ImportedBinding__ddex.ExpressionType, scope=PreviewDetails, documentation='A ddex:Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1394, 9)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1379, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1384, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1389, 9))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PartType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1379, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TopLeftCorner')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1384, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'BottomRightCorner')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1389, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ExpressionType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1394, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PreviewDetails._Automaton = _BuildAutomaton_26()




RelatedReleaseOfferSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), _ImportedBinding__ddexC.ReleaseId, scope=RelatedReleaseOfferSet, documentation='A ddex:Composite containing details of ddex:ReleaseIds of the Release(s) for which the offer(s) are available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1407, 12)))

RelatedReleaseOfferSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDescription'), _ImportedBinding__ddexC.Description, scope=RelatedReleaseOfferSet, documentation='A ddex:Composite containing a ddex:Description of the Release(s) for which the offer(s) are available.This ddex:Element is designed to be used to describe entire collections or repertoires, and is not to be used to list individual ddex:Releases by xs:ID or ddex:Title.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1412, 12)))

RelatedReleaseOfferSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Deal'), Deal, scope=RelatedReleaseOfferSet, documentation='A ddex:Composite containing details of a ddex:Deal that is available as an offer related to the Release(s). If no ddex:Deal is provided, the parent ddex:Release and the ddex:Releases listed in the ern:RelatedReleaseOfferSet are bundled and offered under the ddex:ReleaseOffer associated with the parent ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1418, 9)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1418, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RelatedReleaseOfferSet._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1407, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RelatedReleaseOfferSet._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1412, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RelatedReleaseOfferSet._UseForTag(pyxb.namespace.ExpandedName(None, 'Deal')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1418, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RelatedReleaseOfferSet._Automaton = _BuildAutomaton_27()




Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), _ImportedBinding__ddexC.ReleaseId, scope=Release, documentation='A ddex:Composite containing details of ddex:ReleaseIds. If available, a ddex:GRid has to be used. If the ern:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ern:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1435, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseReference'), STD_ANON_9, scope=Release, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:Release. Used to link the ern:Release to one or more Deal(s). This is a ddex:LocalReleaseAnchor starting with the letter R.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1440, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExternalResourceLink'), _ImportedBinding__ddexC.ExternalResourceLink, scope=Release, documentation='A ddex:Composite containing details of promotional or other material related to the ern:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1450, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SalesReportingProxyReleaseId'), _ImportedBinding__ddexC.SalesReportingProxyReleaseId, scope=Release, documentation='A ddex:Composite containing details of the A ddex:Composite containing details of the ddex:SalesReportingProxyReleaseId.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1456, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), _ImportedBinding__ddexC.ReferenceTitle, scope=Release, documentation='A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1462, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReferenceList'), _ImportedBinding__ddexC.ReleaseResourceReferenceList, scope=Release, documentation='A ddex:Composite containing details of one or more ddex:Resources contained in the ern:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1468, 12)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceOmissionReason'), _ImportedBinding__ddexC.ResourceOmissionReason, scope=Release, documentation='A ddex:Composite containing details of a ddex:ResourceOmissionReason.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1474, 12)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseCollectionReferenceList'), _ImportedBinding__ddexC.ReleaseCollectionReferenceList, scope=Release, documentation='A ddex:Composite containing details of one or more ddex:Collections contained in the ern:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1480, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseType'), _ImportedBinding__ddexC.ReleaseType, scope=Release, documentation='A ddex:Composite containing details of the form in which a ddex:ReleaseCreator anticipates offering the ern:Release to ddex:Consumers. This may be overridden by the ddex:ReleaseType for specific Territories as specified in the ReleaseDetailsByTerritory ddex:Composite.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1486, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDetailsByTerritory'), ReleaseDetailsByTerritory, scope=Release, documentation='A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:Release which may vary according to ddex:Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1491, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=Release, documentation='The sum of the ddex:Durations of all ddex:Resources contained in the ern:Release (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1497, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), _ImportedBinding__ddexC.RightsAgreementId, scope=Release, documentation='A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1502, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), _ImportedBinding__ddexC.PLine, scope=Release, documentation='A ddex:Composite containing details of the ddex:PLine for the ern:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1507, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), _ImportedBinding__ddexC.CLine, scope=Release, documentation='A ddex:Composite containing details of the ddex:CLine for the ern:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1512, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ArtistProfilePage'), _ImportedBinding__ddexC.WebPage, scope=Release, documentation='A ddex:Composite containing details of a ddex:WebPage for the ddex:Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1517, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GlobalReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=Release, documentation='A ddex:Composite containing details of the Date of the ddex:Event in which the ddex:Release was or will be first made globally available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1523, 9)))

Release._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GlobalOriginalReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=Release, documentation='A ddex:Composite containing details of the Date of the ddex:Event in which the collection of tracks for the ddex:Release (e.g. the equivalent physical album on vinyl) was or will be first made globally available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1528, 9)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1440, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1450, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1456, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1480, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1486, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1497, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1502, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1507, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1512, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1517, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1523, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1528, 9))
    counters.add(cc_11)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1435, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1440, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ExternalResourceLink')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1450, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'SalesReportingProxyReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1456, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1462, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1468, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceOmissionReason')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1474, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseCollectionReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1480, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1486, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1491, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1497, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1502, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1507, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1512, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'ArtistProfilePage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1517, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'GlobalReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1523, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Release._UseForTag(pyxb.namespace.ExpandedName(None, 'GlobalOriginalReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1528, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_16._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Release._Automaton = _BuildAutomaton_28()




ReleaseDeal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealReleaseReference'), STD_ANON_10, scope=ReleaseDeal, documentation='The ddex:Identifier (specific to the ddex:Message) of a ddex:Release in the ddex:Deal. This is a ddex:LocalReleaseAnchorReference starting with the letter R.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1550, 9)))

ReleaseDeal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Deal'), Deal, scope=ReleaseDeal, documentation='A ddex:Composite containing details of a ddex:Deal governing the Usage of all ddex:Releases identified in the ern:ReleaseDeal ddex:Composite.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1560, 9)))

ReleaseDeal._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EffectiveDate'), pyxb.binding.datatypes.date, scope=ReleaseDeal, documentation='The Date at which the ddex:MessageRecipient is expected to cancel all ddex:Deals for the ddex:Release and replace them with the ddex:Deals provided within the current ddex:Message. The EffectiveDate is typically the date on which the ern:NewReleaseMessage is being sent.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1565, 9)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1565, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReleaseDeal._UseForTag(pyxb.namespace.ExpandedName(None, 'DealReleaseReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1550, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReleaseDeal._UseForTag(pyxb.namespace.ExpandedName(None, 'Deal')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1560, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDeal._UseForTag(pyxb.namespace.ExpandedName(None, 'EffectiveDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1565, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReleaseDeal._Automaton = _BuildAutomaton_29()




ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=ReleaseDetailsByTerritory, documentation='A ddex:Territory to which the ddexC:ReleaseSummaryDetailsByTerritory apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1583, 12)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=ReleaseDetailsByTerritory, documentation='A ddex:Territory to which the ddexC:ReleaseSummaryDetailsByTerritory do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1588, 12)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtistName'), _ImportedBinding__ddexC.Name, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing the ddex:Name to be used by a ddex:DSP when presenting ddex:Artist details of the ddex:Release to a ddex:Consumer.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1595, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), _ImportedBinding__ddexC.LabelName, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing the ddex:Name of the ddex:Label for the ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1600, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), _ImportedBinding__ddexC.RightsAgreementId, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1605, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Title of the ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1610, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), _ImportedBinding__ddexC.Artist, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:Release. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1615, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsMultiArtistCompilation'), pyxb.binding.datatypes.boolean, scope=ReleaseDetailsByTerritory, documentation='The ddex:Flag indicating whether the ddex:Release is a multiartist compilation (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1620, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdministratingRecordCompany'), _ImportedBinding__ddexC.AdministratingRecordCompany, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:AdministratingRecordCompany for the ddex:Release. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1625, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseType'), _ImportedBinding__ddexC.ReleaseType, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of the form in which a ddex:ReleaseCreator anticipates offering the ddex:Release to ddex:Consumers. This overrides the ddex:ReleaseType specified globally for the ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1631, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RelatedRelease'), _ImportedBinding__ddexC.RelatedRelease, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Release (or a ddex:PhysicalProduct or a ddex:DigitalProduct derived from such a ddex:Release) which is related to this ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1636, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), _ImportedBinding__ddexC.ParentalWarningType, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of the classification of the ddex:Release according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1642, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AvRating'), _ImportedBinding__ddexC.AvRating, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of a rating for the ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1648, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MarketingComment'), _ImportedBinding__ddexC.Comment, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1653, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroup'), ResourceGroup, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of a group of some or all of the ddex:Resources in the ddex:Release. ResourceGroups are used to signal groupings or sequences of ddex:Resources within a ddex:Release. Examples include individual carriers in a multi-carrier ddex:Release or classical ddex:Work groupings as well as the default order of ddex:Resources within a ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1658, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), _ImportedBinding__ddexC.Genre, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Genre to which the ddex:Release belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1664, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Release was or will be first made available for Usage in its current form, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1669, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the collection of tracks for the ddex:Release (e.g. the equivalent physical album on vinyl) was or will be first made available for Usage, whether for physical or electronic/online distribution (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1674, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalDigitalReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Release was or will be first made available in electronic/online format for Usage (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1679, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), _ImportedBinding__ddexC.Description, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain any related ddex:Release ddex:File.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1685, 12)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), _ImportedBinding__ddexC.File, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of a related ddex:Release ddex:File that a ddex:DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1691, 12)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), _ImportedBinding__ddexC.Keywords, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Description of the ddex:Release containing ddex:Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1697, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), _ImportedBinding__ddexC.Synopsis, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Synopsis of the ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1702, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Character'), Character, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Character in the ddex:Release. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1707, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfUnitsPerPhysicalRelease'), pyxb.binding.datatypes.integer, scope=ReleaseDetailsByTerritory, documentation='A number of units (typically a CD or a DVD) contained in a physical ddex:Release. This Element is for boxed sets.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1712, 9)))

ReleaseDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), _ImportedBinding__ddexC.Artist, scope=ReleaseDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:DisplayConductor for the ddex:Release. A ddex:DisplayConductor may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1717, 9)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1595, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1600, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1605, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1610, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1620, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1625, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1631, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1636, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1642, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1648, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1653, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1658, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1664, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1669, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1674, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1679, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1684, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1697, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1702, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1707, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1712, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1717, 9))
    counters.add(cc_21)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1583, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1588, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtistName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1595, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1600, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1605, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1610, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1615, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IsMultiArtistCompilation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1620, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'AdministratingRecordCompany')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1625, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1631, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RelatedRelease')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1636, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1642, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'AvRating')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1648, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'MarketingComment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1653, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroup')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1658, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1664, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1669, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1674, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalDigitalReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1679, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1685, 12))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1691, 12))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1697, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1702, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Character')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1707, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfUnitsPerPhysicalRelease')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1712, 9))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayConductor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1717, 9))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReleaseDetailsByTerritory._Automaton = _BuildAutomaton_30()




ReleaseList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Release'), Release, scope=ReleaseList, documentation='A ddex:Composite containing details of a ddex:DDEX ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1734, 9)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1734, 9))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ReleaseList._UseForTag(pyxb.namespace.ExpandedName(None, 'Release')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1734, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ReleaseList._Automaton = _BuildAutomaton_31()




ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), _ImportedBinding__ddexC.PartyId, scope=ResourceContributor, documentation='A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1752, 12)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), _ImportedBinding__ddexC.PartyName, scope=ResourceContributor, documentation='A ddex:Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1758, 15)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributorRole'), _ImportedBinding__ddexC.ResourceContributorRole, scope=ResourceContributor, documentation='A ddex:Composite containing details of a role played by the ddex:Contributor.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1770, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsFeaturedArtist'), pyxb.binding.datatypes.boolean, scope=ResourceContributor, documentation='A ddex:Flag indicating whether the ddex:Contributor is a featured ddex:Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1776, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsContractedArtist'), pyxb.binding.datatypes.boolean, scope=ResourceContributor, documentation='A ddex:Flag indicating whether the ddex:Contributor is an ddex:Artist that has a contract for its part in creating the ddex:Resource (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1781, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryOfPerformance'), _ImportedBinding__ddexC.TerritoryCode, scope=ResourceContributor, documentation='A country of performance (represented by an ISO 3166-1 iso3166a2:TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1786, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'InstrumentType'), pyxb.binding.datatypes.string, scope=ResourceContributor, documentation='A ddex:Type of musical instrument played by the ddex:Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1792, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ArtistDelegatedUsageRights'), _ImportedBinding__ddexC.ArtistDelegatedUsageRights, scope=ResourceContributor, documentation='A ddex:Composite containing details of the kinds of usage for which rights have been delegated by the ddex:Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1797, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Sex'), _ImportedBinding__ddex.Sex, scope=ResourceContributor, documentation='Sex', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1803, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfBirth'), _ImportedBinding__ddexC.EventDate, scope=ResourceContributor, documentation='A ddex:Composite containing details of the Date and ddex:Place of birth.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1808, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfDeath'), _ImportedBinding__ddexC.EventDate, scope=ResourceContributor, documentation='A ddex:Composite containing details of the Date and ddex:Place of death.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1813, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PrimaryRole'), _ImportedBinding__ddexC.ArtistRole, scope=ResourceContributor, documentation='A ddex:Composite containing details of the primary role played by the ddex:Artist in relation to other ddex:Artists.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1818, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PrimaryInstrumentType'), pyxb.binding.datatypes.string, scope=ResourceContributor, documentation='A ddex:Type of (musical) instrument primarily played by the ddex:Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1823, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GoverningAgreementType'), _ImportedBinding__ddexC.GoverningAgreementType, scope=ResourceContributor, documentation="A ddex:Composite containing details of a ddex:Type of an agreement that covers the ddex:Artist's participation in making a ddex:SoundRecording.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1828, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContactInformation'), _ImportedBinding__ddexC.ContactId, scope=ResourceContributor, documentation='A ddex:Composite containing details of contact ddex:Identifiers of the ddex:Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1833, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryOfResidency'), _ImportedBinding__ddexC.TerritoryCode, scope=ResourceContributor, documentation='The country of main residency of the ddex:Artist (represented by an ISO 3166-1 iso3166a2:TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1838, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AdditionalRoles'), _ImportedBinding__ddexC.ArtistRole, scope=ResourceContributor, documentation='A ddex:Composite containing details of the additional roles played by the ddex:Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1843, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), _ImportedBinding__ddexC.Genre, scope=ResourceContributor, documentation='A ddex:Composite containing details of a typical or main ddex:Genre relating to the ddex:Artist.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1849, 9)))

ResourceContributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Membership'), _ImportedBinding__ddexC.Membership, scope=ResourceContributor, documentation='A ddex:Composite containing details of a membership in a collective rights management organization.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1854, 9)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1763, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1770, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1776, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1781, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1786, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1792, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1797, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1803, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1808, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1813, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1818, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1823, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1828, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1833, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1838, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1843, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1849, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1854, 9))
    counters.add(cc_17)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1752, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1758, 15))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1763, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributorRole')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1770, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'IsFeaturedArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1776, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'IsContractedArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1781, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryOfPerformance')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1786, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'InstrumentType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1792, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'ArtistDelegatedUsageRights')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1797, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'Sex')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1803, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfBirth')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1808, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'DateAndPlaceOfDeath')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1813, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PrimaryRole')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1818, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'PrimaryInstrumentType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1823, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'GoverningAgreementType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1828, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'ContactInformation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1833, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryOfResidency')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1838, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'AdditionalRoles')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1843, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1849, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ResourceContributor._UseForTag(pyxb.namespace.ExpandedName(None, 'Membership')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1854, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResourceContributor._Automaton = _BuildAutomaton_32()




ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=ResourceGroup, documentation="A ddex:Composite containing details of a ddex:Title of the ern:ResourceGroup. Typically this will apply to 'sub' ddex:ResourceGroups within a hierarchy, e.g., different ddex:Albums in a ddex:Set.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1871, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.integer, scope=ResourceGroup, documentation='The number indicating the order of the ern:ResourceGroup within all ddex:ResourceGroups at this level. The default value is 1, and the value must be incremented by 1 for each ern:ResourceGroup occurring at a particular level. The ddex:SequenceNumber is unique within its ddex:ResourceGroupLevelNumber.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1876, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), _ImportedBinding__ddexC.Artist, scope=ResourceGroup, documentation='A ddex:Composite containing details of the ddex:DisplayArtist for the ern:ResourceGroup. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1881, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), _ImportedBinding__ddexC.Artist, scope=ResourceGroup, documentation='A ddex:Composite containing details of a ddex:DisplayConductor for the ern:ResourceGroup. A ddex:DisplayConductor may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1886, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayComposer'), _ImportedBinding__ddexC.Artist, scope=ResourceGroup, documentation='A ddex:Composite containing details of a ddex:DisplayComposer for the ern:ResourceGroup. A ddex:DisplayComposer may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1891, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=ResourceGroup, documentation='A ddex:Composite containing details of a ddex:Contributor to this ern:ResourceGroup. This includes roles such as the compiler of the ern:ResourceGroup, and may summarize details of ddex:Contributors to individual ddex:SoundRecordings or other content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1896, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), _ImportedBinding__ddexC.IndirectResourceContributor, scope=ResourceGroup, documentation='A ddex:Composite containing details of an indirect ddex:Contributor to this ern:ResourceGroup.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1902, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroup'), ResourceGroup, scope=ResourceGroup, documentation='A ern:ResourceGroup contained within this ern:ResourceGroup. ResourceGroups are used to signal groupings or sequences of ddex:Resources within a ddex:Release. Examples include individual carriers in a multi-carrier ddex:Release or classical ddex:Work groupings as well as the default order of ddex:Resources within a ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1908, 9)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroupContentItem'), _ImportedBinding__ddexC.ResourceGroupContentItem, scope=ResourceGroup, documentation='A ddex:Composite containing details of a ddex:Resource contained in the ern:ResourceGroup.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1915, 12)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroupResourceReferenceList'), _ImportedBinding__ddexC.ResourceGroupResourceReferenceList, scope=ResourceGroup, documentation='A ddex:Composite containing details of a ddex:Resource contained in the ern:ResourceGroup.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1921, 12)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceGroupReleaseReference'), STD_ANON_11, scope=ResourceGroup, documentation='The ddex:Identifier (specific to the ddex:Message) of a ddex:Release which has the same content as the ern:ResourceGroup. This is a ddex:LocalReleaseAnchorReference starting with the letter R.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1929, 12)))

ResourceGroup._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReleaseId'), _ImportedBinding__ddexC.ReleaseId, scope=ResourceGroup, documentation='A ddex:Composite containing details of ddex:ReleaseIds of a ddex:Release which has the same content as the ern:ResourceGroup. If available, a ddex:GRid has to be used. If the ddex:Release contains only one ddex:SoundRecording, the ddex:ISRC of the ddex:SoundRecording may be used instead. If the ddex:Release is an abstraction of a complete ddex:PhysicalProduct (such as a CD ddex:Album), the ddex:ICPN of the ddex:PhysicalProduct may be used instead.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1939, 12)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1871, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1876, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1881, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1886, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1891, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1896, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1902, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1908, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1915, 12))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1921, 12))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1928, 9))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1871, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1876, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1881, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayConductor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1886, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayComposer')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1891, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1896, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1902, 9))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroup')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1908, 9))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroupContentItem')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1915, 12))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroupResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1921, 12))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceGroupReleaseReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1929, 12))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ResourceGroup._UseForTag(pyxb.namespace.ExpandedName(None, 'ReleaseId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1939, 12))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ResourceGroup._Automaton = _BuildAutomaton_33()




ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecording'), SoundRecording, scope=ResourceList, documentation='A ddex:Composite containing details of a ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1957, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MIDI'), MIDI, scope=ResourceList, documentation='A ddex:Composite containing details of a ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1963, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Video'), Video, scope=ResourceList, documentation='A ddex:Composite containing details of a ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1968, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Image'), Image, scope=ResourceList, documentation='A ddex:Composite containing details of an ddex:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1973, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Text'), Text, scope=ResourceList, documentation='A ddex:Composite containing details of a ddex:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1978, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SheetMusic'), SheetMusic, scope=ResourceList, documentation='A ddex:Composite containing details of a ddex:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1983, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Software'), Software, scope=ResourceList, documentation='A ddex:Composite containing details of an item of ddex:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1988, 9)))

ResourceList._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedResource'), UserDefinedResource, scope=ResourceList, documentation='A ddex:Composite containing details of a ddex:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1993, 9)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1957, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1963, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1968, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1973, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1978, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1983, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1988, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1993, 9))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecording')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1957, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'MIDI')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1963, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'Video')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1968, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'Image')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1973, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'Text')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1978, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'SheetMusic')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1983, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'Software')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1988, 9))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ResourceList._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 1993, 9))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ResourceList._Automaton = _BuildAutomaton_34()




ResourceUsage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DealResourceReference'), STD_ANON_12, scope=ResourceUsage, documentation='A ddex:Reference for a ddex:Resource (specific to this ddex:Message). This is a ddex:LocalResourceAnchorReference starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2011, 9)))

ResourceUsage._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Usage'), _ImportedBinding__ddexC.Usage, scope=ResourceUsage, documentation='A ddex:Composite containing the ddex:Types and number of Usages applicable to the ddex:Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2021, 9)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2011, 9))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ResourceUsage._UseForTag(pyxb.namespace.ExpandedName(None, 'DealResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2011, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ResourceUsage._UseForTag(pyxb.namespace.ExpandedName(None, 'Usage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2021, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ResourceUsage._Automaton = _BuildAutomaton_35()




RightsClaimPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Condition'), Condition, scope=RightsClaimPolicy, documentation='A ddex:Composite containing details of conditions.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2033, 9)))

RightsClaimPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicyType'), _ImportedBinding__ddex.RightsClaimPolicyType, scope=RightsClaimPolicy, documentation='A ddex:Type of rights claim policy.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2038, 9)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightsClaimPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'Condition')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2033, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RightsClaimPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsClaimPolicyType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2038, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RightsClaimPolicy._Automaton = _BuildAutomaton_36()




RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyId'), _ImportedBinding__ddexC.PartyId, scope=RightsController, documentation='A ddex:Composite containing details of the ddex:PartyId for the ddex:Party. If no ddex:Namespace is given, the ddex:Identifier is a ddex:DdexPartyId (DPID). Note that DPIDs are not normally used to identify ddex:Artists, ddex:Producers or other ddex:Creators.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2051, 12)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartyName'), _ImportedBinding__ddexC.PartyName, scope=RightsController, documentation='A ddex:Composite containing details of the PartyName(s).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2057, 15)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsControllerRole'), _ImportedBinding__ddex.RightsControllerRole, scope=RightsController, documentation='A role that describes the ddex:Party involved in the administration of ddex:Rights.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2069, 9)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightShareUnknown'), pyxb.binding.datatypes.boolean, scope=RightsController, documentation='The ddex:Flag indicating whether the ddex:RightSharePercentage is unknown (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2076, 12)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightSharePercentage'), pyxb.binding.datatypes.string, scope=RightsController, documentation="The share of the licensed Rights owned by the ddexC:RightsController. ddex:RightShare information is given as a xs:decimal value (e.g. '0.125' represents 12.5%). If no information is given, 100% is assumed.", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2081, 12)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsControllerType'), _ImportedBinding__ddex.RightsControllerType, scope=RightsController, documentation='A type of the ddex:RightsController.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2087, 9)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryOfRegistration'), _ImportedBinding__ddexC.TerritoryCode, scope=RightsController, documentation='The country of registration (represented by an ISO 3166-1 iso3166a2:TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2092, 9)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartDate'), pyxb.binding.datatypes.date, scope=RightsController, documentation='The Date that marks the beginning of the title (in ISO 8601:2004 format: YYYY-MM-DD). This cannot be a Date in the future.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2097, 9)))

RightsController._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EndDate'), pyxb.binding.datatypes.date, scope=RightsController, documentation='The Date that marks the end of the title (in ISO 8601:2004 format: YYYY-MM-DD).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2102, 9)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2062, 15))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2069, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2087, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2092, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2102, 9))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2051, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2057, 15))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'PartyId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2062, 15))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsControllerRole')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2069, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'RightShareUnknown')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2076, 12))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'RightSharePercentage')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2081, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsControllerType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2087, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryOfRegistration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2092, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'StartDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2097, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(RightsController._UseForTag(pyxb.namespace.ExpandedName(None, 'EndDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2102, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RightsController._Automaton = _BuildAutomaton_37()




SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SheetMusicType'), _ImportedBinding__ddexC.SheetMusicType, scope=SheetMusic, documentation='A ddex:Composite containing details of the ddex:Type of the ern:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2119, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=SheetMusic, documentation='The ddex:Flag indicating whether the ern:SheetMusic is related to an ddex:Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2124, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SheetMusicId'), _ImportedBinding__ddexC.SheetMusicId, scope=SheetMusic, documentation='A ddex:Composite containing details of ddex:Identifiers of the ern:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2129, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectSheetMusicId'), _ImportedBinding__ddexC.MusicalWorkId, scope=SheetMusic, documentation='A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2134, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_13, scope=SheetMusic, documentation='The ddex:Identifier (specific to the ddex:Message) of the ddexC:SheetMusic within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2140, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageOfLyrics'), _ImportedBinding__iso639a2.LanguageCode, scope=SheetMusic, documentation='The ddex:Language of the lyrics of the ern:SheetMusic (represented by an ISO 639-2 iso639a2:LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2150, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), _ImportedBinding__ddexC.RightsAgreementId, scope=SheetMusic, documentation='A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) related to the ern:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2155, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), _ImportedBinding__ddexC.ResourceMusicalWorkReferenceList, scope=SheetMusic, documentation='A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2160, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), _ImportedBinding__ddexC.ResourceContainedResourceReferenceList, scope=SheetMusic, documentation='A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2166, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), _ImportedBinding__ddexC.ReferenceTitle, scope=SheetMusic, documentation='A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2172, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), _ImportedBinding__ddexC.EventDate, scope=SheetMusic, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:SheetMusic was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2177, 9)))

SheetMusic._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SheetMusicDetailsByTerritory'), SheetMusicDetailsByTerritory, scope=SheetMusic, documentation='A ddex:Composite containing details of the ern:SheetMusic which may vary according to ddex:Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2182, 9)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2119, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2124, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2134, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2150, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2155, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2160, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2166, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2177, 9))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'SheetMusicType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2119, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2124, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'SheetMusicId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2129, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectSheetMusicId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2134, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2140, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageOfLyrics')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2150, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2155, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2160, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2166, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2172, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2177, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SheetMusic._UseForTag(pyxb.namespace.ExpandedName(None, 'SheetMusicDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2182, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SheetMusic._Automaton = _BuildAutomaton_38()




SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Territory to which the ddex:SheetMusic details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2206, 12)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Territory to which the ddex:SheetMusic details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2211, 12)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Title of the ddex:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2218, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Contributor to the ddex:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2223, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), _ImportedBinding__ddexC.IndirectResourceContributor, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2229, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), _ImportedBinding__ddexC.CLine, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:CLine for the ddex:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2235, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), _ImportedBinding__ddexC.CourtesyLine, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2240, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SheetMusic was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2245, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2250, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), _ImportedBinding__ddexC.Genre, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Genre to which the ddex:SheetMusic belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2255, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), _ImportedBinding__ddexC.ParentalWarningType, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Composite containing details of the classification of the ddex:SheetMusic according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2260, 9)))

SheetMusicDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalSheetMusicDetails'), TechnicalSheetMusicDetails, scope=SheetMusicDetailsByTerritory, documentation='A ddex:Composite containing technical details of the ddex:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2266, 9)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2218, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2223, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2229, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2235, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2240, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2245, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2250, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2255, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2260, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2266, 9))
    counters.add(cc_9)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2206, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2211, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2218, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2223, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2229, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2235, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2240, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2245, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2250, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2255, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2260, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SheetMusicDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalSheetMusicDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2266, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SheetMusicDetailsByTerritory._Automaton = _BuildAutomaton_39()




Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoftwareType'), _ImportedBinding__ddexC.SoftwareType, scope=Software, documentation='A ddex:Composite containing details of the ddex:Type of the ern:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2284, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=Software, documentation='The ddex:Flag indicating whether the ern:Software is related to an ddex:Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2289, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoftwareId'), _ImportedBinding__ddexC.SoftwareId, scope=Software, documentation='A ddex:Composite containing details of ddex:Identifiers of the ern:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2294, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectSoftwareId'), _ImportedBinding__ddexC.MusicalWorkId, scope=Software, documentation='A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2299, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_14, scope=Software, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:Software within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2305, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), _ImportedBinding__ddexC.ResourceMusicalWorkReferenceList, scope=Software, documentation='A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2315, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), _ImportedBinding__ddexC.ResourceContainedResourceReferenceList, scope=Software, documentation='A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2321, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=Software, documentation='A ddex:Composite containing details of a ddex:Title of the ern:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2327, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), _ImportedBinding__ddexC.EventDate, scope=Software, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Software was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2332, 9)))

Software._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoftwareDetailsByTerritory'), SoftwareDetailsByTerritory, scope=Software, documentation='A ddex:Composite containing details of the ern:Software which may vary according to ddex:Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2337, 9)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2284, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2289, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2299, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2315, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2321, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2327, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2332, 9))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'SoftwareType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2284, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2289, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'SoftwareId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2294, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectSoftwareId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2299, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2305, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2315, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2321, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2327, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2332, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Software._UseForTag(pyxb.namespace.ExpandedName(None, 'SoftwareDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2337, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Software._Automaton = _BuildAutomaton_40()




SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=SoftwareDetailsByTerritory, documentation='A ddex:Territory to which the ddex:Software details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2361, 12)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=SoftwareDetailsByTerritory, documentation='A ddex:Territory to which the ddex:Software details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2366, 12)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Contributor to the ddex:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2373, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), _ImportedBinding__ddexC.IndirectResourceContributor, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2379, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), _ImportedBinding__ddexC.PLine, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:PLine for the ddex:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2385, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), _ImportedBinding__ddexC.CLine, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:CLine for the ddex:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2390, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), _ImportedBinding__ddexC.CourtesyLine, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2395, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Software was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2400, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2405, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), _ImportedBinding__ddexC.Keywords, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Description of the ddex:Software containing ddex:Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2410, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), _ImportedBinding__ddexC.Synopsis, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Synopsis of the ddex:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2415, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), _ImportedBinding__ddexC.Genre, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Genre to which the ddex:Software belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2420, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), _ImportedBinding__ddexC.ParentalWarningType, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing details of the classification of the ddex:Software according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2425, 9)))

SoftwareDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalSoftwareDetails'), TechnicalSoftwareDetails, scope=SoftwareDetailsByTerritory, documentation='A ddex:Composite containing technical details of the ddex:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2431, 9)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2373, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2379, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2385, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2390, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2395, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2400, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2405, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2410, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2415, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2420, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2425, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2431, 9))
    counters.add(cc_11)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2361, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2366, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2373, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2379, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2385, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2390, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2395, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2400, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2405, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2410, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2415, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2420, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2425, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SoftwareDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalSoftwareDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2431, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoftwareDetailsByTerritory._Automaton = _BuildAutomaton_41()




SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecordingType'), _ImportedBinding__ddexC.SoundRecordingType, scope=SoundRecording, documentation='A ddex:Composite containing details of the ddex:Type of the ern:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2449, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The ddex:Flag indicating whether the ern:SoundRecording is related to an ddex:Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2454, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecordingId'), _ImportedBinding__ddexC.SoundRecordingId, scope=SoundRecording, documentation='A ddex:Composite containing details of a ddex:SoundRecordingId.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2459, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectSoundRecordingId'), _ImportedBinding__ddexC.MusicalWorkId, scope=SoundRecording, documentation='A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2464, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_15, scope=SoundRecording, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:SoundRecording within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2470, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), _ImportedBinding__ddexC.ReferenceTitle, scope=SoundRecording, documentation='A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2480, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), _ImportedBinding__ddexC.Description, scope=SoundRecording, documentation='A ddex:Composite containing a ddex:Description of the ddex:Type of instrumentation of the MusicalWork(s) in the ern:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2485, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsMedley'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The ddex:Flag indicating whether the ern:SoundRecording is a ddex:Medley (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2490, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The ddex:Flag indicating whether the ern:SoundRecording is a ddex:Potpourri (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2495, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The ddex:Flag indicating whether the ern:SoundRecording is instrumental (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2500, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBackground'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The ddex:Flag indicating whether the ern:SoundRecording is used as background to other audio or audiovisual material (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2505, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The ddex:Flag indicating whether the ern:SoundRecording is hidden in some way from the ddex:Consumer (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2510, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The ddex:Flag indicating whether the ern:SoundRecording is additional to those on the original ddex:Release of which this is a ddex:Version (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2515, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The ddex:Flag indicating whether the ern:SoundRecording is generated by a computer (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2520, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsRemastered'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The ddex:Flag indicating whether the ern:SoundRecording is remastered (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2525, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The ddex:Flag indicating whether the ern:SoundRecording is preceded by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2530, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='The ddex:Flag indicating whether the ern:SoundRecording is followed by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2535, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), pyxb.binding.datatypes.boolean, scope=SoundRecording, documentation='A ddex:Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the ern:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2540, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), _ImportedBinding__iso639a2.LanguageCode, scope=SoundRecording, documentation='The ddex:Language of the ddex:Performance recorded in the ern:SoundRecording (represented by an ISO 639-2 iso639a2:LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2545, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=SoundRecording, documentation='The ddex:Duration of the ern:SoundRecording (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2550, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), _ImportedBinding__ddexC.RightsAgreementId, scope=SoundRecording, documentation='A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2555, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReferenceList'), _ImportedBinding__ddexC.SoundRecordingCollectionReferenceList, scope=SoundRecording, documentation='A ddex:Composite containing details of one or more ddex:Collections. The referenced ddex:Collection has to be of ddex:CollectionType ddex:AudioChapter.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2560, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), _ImportedBinding__ddexC.ResourceMusicalWorkReferenceList, scope=SoundRecording, documentation='A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2566, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), _ImportedBinding__ddexC.ResourceContainedResourceReferenceList, scope=SoundRecording, documentation='A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2572, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), _ImportedBinding__ddexC.EventDate, scope=SoundRecording, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:SoundRecording was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2578, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MasteredDate'), _ImportedBinding__ddexC.EventDate, scope=SoundRecording, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:SoundRecording was originally mastered (in either analogue or digital form).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2583, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundRecordingDetailsByTerritory'), SoundRecordingDetailsByTerritory, scope=SoundRecording, documentation='A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:SoundRecording which may vary according to ddex:Territory.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2588, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning'), _ImportedBinding__ddexC.TerritoryCode, scope=SoundRecording, documentation='The country of commissioning (represented by an ISO 3166-1 iso3166a2:TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2594, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists'), pyxb.binding.datatypes.integer, scope=SoundRecording, documentation='The number of ddex:FeaturedArtists associated with the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2599, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists'), pyxb.binding.datatypes.integer, scope=SoundRecording, documentation='The number of ddex:NonFeaturedArtists associated with the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2604, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists'), pyxb.binding.datatypes.integer, scope=SoundRecording, documentation='The number of ddex:ContractedArtists associated with the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2609, 9)))

SoundRecording._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists'), pyxb.binding.datatypes.integer, scope=SoundRecording, documentation='The number of ddex:NonContractedArtists associated with the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2614, 9)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2449, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2454, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2464, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2485, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2490, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2495, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2500, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2505, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2510, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2515, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2520, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2525, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2530, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2535, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2540, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2545, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2555, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2560, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2566, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2572, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2578, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2583, 9))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2594, 9))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2599, 9))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2604, 9))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2609, 9))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2614, 9))
    counters.add(cc_26)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecordingType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2449, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2454, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecordingId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2459, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectSoundRecordingId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2464, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2470, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2480, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2485, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsMedley')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2490, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPotpourri')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2495, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsInstrumental')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2500, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBackground')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2505, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsHiddenResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2510, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBonusResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2515, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsComputerGenerated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2520, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'IsRemastered')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2525, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2530, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2535, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2540, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2545, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2550, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2555, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecordingCollectionReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2560, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2566, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2572, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2578, 9))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'MasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2583, 9))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundRecordingDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2588, 9))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2594, 9))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2599, 9))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2604, 9))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2609, 9))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecording._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2614, 9))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_24, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, True) ]))
    st_31._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoundRecording._Automaton = _BuildAutomaton_42()




SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Territory to which the ddex:SoundRecording details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2637, 12)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Territory to which the ddex:SoundRecording details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2642, 12)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Title of the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2649, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), _ImportedBinding__ddexC.Artist, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:SoundRecording. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2654, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), _ImportedBinding__ddexC.Artist, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:DisplayConductor for the ddex:SoundRecording. A ddex:DisplayConductor may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2659, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Contributor to the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2664, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), _ImportedBinding__ddexC.IndirectResourceContributor, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2670, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), _ImportedBinding__ddexC.RightsAgreementId, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2676, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), _ImportedBinding__ddexC.LabelName, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2681, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsController'), RightsController, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2686, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), _ImportedBinding__ddexC.EventDate, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was re-mastered (usually digitally).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2692, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2697, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), _ImportedBinding__ddexC.PLine, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:PLine for the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2702, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), _ImportedBinding__ddexC.CourtesyLine, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for guests ddex:Artists or others featured on the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2707, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.string, scope=SoundRecordingDetailsByTerritory, documentation='The number indicating the order of the ddex:SoundRecording in a group of ddex:SoundRecordings in a ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2712, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), _ImportedBinding__ddexC.HostSoundCarrier, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:HostSoundCarrier on which the ddex:SoundRecording appears (e.g., the CD on which it was originally released). This ddex:Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of ddex:SoundRecording information.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2717, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MarketingComment'), _ImportedBinding__ddexC.Comment, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2723, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), _ImportedBinding__ddexC.Genre, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Genre to which the ddex:SoundRecording belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2728, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), _ImportedBinding__ddexC.ParentalWarningType, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of the classification of the ddex:SoundRecording according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2733, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AvRating'), _ImportedBinding__ddexC.AvRating, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of a rating for the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2739, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalSoundRecordingDetails'), TechnicalSoundRecordingDetails, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing technical details of the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2744, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2750, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), _ImportedBinding__ddexC.Keywords, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Description of the ddex:SoundRecording containing ddex:Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2755, 9)))

SoundRecordingDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), _ImportedBinding__ddexC.Synopsis, scope=SoundRecordingDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Synopsis of the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2760, 9)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2649, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2654, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2659, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2664, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2670, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2676, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2681, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2686, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2692, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2697, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2702, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2707, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2712, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2717, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2723, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2728, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2733, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2739, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2744, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2750, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2755, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2760, 9))
    counters.add(cc_21)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2637, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2642, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2649, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2654, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayConductor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2659, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2664, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2670, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2676, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2681, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsController')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2686, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RemasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2692, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2697, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2702, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2707, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2712, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2717, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'MarketingComment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2723, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2728, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2733, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'AvRating')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2739, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalSoundRecordingDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2744, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2750, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2755, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(SoundRecordingDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2760, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoundRecordingDetailsByTerritory._Automaton = _BuildAutomaton_43()




SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartType'), _ImportedBinding__ddexC.Description, scope=SoundRecordingPreviewDetails, documentation='A ddex:Composite containing a ddex:Description of the ddex:Type of ddex:Part that the preview relates to, e.g. chorus or intro.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2777, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StartPoint'), pyxb.binding.datatypes.decimal, scope=SoundRecordingPreviewDetails, documentation='The start point of the preview given in seconds from the start of the ddex:Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2782, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EndPoint'), pyxb.binding.datatypes.decimal, scope=SoundRecordingPreviewDetails, documentation='The end point of the preview given in seconds from the start of the ddex:Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2787, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=SoundRecordingPreviewDetails, documentation='The ddex:Duration of the preview, measured from the StartPoint.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2792, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TopLeftCorner'), pyxb.binding.datatypes.decimal, scope=SoundRecordingPreviewDetails, documentation='The position of the preview measured in ddex:Pixels or millimetres from the top left corner of the ddex:Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2797, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BottomRightCorner'), pyxb.binding.datatypes.decimal, scope=SoundRecordingPreviewDetails, documentation='The position of the preview measured in ddex:Pixels or millimetres  from the bottom right corner of the ddex:Resource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2802, 9)))

SoundRecordingPreviewDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExpressionType'), _ImportedBinding__ddex.ExpressionType, scope=SoundRecordingPreviewDetails, documentation='A ddex:Type of expression indicating how this should be perceived, e.g. as instruction (meaning that this has to be done to create the preview) or as information (meaning that this has been done to craete the preview).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2807, 9)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2777, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2782, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2787, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2792, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2797, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2802, 9))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PartType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2777, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'StartPoint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2782, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'EndPoint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2787, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2792, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TopLeftCorner')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2797, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'BottomRightCorner')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2802, 9))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SoundRecordingPreviewDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ExpressionType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2807, 9))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SoundRecordingPreviewDetails._Automaton = _BuildAutomaton_44()




TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_16, scope=TechnicalImageDetails, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalImageDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2819, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), _ImportedBinding__ddexC.DrmPlatformType, scope=TechnicalImageDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2829, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), _ImportedBinding__ddexC.ContainerFormat, scope=TechnicalImageDetails, documentation='A ddex:Composite containing details of a ddex:ContainerFormat.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2834, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageCodecType'), _ImportedBinding__ddexC.ImageCodecType, scope=TechnicalImageDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:ImageCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2839, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageHeight'), _ImportedBinding__ddexC.Extent, scope=TechnicalImageDetails, documentation='A ddex:Composite containing the vertical ddex:Extent of an ddex:Image of the ddex:Image and a ddex:UnitOfMeasure (the default is pixels).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2844, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageWidth'), _ImportedBinding__ddexC.Extent, scope=TechnicalImageDetails, documentation='A ddex:Composite containing the horizontal ddex:Extent of an ddex:Image of the ddex:Image and a ddex:UnitOfMeasure (the default is pixels).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2849, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AspectRatio'), pyxb.binding.datatypes.decimal, scope=TechnicalImageDetails, documentation='The ratio formed by dividing the ddex:ImageHeight by the ddex:ImageWidth.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2854, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ColorDepth'), pyxb.binding.datatypes.integer, scope=TechnicalImageDetails, documentation='An amount of data determining the color of a pixel of the ddex:Image (given in bits per pixel).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2859, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageResolution'), pyxb.binding.datatypes.integer, scope=TechnicalImageDetails, documentation='A number of pixels of the ddex:Image displayed in a specific spatial range (given in dpi).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2864, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalImageDetails, documentation='The ddex:Flag indicating whether the ddex:Image is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2869, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), PreviewDetails, scope=TechnicalImageDetails, documentation='A ddex:Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2874, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalImageDetails, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2879, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalImageDetails, documentation='A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2884, 9)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), _ImportedBinding__ddexC.Description, scope=TechnicalImageDetails, documentation='A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Image.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2890, 12)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), _ImportedBinding__ddexC.File, scope=TechnicalImageDetails, documentation='A ddex:Composite containing details of a ddex:File containing the ddex:Image that a ddex:DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2896, 12)))

TechnicalImageDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), _ImportedBinding__ddexC.Fingerprint, scope=TechnicalImageDetails, documentation='A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2902, 9)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2829, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2834, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2839, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2844, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2849, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2854, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2859, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2864, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2869, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2874, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2879, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2884, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2889, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2902, 9))
    counters.add(cc_13)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2819, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2829, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ContainerFormat')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2834, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2839, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageHeight')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2844, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageWidth')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2849, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AspectRatio')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2854, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ColorDepth')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2859, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageResolution')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2864, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2869, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2874, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2879, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2884, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2890, 12))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2896, 12))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalImageDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2902, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalImageDetails._Automaton = _BuildAutomaton_45()




TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_17, scope=TechnicalMidiDetails, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalMidiDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2919, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=TechnicalMidiDetails, documentation='The ddex:Duration of the instantiation of the ern:MIDI if this differs from the ddex:Duration provided for the ern:MIDI itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole ern:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2929, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), pyxb.binding.datatypes.boolean, scope=TechnicalMidiDetails, documentation='The ddex:Flag indicating whether the ern:MIDI needs to be processed (=True) or not (=False) (typically: transcoded) by the ddex:MessageRecipient before being delivered to ddex:Consumers.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2934, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), pyxb.binding.datatypes.duration, scope=TechnicalMidiDetails, documentation="The ddex:Duration of the ern:MIDI that may be sold to a ddex:Consumer if the ern:MIDI provided is not intended to be provided to ddex:Consumers 'as is' but will need to be transcoded into an appropriate format by the ddex:MessageRecipient or any other ddex:DSP handling the ddex:Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2939, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalMidiDetails, documentation='The ddex:Flag indicating whether the ddex:MIDI is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2944, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), SoundRecordingPreviewDetails, scope=TechnicalMidiDetails, documentation='A ddex:Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2949, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalMidiDetails, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2954, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalMidiDetails, documentation='A ddex:Composite containing details of when a consumer is able to get hold of the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2959, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), _ImportedBinding__ddexC.Description, scope=TechnicalMidiDetails, documentation='A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:MIDI.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2965, 12)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), _ImportedBinding__ddexC.File, scope=TechnicalMidiDetails, documentation='A ddex:Composite containing details of a ddex:File containing the ddex:MIDI that a ddex:DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2971, 12)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfVoices'), pyxb.binding.datatypes.integer, scope=TechnicalMidiDetails, documentation='The number of voices.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2977, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SoundProcessorType'), _ImportedBinding__ddexC.SoundProcessorType, scope=TechnicalMidiDetails, documentation='A ddex:Type of sound processor.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2982, 9)))

TechnicalMidiDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), _ImportedBinding__ddexC.Fingerprint, scope=TechnicalMidiDetails, documentation='A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2987, 9)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2929, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2934, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2939, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2944, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2949, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2954, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2959, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2964, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2977, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2982, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2987, 9))
    counters.add(cc_10)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2919, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2929, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2934, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2939, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2944, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2949, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2954, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2959, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2965, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2971, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfVoices')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2977, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'SoundProcessorType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2982, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalMidiDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 2987, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalMidiDetails._Automaton = _BuildAutomaton_46()




TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_18, scope=TechnicalSheetMusicDetails, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalSheetMusicDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3004, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), _ImportedBinding__ddexC.DrmPlatformType, scope=TechnicalSheetMusicDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3014, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), _ImportedBinding__ddexC.ContainerFormat, scope=TechnicalSheetMusicDetails, documentation='A ddex:Composite containing details of a ddex:ContainerFormat.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3019, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SheetMusicCodecType'), _ImportedBinding__ddexC.SheetMusicCodecType, scope=TechnicalSheetMusicDetails, documentation='A ddex:Composite containing details of a ddex:Type of SheetMusicCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3024, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalSheetMusicDetails, documentation='The ddex:Flag indicating whether the ddex:SheetMusic is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3029, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), PreviewDetails, scope=TechnicalSheetMusicDetails, documentation='A ddex:Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3034, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalSheetMusicDetails, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3039, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalSheetMusicDetails, documentation='A ddex:Composite containing details of when a consumer is able to get hold of the ddex:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3044, 9)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), _ImportedBinding__ddexC.Description, scope=TechnicalSheetMusicDetails, documentation='A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:SheetMusic.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3050, 12)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), _ImportedBinding__ddexC.File, scope=TechnicalSheetMusicDetails, documentation='A ddex:Composite containing details of a ddex:File containing the ddex:SheetMusic that a ddex:DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3056, 12)))

TechnicalSheetMusicDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), _ImportedBinding__ddexC.Fingerprint, scope=TechnicalSheetMusicDetails, documentation='A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3062, 9)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3014, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3019, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3024, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3029, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3034, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3039, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3044, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3049, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3062, 9))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3004, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3014, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ContainerFormat')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3019, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'SheetMusicCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3024, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3029, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3034, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3039, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3044, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3050, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3056, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSheetMusicDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3062, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalSheetMusicDetails._Automaton = _BuildAutomaton_47()




TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_19, scope=TechnicalSoftwareDetails, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalSoftwareDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3079, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), _ImportedBinding__ddexC.DrmPlatformType, scope=TechnicalSoftwareDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3089, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OperatingSystemType'), _ImportedBinding__ddexC.OperatingSystemType, scope=TechnicalSoftwareDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:OperatingSystem.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3094, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalSoftwareDetails, documentation='The ddex:Flag indicating whether the ddex:Software is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3099, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), PreviewDetails, scope=TechnicalSoftwareDetails, documentation='A ddex:Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3104, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalSoftwareDetails, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3109, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalSoftwareDetails, documentation='A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3114, 9)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), _ImportedBinding__ddexC.Description, scope=TechnicalSoftwareDetails, documentation='A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Software.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3120, 12)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), _ImportedBinding__ddexC.File, scope=TechnicalSoftwareDetails, documentation='A ddex:Composite containing details of a ddex:File containing the ddex:Software that a ddex:DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3126, 12)))

TechnicalSoftwareDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), _ImportedBinding__ddexC.Fingerprint, scope=TechnicalSoftwareDetails, documentation='A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3132, 9)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3089, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3094, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3099, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3104, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3109, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3114, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3119, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3132, 9))
    counters.add(cc_7)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3079, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3089, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'OperatingSystemType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3094, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3099, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3104, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3109, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3114, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3120, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3126, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoftwareDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3132, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalSoftwareDetails._Automaton = _BuildAutomaton_48()




TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_20, scope=TechnicalSoundRecordingDetails, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalSoundRecordingDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3149, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), _ImportedBinding__ddexC.DrmPlatformType, scope=TechnicalSoundRecordingDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3159, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), _ImportedBinding__ddexC.ContainerFormat, scope=TechnicalSoundRecordingDetails, documentation='A ddex:Composite containing details of a ddex:ContainerFormat.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3164, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AudioCodecType'), _ImportedBinding__ddexC.AudioCodecType, scope=TechnicalSoundRecordingDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:AudioCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3169, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BitRate'), _ImportedBinding__ddexC.BitRate, scope=TechnicalSoundRecordingDetails, documentation='A ddex:Composite containing the ddex:BitRate for the audio data and a ddex:UnitOfMeasure (the default is ddex:kbps).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3174, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfChannels'), pyxb.binding.datatypes.integer, scope=TechnicalSoundRecordingDetails, documentation='A number of audio channels.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3179, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SamplingRate'), _ImportedBinding__ddexC.SamplingRate, scope=TechnicalSoundRecordingDetails, documentation='A ddex:Composite containing the sampling rate of the ddex:SoundRecording and a ddex:UnitOfMeasure (the default is ddex:Hz).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3184, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BitsPerSample'), pyxb.binding.datatypes.integer, scope=TechnicalSoundRecordingDetails, documentation='An amount of audio data in a sample.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3189, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=TechnicalSoundRecordingDetails, documentation='The ddex:Duration of the instantiation of the ern:SoundRecording if this differs from the ddex:Duration provided for the ern:SoundRecording itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole ern:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3194, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), pyxb.binding.datatypes.boolean, scope=TechnicalSoundRecordingDetails, documentation='The ddex:Flag indicating whether the ern:SoundRecording needs to be processed (=True) or not (=False) (typically: transcoded) by the ddex:MessageRecipient before being delivered to ddex:Consumers.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3199, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), pyxb.binding.datatypes.duration, scope=TechnicalSoundRecordingDetails, documentation="The ddex:Duration of the ern:SoundRecording that may be sold to a ddex:Consumer if the ern:SoundRecording provided is not intended to be provided to ddex:Consumers 'as is' but will need to be transcoded into an appropriate format by the ddex:MessageRecipient or any other ddex:DSP handling the ddex:Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3204, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalSoundRecordingDetails, documentation='The ddex:Flag indicating whether the ddex:SoundRecording is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3209, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), SoundRecordingPreviewDetails, scope=TechnicalSoundRecordingDetails, documentation='A ddex:Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3214, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalSoundRecordingDetails, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3219, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalSoundRecordingDetails, documentation='A ddex:Composite containing details of when a consumer is able to get hold of the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3224, 9)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), _ImportedBinding__ddexC.Description, scope=TechnicalSoundRecordingDetails, documentation='A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3230, 12)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), _ImportedBinding__ddexC.File, scope=TechnicalSoundRecordingDetails, documentation='A ddex:Composite containing details of a ddex:File containing the ddex:SoundRecording that a ddex:DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3236, 12)))

TechnicalSoundRecordingDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), _ImportedBinding__ddexC.Fingerprint, scope=TechnicalSoundRecordingDetails, documentation='A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3242, 9)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3159, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3164, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3169, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3174, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3179, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3184, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3189, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3194, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3199, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3204, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3209, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3214, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3219, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3224, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3229, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3242, 9))
    counters.add(cc_15)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3149, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3159, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ContainerFormat')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3164, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AudioCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3169, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'BitRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3174, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfChannels')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3179, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'SamplingRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3184, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'BitsPerSample')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3189, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3194, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3199, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3204, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3209, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3214, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3219, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3224, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3230, 12))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3236, 12))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalSoundRecordingDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3242, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalSoundRecordingDetails._Automaton = _BuildAutomaton_49()




TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_21, scope=TechnicalTextDetails, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalTextDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3259, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), _ImportedBinding__ddexC.DrmPlatformType, scope=TechnicalTextDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3269, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), _ImportedBinding__ddexC.ContainerFormat, scope=TechnicalTextDetails, documentation='A ddex:Composite containing details of a ddex:ContainerFormat.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3274, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TextCodecType'), _ImportedBinding__ddexC.TextCodecType, scope=TechnicalTextDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:TextCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3279, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalTextDetails, documentation='The ddex:Flag indicating whether the ddex:Text is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3284, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), PreviewDetails, scope=TechnicalTextDetails, documentation='A ddex:Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3289, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalTextDetails, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3294, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalTextDetails, documentation='A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3299, 9)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), _ImportedBinding__ddexC.Description, scope=TechnicalTextDetails, documentation='A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3305, 12)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), _ImportedBinding__ddexC.File, scope=TechnicalTextDetails, documentation='A ddex:Composite containing details of a ddex:File containing the ddex:Text that a ddex:DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3311, 12)))

TechnicalTextDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), _ImportedBinding__ddexC.Fingerprint, scope=TechnicalTextDetails, documentation='A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3317, 9)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3269, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3274, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3279, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3284, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3289, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3294, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3299, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3304, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3317, 9))
    counters.add(cc_8)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3259, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3269, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ContainerFormat')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3274, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TextCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3279, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3284, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3289, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3294, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3299, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3305, 12))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3311, 12))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalTextDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3317, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalTextDetails._Automaton = _BuildAutomaton_50()




TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_22, scope=TechnicalUserDefinedResourceDetails, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalUserDefinedResourceDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3334, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), _ImportedBinding__ddexC.UserDefinedValue, scope=TechnicalUserDefinedResourceDetails, documentation='A ddex:Composite containing details of a ddex:UserDefinedValue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3344, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalUserDefinedResourceDetails, documentation='The ddex:Flag indicating whether the ddex:UserDefinedResource is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3350, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), PreviewDetails, scope=TechnicalUserDefinedResourceDetails, documentation='A ddex:Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3355, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalUserDefinedResourceDetails, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3360, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalUserDefinedResourceDetails, documentation='A ddex:Composite containing details of when a consumer is able to get hold of the ddex:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3365, 9)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), _ImportedBinding__ddexC.Description, scope=TechnicalUserDefinedResourceDetails, documentation='A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3371, 12)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), _ImportedBinding__ddexC.File, scope=TechnicalUserDefinedResourceDetails, documentation='A ddex:Composite containing details of a ddex:File containing the ddex:UserDefinedResource that a ddex:DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3377, 12)))

TechnicalUserDefinedResourceDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), _ImportedBinding__ddexC.Fingerprint, scope=TechnicalUserDefinedResourceDetails, documentation='A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3383, 9)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3344, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3350, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3355, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3360, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3365, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3370, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3383, 9))
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3334, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedValue')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3344, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3350, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3355, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3360, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3365, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3371, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3377, 12))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalUserDefinedResourceDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3383, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalUserDefinedResourceDetails._Automaton = _BuildAutomaton_51()




TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference'), STD_ANON_23, scope=TechnicalVideoDetails, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:TechnicalVideoDetails within the ddex:Release which contains it. This is a ddex:LocalTechnicalResourceDetailsAnchor starting with the letter T.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3400, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DrmPlatformType'), _ImportedBinding__ddexC.DrmPlatformType, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:DrmPlatform.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3410, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OverallBitRate'), _ImportedBinding__ddexC.BitRate, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing the overall ddex:BitRate and a ddex:UnitOfMeasure (the default is ddex:kbps).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3415, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ContainerFormat'), _ImportedBinding__ddexC.ContainerFormat, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing details of a ddex:ContainerFormat.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3420, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoCodecType'), _ImportedBinding__ddexC.VideoCodecType, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:VideoCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3425, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoBitRate'), _ImportedBinding__ddexC.BitRate, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing the ddex:BitRate for the video data and a ddex:UnitOfMeasure (the default is ddex:kbps).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3430, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FrameRate'), _ImportedBinding__ddexC.FrameRate, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing the ddex:Rate for a number of frames shown in the ddex:Video in a specific ddex:Period of ddex:Time and a ddex:UnitOfMeasure (the default is ddex:Hz, interlaced).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3435, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageHeight'), _ImportedBinding__ddexC.Extent, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing the vertical ddex:Extent of an ddex:Image of the ddex:Video and a ddex:UnitOfMeasure (the default is pixels).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3440, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ImageWidth'), _ImportedBinding__ddexC.Extent, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing the horizontal ddex:Extent of an ddex:Image of the ddex:Video and a ddex:UnitOfMeasure (the default is pixels).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3445, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AspectRatio'), pyxb.binding.datatypes.decimal, scope=TechnicalVideoDetails, documentation='The ratio formed by dividing the ddex:ImageHeight by the ddex:ImageWidth.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3450, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ColorDepth'), pyxb.binding.datatypes.integer, scope=TechnicalVideoDetails, documentation='An amount of data determining the color of a pixel of an ddex:Image of the ddex:Video (given in bits per pixel).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3455, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoDefinitionType'), _ImportedBinding__ddex.VideoDefinitionType, scope=TechnicalVideoDetails, documentation='A ddex:Type of resolution (or definition) in which the ddex:Video is provided.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3460, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AudioCodecType'), _ImportedBinding__ddexC.AudioCodecType, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing details of a ddex:Type of ddex:AudioCodec.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3465, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AudioBitRate'), _ImportedBinding__ddexC.BitRate, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing the ddex:BitRate for the audio data and a ddex:UnitOfMeasure (the default is ddex:kbps).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3470, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfAudioChannels'), pyxb.binding.datatypes.integer, scope=TechnicalVideoDetails, documentation='A number of audio channels.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3475, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AudioSamplingRate'), _ImportedBinding__ddexC.SamplingRate, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing the ddex:SamplingRate for the audio data and a ddex:UnitOfMeasure (the default is ddex:Hz).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3480, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AudioBitsPerSample'), pyxb.binding.datatypes.integer, scope=TechnicalVideoDetails, documentation='An amount of audio data in a sample.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3485, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=TechnicalVideoDetails, documentation='The ddex:Duration of the instantiation of the ern:Video if this differs from the ddex:Duration provided for the ern:Video itself (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S). This element must only be used if and when there are no royalty reporting implications on this change in duration and when the specific technical instantiation is a clip taken from a technical instantiation representing the whole ern:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3490, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired'), pyxb.binding.datatypes.boolean, scope=TechnicalVideoDetails, documentation='The ddex:Flag indicating whether the ern:Video needs to be processed (=True) or not (=False) (typically: transcoded) by the ddex:MessageRecipient before being delivered to ddex:Consumers.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3495, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration'), pyxb.binding.datatypes.duration, scope=TechnicalVideoDetails, documentation="The ddex:Duration of the ern:Video that may be sold to a ddex:Consumer if the ern:Video provided is not intended to be provided to ddex:Consumers 'as is' but will need to be transcoded into an appropriate format by the ddex:MessageRecipient or any other ddex:DSP handling the ddex:Release before it is sold (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).", location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3500, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPreview'), pyxb.binding.datatypes.boolean, scope=TechnicalVideoDetails, documentation='The ddex:Flag indicating whether the ddex:Video is technically a preview of the parent ddex:Resource (=True) or not (=False). Note that nothing can be implied from this element as to the conditions under which the preview can be made available.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3505, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PreviewDetails'), SoundRecordingPreviewDetails, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing details of a preview.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3510, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3515, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing details of when a consumer is able to get hold of the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3520, 9)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription'), _ImportedBinding__ddexC.Description, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing a ddex:Description providing details of how a ddex:DSP can obtain a ddex:File that contains the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3526, 12)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'File'), _ImportedBinding__ddexC.File, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing details of a ddex:File containing the ddex:Video that a ddex:DSP can obtain.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3532, 12)))

TechnicalVideoDetails._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Fingerprint'), _ImportedBinding__ddexC.Fingerprint, scope=TechnicalVideoDetails, documentation='A ddex:Composite containing details of a ddex:Fingerprint and its governing algorithm.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3538, 9)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3410, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3415, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3420, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3425, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3430, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3435, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3440, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3445, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3450, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3455, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3460, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3465, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3470, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3475, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3480, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3485, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3490, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3495, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3500, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3505, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3510, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3515, 9))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3520, 9))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3525, 9))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3538, 9))
    counters.add(cc_24)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalResourceDetailsReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3400, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'DrmPlatformType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3410, 9))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'OverallBitRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3415, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ContainerFormat')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3420, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3425, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoBitRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3430, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FrameRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3435, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageHeight')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3440, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ImageWidth')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3445, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AspectRatio')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3450, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ColorDepth')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3455, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoDefinitionType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3460, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AudioCodecType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3465, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AudioBitRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3470, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfAudioChannels')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3475, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AudioSamplingRate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3480, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'AudioBitsPerSample')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3485, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3490, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceProcessingRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3495, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'UsableResourceDuration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3500, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPreview')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3505, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'PreviewDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3510, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3515, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'ConsumerFulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3520, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'FileAvailabilityDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3526, 12))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'File')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3532, 12))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_24, False))
    symbol = pyxb.binding.content.ElementUse(TechnicalVideoDetails._UseForTag(pyxb.namespace.ExpandedName(None, 'Fingerprint')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3538, 9))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_24, True) ]))
    st_26._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TechnicalVideoDetails._Automaton = _BuildAutomaton_52()




Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TextType'), _ImportedBinding__ddexC.TextType, scope=Text, documentation='A ddex:Composite containing details of the ddex:Type of the ern:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3555, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=Text, documentation='The ddex:Flag indicating whether the ern:Text is related to an ddex:Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3560, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TextId'), _ImportedBinding__ddexC.TextId, scope=Text, documentation='A ddex:Composite containing details of an ddex:Identifier of the ern:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3565, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectTextId'), _ImportedBinding__ddexC.MusicalWorkId, scope=Text, documentation='A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3570, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_24, scope=Text, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:Text within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3576, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), _ImportedBinding__ddexC.ResourceMusicalWorkReferenceList, scope=Text, documentation='A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3586, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), _ImportedBinding__ddexC.ResourceContainedResourceReferenceList, scope=Text, documentation='A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3592, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=Text, documentation='A ddex:Composite containing details of a ddex:Title of the ern:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3598, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), _ImportedBinding__ddexC.EventDate, scope=Text, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Text was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3603, 9)))

Text._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TextDetailsByTerritory'), TextDetailsByTerritory, scope=Text, documentation='A ddex:Composite containing details of the ern:Text which may vary according to ddex:Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3608, 9)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3555, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3560, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3565, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3570, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3586, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3592, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3598, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3603, 9))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'TextType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3555, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3560, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'TextId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3565, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectTextId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3570, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3576, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3586, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3592, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3598, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3603, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Text._UseForTag(pyxb.namespace.ExpandedName(None, 'TextDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3608, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Text._Automaton = _BuildAutomaton_53()




TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=TextDetailsByTerritory, documentation='A ddex:Territory to which the ddex:Text details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3632, 12)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=TextDetailsByTerritory, documentation='A ddex:Territory to which the ddex:Text details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3637, 12)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=TextDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Contributor to the ddex:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3644, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), _ImportedBinding__ddexC.IndirectResourceContributor, scope=TextDetailsByTerritory, documentation='A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3650, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), _ImportedBinding__ddexC.CLine, scope=TextDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:CLine for the ddex:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3656, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), _ImportedBinding__ddexC.CourtesyLine, scope=TextDetailsByTerritory, documentation='A ddex:Composite containing an ddex:Annotation which acknowledges record companies and/or other Parties giving permission for ddex:Artists or others featured in the ddex:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3661, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=TextDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:Text was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3666, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=TextDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3671, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), _ImportedBinding__ddexC.Keywords, scope=TextDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Description of the ddex:Text containing ddex:Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3676, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), _ImportedBinding__ddexC.Synopsis, scope=TextDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Synopsis of the ddex:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3681, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), _ImportedBinding__ddexC.Genre, scope=TextDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Genre to which the ddex:Text belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3686, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), _ImportedBinding__ddexC.ParentalWarningType, scope=TextDetailsByTerritory, documentation='A ddex:Composite containing details of the classification of the ddex:Text according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3691, 9)))

TextDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalTextDetails'), TechnicalTextDetails, scope=TextDetailsByTerritory, documentation='A ddex:Composite containing technical details of the ddex:Text.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3697, 9)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3644, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3650, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3656, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3661, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3666, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3671, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3676, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3681, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3686, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3691, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3697, 9))
    counters.add(cc_10)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3632, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3637, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3644, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3650, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3656, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3661, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3666, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3671, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3676, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3681, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3686, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3691, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(TextDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalTextDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3697, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TextDetailsByTerritory._Automaton = _BuildAutomaton_54()




UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceType'), _ImportedBinding__ddexC.UserDefinedResourceType, scope=UserDefinedResource, documentation='A ddex:Composite containing details of the ddex:Type of the ern:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3715, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=UserDefinedResource, documentation='The ddex:Flag indicating whether the ern:UserDefinedResource is related to an ddex:Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3721, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceId'), _ImportedBinding__ddexC.UserDefinedResourceId, scope=UserDefinedResource, documentation='A ddex:Composite containing details of ddex:Identifiers of the ern:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3726, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectUserDefinedResourceId'), _ImportedBinding__ddexC.MusicalWorkId, scope=UserDefinedResource, documentation='A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3732, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_25, scope=UserDefinedResource, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:UserDefinedResource within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3738, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), _ImportedBinding__ddexC.ResourceMusicalWorkReferenceList, scope=UserDefinedResource, documentation='A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3748, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), _ImportedBinding__ddexC.ResourceContainedResourceReferenceList, scope=UserDefinedResource, documentation='A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3754, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=UserDefinedResource, documentation='A ddex:Composite containing details of a ddex:Title of the ern:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3760, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), _ImportedBinding__ddexC.UserDefinedValue, scope=UserDefinedResource, documentation='A ddex:Composite containing details of a ddex:UserDefinedValue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3765, 9)))

UserDefinedResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceDetailsByTerritory'), UserDefinedResourceDetailsByTerritory, scope=UserDefinedResource, documentation='A ddex:Composite containing details of the ern:UserDefinedResource which may vary according to ddex:Territory of release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3771, 9)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3715, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3721, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3732, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3748, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3754, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3760, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3765, 9))
    counters.add(cc_6)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3715, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3721, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3726, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectUserDefinedResourceId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3732, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3738, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3748, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3754, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3760, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedValue')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3765, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UserDefinedResource._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedResourceDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3771, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    st_9._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UserDefinedResource._Automaton = _BuildAutomaton_55()




UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Territory to which the ddex:UserDefinedResource details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3795, 12)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Territory to which the ddex:UserDefinedResource details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3800, 12)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Contributor to the ddex:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3807, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), _ImportedBinding__ddexC.IndirectResourceContributor, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3813, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserDefinedValue'), _ImportedBinding__ddexC.UserDefinedValue, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:UserDefinedValue.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3819, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), _ImportedBinding__ddexC.PLine, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:PLine for the ddex:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3825, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), _ImportedBinding__ddexC.CLine, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:CLine for the ddex:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3830, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:UserDefinedResource was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3835, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3840, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), _ImportedBinding__ddexC.Keywords, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Description of the ddex:UserDefinedResource containing ddex:Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3845, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), _ImportedBinding__ddexC.Synopsis, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Synopsis of the ddex:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3850, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), _ImportedBinding__ddexC.Genre, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Genre to which the ddex:UserDefinedResource belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3855, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), _ImportedBinding__ddexC.ParentalWarningType, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing details of the classification of the ddex:UserDefinedResource according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3860, 9)))

UserDefinedResourceDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalUserDefinedResourceDetails'), TechnicalUserDefinedResourceDetails, scope=UserDefinedResourceDetailsByTerritory, documentation='A ddex:Composite containing technical details of the ddex:UserDefinedResource.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3866, 9)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3807, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3813, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3819, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3825, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3830, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3835, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3840, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3845, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3850, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3855, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3860, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3866, 9))
    counters.add(cc_11)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3795, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3800, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3807, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3813, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'UserDefinedValue')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3819, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3825, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3830, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3835, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3840, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3845, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3850, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3855, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3860, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(UserDefinedResourceDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalUserDefinedResourceDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3866, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
UserDefinedResourceDetailsByTerritory._Automaton = _BuildAutomaton_56()




Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoType'), _ImportedBinding__ddexC.VideoType, scope=Video, documentation='A ddex:Composite containing details of the ddex:Type of the ern:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3884, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsArtistRelated'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The ddex:Flag indicating whether the ern:Video is related to an ddex:Artist (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3889, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoId'), _ImportedBinding__ddexC.VideoId, scope=Video, documentation='A ddex:Composite containing details of an ddex:Identifier of the ern:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3894, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectVideoId'), _ImportedBinding__ddexC.MusicalWorkId, scope=Video, documentation='A ddex:Composite containing details of a ddex:MusicalWorkId of a ddex:MusicalWork used in the ern:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3899, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceReference'), STD_ANON_26, scope=Video, documentation='The ddex:Identifier (specific to the ddex:Message) of the ern:Video within the ddex:Release which contains it. This is a ddex:LocalResourceAnchor starting with the letter A.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3905, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoCueSheetReference'), _ImportedBinding__ddexC.VideoCueSheetReference, scope=Video, documentation='A ddex:Composite containing a ddex:VideoCueSheetReference for a ddex:CueSheet (specific to this ddex:Message).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3916, 12)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReasonForCueSheetAbsence'), _ImportedBinding__ddexC.Reason, scope=Video, documentation='A ddex:Composite containing the textual ddex:Description of the reason for the ddex:Identifier being used as a proxy.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3922, 12)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReferenceTitle'), _ImportedBinding__ddexC.ReferenceTitle, scope=Video, documentation='A ddex:Composite containing details of the ddex:ReferenceTitle of the ern:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3928, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=Video, documentation='A ddex:Composite containing details of a ddex:Title of the ern:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3933, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription'), _ImportedBinding__ddexC.Description, scope=Video, documentation='A ddex:Composite containing a ddex:Description of the ddex:Type of instrumentation of the MusicalWork(s) in the ern:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3938, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsMedley'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The ddex:Flag indicating whether the ern:Video is a ddex:Medley (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3943, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsPotpourri'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The ddex:Flag indicating whether the ern:Video is a ddex:Potpourri (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3948, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsInstrumental'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The ddex:Flag indicating whether the ern:Video is instrumental (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3953, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBackground'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The ddex:Flag indicating whether the ern:Video is used as background to other audio or audiovisual material (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3958, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsHiddenResource'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The ddex:Flag indicating whether the ern:Video is hidden in some way from the ddex:Consumer (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3963, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsBonusResource'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The ddex:Flag indicating whether the ern:Video is additional to those on the original ddex:Release of which this is a ddex:Version (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3968, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IsRemastered'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The ddex:Flag indicating whether the ern:Video is remastered (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3973, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The ddex:Flag indicating whether the ern:Video is preceded by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3978, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter'), pyxb.binding.datatypes.boolean, scope=Video, documentation='The ddex:Flag indicating whether the ern:Video is followed by a period of silence (=False) or not (=True). ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3983, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired'), pyxb.binding.datatypes.boolean, scope=Video, documentation='A ddex:Flag indicating whether performer information is required (=True) or not (=False) when communicating details of the ern:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3988, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance'), _ImportedBinding__iso639a2.LanguageCode, scope=Video, documentation='The ddex:Language of the ddex:Performance recorded in the ern:Video (represented by an ISO 639-2 iso639a2:LanguageCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3993, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Duration'), pyxb.binding.datatypes.duration, scope=Video, documentation='The ddex:Duration of the ern:Video (using the ISO 8601:2004 PT[[hhH]mmM]ssS format, where lower case characters indicate variables, upper case characters are part of the xs:string, e.g. one hour, two minutes and three seconds would be PT1H2M3S).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3999, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), _ImportedBinding__ddexC.RightsAgreementId, scope=Video, documentation='A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ern:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4004, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoCollectionReferenceList'), _ImportedBinding__ddexC.SoundRecordingCollectionReferenceList, scope=Video, documentation='A ddex:Composite containing details of one or more ddex:Collections. The referenced ddex:Collection has to be of ddex:CollectionType ddex:VideoChapter.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4009, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList'), _ImportedBinding__ddexC.ResourceMusicalWorkReferenceList, scope=Video, documentation='A ddex:Composite containing details of one or more ddex:MusicalWorks contained in the ern:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4015, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList'), _ImportedBinding__ddexC.ResourceContainedResourceReferenceList, scope=Video, documentation='A ddex:Composite containing details of ddex:ResourceContainedResourceReferences referring to a ddex:Resource that is contained in the current ern:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4021, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), _ImportedBinding__ddexC.EventDate, scope=Video, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Video was created.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4027, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MasteredDate'), _ImportedBinding__ddexC.EventDate, scope=Video, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ern:Video was originally mastered (in either analogue or digital form).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4032, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'VideoDetailsByTerritory'), VideoDetailsByTerritory, scope=Video, documentation='A ddex:Composite containing details of ddex:Descriptors and other attributes of the ern:Video which may vary according to ddex:Territory of release. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4037, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning'), _ImportedBinding__ddexC.TerritoryCode, scope=Video, documentation='The country of commissioning (represented by an ISO 3166-1 iso3166a2:TerritoryCode).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4043, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists'), pyxb.binding.datatypes.integer, scope=Video, documentation='The number of ddex:FeaturedArtists associated with the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4048, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists'), pyxb.binding.datatypes.integer, scope=Video, documentation='The number of ddex:NonFeaturedArtists associated with the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4053, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists'), pyxb.binding.datatypes.integer, scope=Video, documentation='The number of ddex:ContractedArtists associated with the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4058, 9)))

Video._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists'), pyxb.binding.datatypes.integer, scope=Video, documentation='The number of ddex:NonContractedArtists associated with the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4063, 9)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3884, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3889, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3894, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3899, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3915, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3928, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3933, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3938, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3943, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3948, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3953, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3958, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3963, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3968, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3973, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3978, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3983, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3988, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3993, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4004, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4009, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4015, 9))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4021, 9))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4027, 9))
    counters.add(cc_23)
    cc_24 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4032, 9))
    counters.add(cc_24)
    cc_25 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4043, 9))
    counters.add(cc_25)
    cc_26 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4048, 9))
    counters.add(cc_26)
    cc_27 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4053, 9))
    counters.add(cc_27)
    cc_28 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4058, 9))
    counters.add(cc_28)
    cc_29 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4063, 9))
    counters.add(cc_29)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3884, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsArtistRelated')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3889, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3894, 9))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectVideoId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3899, 9))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3905, 9))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoCueSheetReference')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3916, 12))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'ReasonForCueSheetAbsence')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3922, 12))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'ReferenceTitle')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3928, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3933, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'InstrumentationDescription')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3938, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsMedley')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3943, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsPotpourri')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3948, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsInstrumental')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3953, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBackground')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3958, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsHiddenResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3963, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsBonusResource')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3968, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'IsRemastered')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3973, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceBefore')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3978, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NoSilenceAfter')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3983, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'PerformerInformationRequired')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3988, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'LanguageOfPerformance')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3993, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'Duration')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 3999, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4004, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoCollectionReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4009, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceMusicalWorkReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4015, 9))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContainedResourceReferenceList')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4021, 9))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4027, 9))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'MasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4032, 9))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'VideoDetailsByTerritory')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4037, 9))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_25, False))
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryOfCommissioning')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4043, 9))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_26, False))
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfFeaturedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4048, 9))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_27, False))
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfNonFeaturedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4053, 9))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_28, False))
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfContractedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4058, 9))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_29, False))
    symbol = pyxb.binding.content.ElementUse(Video._UseForTag(pyxb.namespace.ExpandedName(None, 'NumberOfNonContractedArtists')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4063, 9))
    st_33 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_22, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_23, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_23, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_23, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_24, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_24, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_25, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_25, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_25, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_26, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_26, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_26, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_27, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_27, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_27, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_28, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_28, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_29, True) ]))
    st_33._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Video._Automaton = _BuildAutomaton_57()




VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=VideoDetailsByTerritory, documentation='A ddex:Territory to which the ddex:SoundRecording details apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:ExcludedTerritory shall be present, but not both. ', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4086, 12)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode'), _ImportedBinding__ddexC.TerritoryCode, scope=VideoDetailsByTerritory, documentation='A ddex:Territory to which the ddex:SoundRecording details do not apply (represented by an ISO 3166-1 iso3166a2:TerritoryCode). Either this ddex:Element or ddex:Territory shall be present, but not both.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4091, 12)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Title'), _ImportedBinding__ddexC.Title, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Title of the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4098, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayArtist'), _ImportedBinding__ddexC.Artist, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:DisplayArtist for the ddex:SoundRecording. The ddex:DisplayArtist may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4103, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DisplayConductor'), _ImportedBinding__ddexC.Artist, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:DisplayConductor for the ddex:Video. A ddex:DisplayConductor may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4108, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ResourceContributor'), ResourceContributor, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Contributor to the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4113, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor'), _ImportedBinding__ddexC.IndirectResourceContributor, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of an indirect ddex:Contributor to the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4119, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsAgreementId'), _ImportedBinding__ddexC.RightsAgreementId, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of ddex:Identifiers of a ddex:License, ddex:Claim, ddex:RightShare or contract for the MusicalWork(s) used in the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4125, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LabelName'), _ImportedBinding__ddexC.LabelName, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing the ddex:Name of the ddex:Label under which the ddex:Release is to be marketed.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4130, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RightsController'), RightsController, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of ddex:RightsController of Rights in the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4135, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RemasteredDate'), _ImportedBinding__ddexC.EventDate, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was re-mastered (usually digitally).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4141, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate'), _ImportedBinding__ddexC.EventDate, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of the Date and ddex:Place of the ddex:Event in which the ddex:SoundRecording was originally published, whether for physical or electronic/online distribution.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4146, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PLine'), _ImportedBinding__ddexC.PLine, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:PLine for the ddex:SoundRecording.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4151, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CourtesyLine'), _ImportedBinding__ddexC.CourtesyLine, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing an ddex:Annotation ddex:Annotation which acknowledges record companies and/or other Parties giving permission for guests ddex:Artists or others featured on the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4156, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SequenceNumber'), pyxb.binding.datatypes.string, scope=VideoDetailsByTerritory, documentation='The number indicating the order of the ddex:Video in a group of ddex:Videos in a ddex:Release.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4161, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier'), _ImportedBinding__ddexC.HostSoundCarrier, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:HostSoundCarrier on which the ddex:Video appears (e.g., the CD on which it was originally released). This ddex:Composite exists in the Release Notification Message Suite Standard, to support the identification and matching of ddex:Video information.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4166, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MarketingComment'), _ImportedBinding__ddexC.Comment, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing a ddex:Comment about the promotion and marketing of the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4172, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Genre'), _ImportedBinding__ddexC.Genre, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Genre to which the ddex:Video belongs.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4177, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ParentalWarningType'), _ImportedBinding__ddexC.ParentalWarningType, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of the classification of the ddex:Video according to advice which it carries about the level of explicitness or offensiveness of its content.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4182, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AvRating'), _ImportedBinding__ddexC.AvRating, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of a rating for the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4188, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FulfillmentDate'), _ImportedBinding__ddexC.FulfillmentDate, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:FulfillmentDate.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4193, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Keywords'), _ImportedBinding__ddexC.Keywords, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Description of the ddex:Video containing ddex:Keywords.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4198, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Synopsis'), _ImportedBinding__ddexC.Synopsis, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Synopsis of the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4203, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CLine'), _ImportedBinding__ddexC.CLine, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of the ddex:CLine for the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4208, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TechnicalVideoDetails'), TechnicalVideoDetails, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing technical details of the ddex:Video.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4213, 9)))

VideoDetailsByTerritory._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Character'), Character, scope=VideoDetailsByTerritory, documentation='A ddex:Composite containing details of a ddex:Character in the ddex:Video. A ddex:Character may be described through ddex:Name, ddex:Identifier and Roles.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4219, 9)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4098, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4103, 9))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4108, 9))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4113, 9))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4119, 9))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4125, 9))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4130, 9))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4135, 9))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4141, 9))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4146, 9))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4151, 9))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4156, 9))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4161, 9))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4166, 9))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4172, 9))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4177, 9))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4182, 9))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4188, 9))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4193, 9))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4198, 9))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4203, 9))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4208, 9))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4213, 9))
    counters.add(cc_22)
    cc_23 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4219, 9))
    counters.add(cc_23)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4086, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ExcludedTerritoryCode')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4091, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Title')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4098, 9))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayArtist')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4103, 9))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'DisplayConductor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4108, 9))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4113, 9))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'IndirectResourceContributor')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4119, 9))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsAgreementId')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4125, 9))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'LabelName')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4130, 9))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RightsController')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4135, 9))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'RemasteredDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4141, 9))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'OriginalResourceReleaseDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4146, 9))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'PLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4151, 9))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CourtesyLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4156, 9))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'SequenceNumber')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4161, 9))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'HostSoundCarrier')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4166, 9))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'MarketingComment')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4172, 9))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Genre')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4177, 9))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'ParentalWarningType')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4182, 9))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'AvRating')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4188, 9))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'FulfillmentDate')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4193, 9))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Keywords')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4198, 9))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Synopsis')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4203, 9))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'CLine')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4208, 9))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'TechnicalVideoDetails')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4213, 9))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_23, False))
    symbol = pyxb.binding.content.ElementUse(VideoDetailsByTerritory._UseForTag(pyxb.namespace.ExpandedName(None, 'Character')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4219, 9))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_21, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_22, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_22, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_23, True) ]))
    st_25._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
VideoDetailsByTerritory._Automaton = _BuildAutomaton_58()




WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Condition'), Condition, scope=WebPolicy, documentation='A ddex:Composite containing details of conditions.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4236, 9)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AccessBlockingRequested'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A ddex:Flag indicating whether a ddex:MessageRecipient shall block all access to the ddex:Release (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4241, 9)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AccessLimitation'), _ImportedBinding__ddex.AccessLimitation, scope=WebPolicy, documentation='A ddex:Type of limitation on the access of the ddex:UgcSite. This governs whether the content of ddex:UgcSites is only accessible to members/friends of the site or not.', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4247, 12)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EmbeddingAllowed'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A ddex:Flag indicating whether a user is allowed to embed a ddex:Release on his website outside the ddex:UgcSite (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4252, 12)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserRatingAllowed'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A ddex:Flag indicating whether a user is allowed to provide a rating for the ddex:Release on the ddex:UgcSite (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4257, 12)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserCommentAllowed'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A ddex:Flag indicating whether a user is allowed to provide a ddex:Comment for the ddex:Release on the ddex:UgcSite (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4262, 12)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UserResponsesAllowed'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A ddex:Flag indicating whether a user is allowed to provide a response to a ddex:Comment for the ddex:Release on the ddex:UgcSite (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4267, 12)))

WebPolicy._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SyndicationAllowed'), pyxb.binding.datatypes.boolean, scope=WebPolicy, documentation='A ddex:Flag indicating whether syndication is allowed (=True) or not (=False).', location=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4272, 12)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4241, 9))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4247, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4252, 12))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4257, 12))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4262, 12))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4267, 12))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4272, 12))
    counters.add(cc_6)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'Condition')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4236, 9))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'AccessBlockingRequested')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4241, 9))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'AccessLimitation')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4247, 12))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'EmbeddingAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4252, 12))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'UserRatingAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4257, 12))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'UserCommentAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4262, 12))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'UserResponsesAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4267, 12))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(WebPolicy._UseForTag(pyxb.namespace.ExpandedName(None, 'SyndicationAllowed')), pyxb.utils.utility.Location('http://ddex.net/xml/ern/351/release-notification.xsd', 4272, 12))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
WebPolicy._Automaton = _BuildAutomaton_59()

